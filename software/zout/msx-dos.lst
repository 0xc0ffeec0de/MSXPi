   1:				;|===========================================================================|
   2:				;|                                                                           |
   3:				;| MSXPi Interface                                                           |
   4:				;|                                                                           |
   5:				;| Version : 0.8                                                             |
   6:				;|                                                                           |
   7:				;| Copyright (c) 2015-2016 Ronivon Candido Costa (ronivon@outlook.com)       |
   8:				;|                                                                           |
   9:				;| All rights reserved                                                       |
  10:				;|                                                                           |
  11:				;| Redistribution and use in source and compiled forms, with or without      |
  12:				;| modification, are permitted under GPL license.                            |
  13:				;|                                                                           |
  14:				;|===========================================================================|
  15:				;|                                                                           |
  16:				;| This file is part of MSXPi Interface project.                             |
  17:				;|                                                                           |
  18:				;| MSX PI Interface is free software: you can redistribute it and/or modify  |
  19:				;| it under the terms of the GNU General Public License as published by      |
  20:				;| the Free Software Foundation, either version 3 of the License, or         |
  21:				;| (at your option) any later version.                                       |
  22:				;|                                                                           |
  23:				;| MSX PI Interface is distributed in the hope that it will be useful,       |
  24:				;| but WITHOUT ANY WARRANTY; without even the implied warranty of            |
  25:				;| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
  26:				;| GNU General Public License for more details.                              |
  27:				;|                                                                           |
  28:				;| You should have received a copy of the GNU General Public License         |
  29:				;| along with MSX PI Interface.  If not, see <http://www.gnu.org/licenses/>. |
  30:				;|===========================================================================|
  31:				;
  32:				; MSXPi Driver v0.8.1 (2017,2018);
  33:				;
  34:				; DOS 1.x kernel
  35:				;
  36:				; Source re-created by Z80DIS 2.2
  37:				; Z80DIS was written by Kenneth Gielow, Palo Alto, CA
  38:				;
  39:				; Code Copyrighted by ASCII and maybe others
  40:				; Source comments and updates by Arjen Zeilemaker
  41:				;
  42:				; Sourcecode supplied for STUDY ONLY
  43:				; Recreation NOT permitted without authorisation of the copyrightholders
  44:				;
  45:				
  46:				
  47:				
  48:					.Z80
  49:					ASEG
  50:     -	4000          		ORG	04000H
  51:				
  52:				; Changes made:
  53:				; 1) Bugfixes of version 1.1 of diskrom
  54:				; 2) Own changes:
  55:				; - routine at 05A11H simpified.
  56:				; - routine at 05E52H simpified, does not support RAM other than 64 Kb
  57:				; - routine at 06306H simpified.
  58:				; extra room used to:
  59:				; - bugfix memory switching routines (CALSLT/CALLF/ENASLT)
  60:				; - boot from any drive at system startup
  61:				; - boot from default drive with _SYSTEM
  62:				
  63:				
  64:				
  65:				; symbols which must be defined by the diskdriver
  66:				;
  67:				;	EXTRN	INIHRD
  68:				;	EXTRN	DRIVES
  69:				;	EXTRN	INIENV
  70:				;	EXTRN	DSKIO
  71:				;	EXTRN	DSKCHG
  72:				;	EXTRN	GETDPB
  73:				;	EXTRN	CHOICE
  74:				;	EXTRN	DSKFMT
  75:				;	EXTRN	MTOFF
  76:				;	EXTRN	OEMSTA
  77:				;	EXTRN	MYSIZE
  78:				;	EXTRN	SECLEN
  79:				;	EXTRN	DEFDPB
  80:				
  81:				; symbols of routines which can be used by the diskdriver
  82:				;
  83:				;	PUBLIC	PROMPT
  84:				;	PUBLIC	SETINT
  85:				;	PUBLIC	PRVINT
  86:				;	PUBLIC	GETSLT
  87:				;	PUBLIC	GETWRK
  88:				;	PUBLIC	DIV16
  89:				;	PUBLIC	ENASLT
  90:				;	PUBLIC	XFER
  91:				
  92:				
  93:     -	0000          	WBOOT	equ	00000H
  94:     -	000C          	RDSLT	equ	0000CH
  95:     -	0014          	WRSLT	equ	00014H
  96:     -	001C          	CALSLT	equ	0001CH
  97:     -	0024          	ENASLT	equ	00024H
  98:     -	002B          	IDBYT0	equ	0002BH
  99:     -	0030          	CALLF	equ	00030H
 100:     -	0038          	KEYINT	equ	00038H
 101:     -	0059          	LDIRMV	equ	00059H
 102:     -	005C          	LDIRVM	equ	0005CH
 103:     -	009C          	CHSNS	equ	0009CH
 104:     -	009F          	CHGET	equ	0009FH
 105:     -	00A2          	CHPUT	equ	000A2H
 106:     -	00A5          	LPTOUT	equ	000A5H
 107:     -	00B7          	BREAKX	equ	000B7H
 108:     -	00BD          	CKCNTC	equ	000BDH
 109:     -	00CC          	ERAFNK	equ	000CCH
 110:     -	00D2          	TOTEXT	equ	000D2H
 111:     -	0141          	SNSMAT	equ	00141H
 112:     -	0144          	PHYDIO	equ	00144H
 113:     -	0156          	KILBUF	equ	00156H
 114:     -	0159          	CALBAS	equ	00159H
 115:				
 116:     -	003B          	X003B	equ	0003BH			; helper routine in DOS memoryspace: save and change secundairy slotregister
 117:     -	0046          	X0046	equ	00046H			; helper routine in DOS memoryspace: restore secundairy slotregister (RDSLT/WRSLT)
 118:     -	004B          	X004B	equ	0004BH			; helper routine in DOS memoryspace: restore secundairy slotregister (CALSLT/CALLF)
 119:				
 120:     -	C000          	YC000	equ	0C000H			; bootsector transferadres
 121:				
 122:     -	F1C9          	XF1C9	equ	0F1C9H			; output string (BDOS 9), also start of fixed diskvars
 123:     -	F1D9          	XF1D9	equ	0F1D9H			; XFER, transfer to DOS memory
 124:     -	F1E2          	XF1E2	equ	0F1E2H			; WBOOT, warm boot DOS system
 125:     -	F1E8          	XF1E8	equ	0F1E8H			; start handler in DOS memory
 126:     -	F1F4          	XF1F4	equ	0F1F4H			; validate FCB filename
 127:     -	F1F7          	YF1F7	equ	0F1F7H			; reserved devicenames
 128:     -	F20B          	YF20B	equ	0F20BH			; ´direntry´ for devices
 129:     -	F22B          	YF22B	equ	0F22BH			; days in month table
 130:     -	F237          	YF237	equ	0F237H			; BDOS console output columnpos
 131:     -	F238          	YF238	equ	0F238H			; console columnpos at start of lineinput
 132:     -	F239          	YF239	equ	0F239H			; lineinput insert flag
 133:     -	F23A          	YF23A	equ	0F23AH			; lineinput secret message flag
 134:     -	F23B          	YF23B	equ	0F23BH			; console output to printer flag
 135:     -	F23C          	YF23C	equ	0F23CH			; directory buffer changed flag
 136:     -	F23D          	YF23D	equ	0F23DH			; transferadres
 137:     -	F23F          	YF23F	equ	0F23FH			; sectornumber in data buffer
 138:     -	F241          	YF241	equ	0F241H			; driveid of sector in data buffer
 139:     -	F242          	YF242	equ	0F242H			; data buffer changed flag
 140:     -	F243          	YF243	equ	0F243H			; DPB pointer current operation
 141:     -	F245          	YF245	equ	0F245H			; sectornumber (offset) in directory buffer
 142:     -	F246          	YF246	equ	0F246H			; driveid of sector in directory buffer
 143:     -	F247          	YF247	equ	0F247H			; default driveid
 144:     -	F248          	YF248	equ	0F248H			; current day (1..31)
 145:     -	F249          	YF249	equ	0F249H			; current month (1..12)
 146:     -	F24A          	YF24A	equ	0F24AH			; current year (offset to 1980)
 147:     -	F24C          	YF24C	equ	0F24CH			; current days since 1-1-1980
 148:     -	F24E          	YF24E	equ	0F24EH			; current day of week (0=sunday)
 149:     -	F24F          	XF24F	equ	0F24FH			; prompt for disk hook
 150:     -	F252          	XF252	equ	0F252H			; get fat entry content hook
 151:     -	F255          	XF255	equ	0F255H			; check if devicename hook
 152:     -	F258          	XF258	equ	0F258H			; try next direntry hook
 153:     -	F25B          	XF25B	equ	0F25BH			; get next direntry hook
 154:     -	F25E          	XF25E	equ	0F25EH			; next direntry hook
 155:     -	F261          	XF261	equ	0F261H			; validate FCB drive and filename hook
 156:     -	F264          	XF264	equ	0F264H			; fcb open hook
 157:     -	F267          	XF267	equ	0F267H			; get latest FAT hook
 158:     -	F26A          	XF26A	equ	0F26AH			; get pointer to DPB of current drive hook
 159:     -	F26D          	XF26D	equ	0F26DH			; write FAT hook
 160:     -	F270          	XF270	equ	0F270H			; read sector hook
 161:     -	F273          	XF273	equ	0F273H			; diskerror hook
 162:     -	F276          	XF276	equ	0F276H			; write dirsector hook
 163:     -	F279          	XF279	equ	0F279H			; write sector hook
 164:     -	F27C          	XF27C	equ	0F27CH			; multiply hook
 165:     -	F27F          	XF27F	equ	0F27FH			; divide hook
 166:     -	F282          	XF282	equ	0F282H			; get absolute cluster hook
 167:     -	F285          	XF285	equ	0F285H			; get next absolute cluster hook
 168:     -	F288          	XF288	equ	0F288H			; partical sector read hook
 169:     -	F28B          	XF28B	equ	0F28BH			; partical sector write hook
 170:     -	F28E          	XF28E	equ	0F28EH			; start read recordoperation from disk hook
 171:     -	F291          	XF291	equ	0F291H			; finish read recordoperation from disk hook
 172:     -	F294          	XF294	equ	0F294H			; end read recordoperation from disk hook
 173:     -	F297          	XF297	equ	0F297H			; record operation error at start hook
 174:     -	F29A          	XF29A	equ	0F29AH			; start write recordoperation to disk hook
 175:     -	F29D          	XF29D	equ	0F29DH			; finish write recordoperation to disk hook
 176:     -	F2A0          	XF2A0	equ	0F2A0H			; calculate sequencial sectors hook
 177:     -	F2A3          	XF2A3	equ	0F2A3H			; get sectornumber of cluster hook
 178:     -	F2A6          	XF2A6	equ	0F2A6H			; allocate FAT chain hook
 179:     -	F2A9          	XF2A9	equ	0F2A9H			; release FAT chain hook
 180:     -	F2AC          	XF2AC	equ	0F2ACH			; lineinput headloop hook
 181:     -	F2AF          	XF2AF	equ	0F2AFH			; console output hook
 182:     -	F2B2          	XF2B2	equ	0F2B2H			; get time and date for direntry hook
 183:     -	F2B5          	XF2B5	equ	0F2B5H			; setup days in februari hook
 184:     -	F2B8          	YF2B8	equ	0F2B8H			; current direntry number
 185:     -	F2B9          	YF2B9	equ	0F2B9H			; filename1
 186:     -	F2C4          	YF2C4	equ	0F2C4H			; original DR byte FCB
 187:     -	F2C5          	YF2C5	equ	0F2C5H			; filename2 (rename)
 188:     -	F2D0          	YF2D0	equ	0F2D0H			; temporary save for F2B9 and F2C4 (rename)
 189:     -	F2DC          	YF2DC	equ	0F2DCH			; flag ignore fileattributes
 190:     -	F2DD          	YF2DD	equ	0F2DDH			; current relative sector in cluster
 191:     -	F2DE          	YF2DE	equ	0F2DEH			; result of recordoperation
 192:     -	F2DF          	YF2DF	equ	0F2DFH			; flag increase current relative sector in cluster (0 means not)
 193:     -	F2E0          	YF2E0	equ	0F2E0H			; flag flake read (0 means real read)
 194:     -	F2E1          	YF2E1	equ	0F2E1H			; current driveid
 195:     -	F2E2          	YF2E2	equ	0F2E2H			; transferadres for recordoperation
 196:     -	F2E4          	YF2E4	equ	0F2E4H			; start record (32 bit) for recordoperation
 197:     -	F2E8          	YF2E8	equ	0F2E8H			; number of records for recordoperation
 198:     -	F2EA          	YF2EA	equ	0F2EAH			; current relative cluster of file
 199:     -	F2EC          	YF2EC	equ	0F2ECH			; current cluster of file
 200:     -	F2EE          	YF2EE	equ	0F2EEH			; start relative sector for recordoperation
 201:     -	F2F0          	YF2F0	equ	0F2F0H			; relative cluster after fileend for write recordoperation
 202:     -	F2F2          	YF2F2	equ	0F2F2H			; start offset in sector for recordoperation
 203:     -	F2F4          	YF2F4	equ	0F2F4H			; start fileposition (32 bit) for recordoperation
 204:     -	F2F8          	YF2F8	equ	0F2F8H			; partical sector transfer at start
 205:     -	F2FA          	YF2FA	equ	0F2FAH			; partical sector transfer at end
 206:     -	F2FC          	YF2FC	equ	0F2FCH			; number of complete sectors to transfer
 207:     -	F2FE          	YF2FE	equ	0F2FEH			; first free direntry (0FFH if none found)
 208:     -	F2FF          	YF2FF	equ	0F2FFH			; flag diskoperation (0 if read, 1 if write)
 209:     -	F300          	YF300	equ	0F300H			; pointer to remaining lineinput from CON read record operation
 210:     -	F302          	YF302	equ	0F302H			; temporary store for maximium cluster
 211:									; looks like F304-F305 are unused!
 212:     -	F306          	YF306	equ	0F306H			; flag CP/M compatible BDOS call (0 means no CP/M, HL has value, <>0 means CP/M, HL is compatible filled)
 213:     -	F307          	YF307	equ	0F307H			; saved pointer to FCB search first, used for search next
 214:     -	F309          	YF309	equ	0F309H			; saved pointer to DPB search first, used for search next
 215:     -	F30B          	YF30B	equ	0F30BH			; saved current direntry number search first/next (FFh means invalid)
 216:     -	F30C          	YF30C	equ	0F30CH			; original EX byte FCB
 217:     -	F30D          	RAWFLG	equ	0F30DH			; read after write (verify) flag
 218:     -	F30E          	YF30E	equ	0F30EH			; date format (0 japanese, 1 european, 2 american)
 219:     -	F30F          	YF30F	equ	0F30FH			; double byte header char table
 220:									; looks like F313-F322 are unused
 221:     -	F323          	YF323	equ	0F323H			; diskerror handler pointer
 222:     -	F325          	YF325	equ	0F325H			; abort handler pointer
 223:     -	F327          	XF327	equ	0F327H			; AUX input hook (MSXHOOK style), default returns CTRL-Z in register A
 224:     -	F32C          	XF32C	equ	0F32CH			; AUX output hook (MSXHOOK style), default does nothing
 225:     -	F331          	XF331	equ	0F331H			; BDOS hook (MSXHOOK style)
 226:     -	F336          	YF336	equ	0F336H			; flag saved input available (0 = none available)
 227:     -	F337          	YF337	equ	0F337H			; save input
 228:     -	F338          	YF338	equ	0F338H			; use clockchip flag
 229:     -	F339          	YF339	equ	0F339H			; saved stackpointer format routine
 230:     -	F33B          	YF33B	equ	0F33BH			; days since 1-1-1980, used when no clockchip
 231:     -	F33D          	YF33D	equ	0F33DH			; recordsize GET/PUT recordoperations
 232:     -	F33F          	YF33F	equ	0F33FH			; at systeminit: CTRL key flag, later: saved driveid driveroperation (0=A:)
 233:     -	F340          	YF340	equ	0F340H			; flag kernel cold boot (0 = cold, <>0 = warm)
 234:     -	F341          	RAMAD0	equ	0F341H			; slotid DOS ram page 0
 235:     -	F342          	RAMAD1	equ	0F342H			; slotid DOS ram page 1
 236:     -	F343          	RAMAD2	equ	0F343H			; slotid DOS ram page 2
 237:     -	F344          	RAMAD3	equ	0F344H			; slotid DOS ram page 3
 238:     -	F345          	YF345	equ	0F345H			; maximum number of diskbasic FCB's
 239:     -	F346          	YF346	equ	0F346H			; flag MSXDOS has been running (0 = no MSXDOS yet)
 240:     -	F347          	YF347	equ	0F347H			; number of drives in disksystem
 241:     -	F348          	YF348	equ	0F348H			; slotid disksytem rom
 242:     -	F349          	YF349	equ	0F349H			; disksystem bottom (lowest adres used by the disksystem)
 243:     -	F34B          	YF34B	equ	0F34BH			; msxdos system bottom
 244:     -	F34D          	$SECBUF equ	0F34DH			; pointer to sectorbuffer, can be used by the diskdriver
 245:     -	F34F          	YF34F	equ	0F34FH			; pointer to datasectorbuffer
 246:     -	F351          	YF351	equ	0F351H			; pointer to directorysectorbuffer
 247:     -	F353          	YF353	equ	0F353H			; pointer to the diskbasic FCB's
 248:     -	F355          	YF355	equ	0F355H			; DPB table for 8 drives
 249:     -	F365          	XF365	equ	0F365H			; routine read primary slotregister
 250:     -	F368          	XF368	equ	0F368H			; routine enable disksystem rom on page 1
 251:     -	F36B          	XF36B	equ	0F36BH			; routine enable dos ram on page 1
 252:     -	F36E          	XFER	equ	0F36EH			; routine transfer to/from dos ram
 253:     -	F371          	XF371	equ	0F371H			; auxiliary input routine
 254:     -	F374          	XF374	equ	0F374H			; auxiliary output routine
 255:     -	F377          	XF377	equ	0F377H			; routine diskbasic BLOAD
 256:     -	F37A          	XF37A	equ	0F37AH			; routine diskbasic BSAVE
 257:     -	F37D          	XF37D	equ	0F37DH			; BDOS entry point
 258:				
 259:     -	FB21          	YFB21	equ	0FB21H			; diskdriver table
 260:     -	FB29          	YFB29	equ	0FB29H			; diskdriver interrupt table
 261:				
 262:     -	F380          	RDPRIM	equ	0F380H
 263:     -	F385          	WRPRIM	equ	0F385H
 264:     -	F38C          	CLPRIM	equ	0F38CH
 265:     -	F398          	CLPRM1	equ	0F398H
 266:     -	F3B0          	LINLEN	equ	0F3B0H
 267:     -	F3DE          	CNSDFG	equ	0F3DEH
 268:     -	F415          	LPTPOS	equ	0F415H
 269:     -	F416          	PRTFLG	equ	0F416H
 270:     -	F41C          	CURLIN	equ	0F41CH
 271:     -	F41F          	KBUF	equ	0F41FH
 272:     -	F55E          	BUF	equ	0F55EH
 273:     -	F661          	TTYPOS	equ	0F661H
 274:     -	F663          	VALTYP	equ	0F663H
 275:     -	F672          	MEMSIZ	equ	0F672H
 276:     -	F674          	STKTOP	equ	0F674H
 277:     -	F676          	TXTTAB	equ	0F676H
 278:     -	F678          	TEMPPT	equ	0F678H
 279:     -	F67A          	TEMPST	equ	0F67AH
 280:     -	F698          	DSCTMP	equ	0F698H
 281:     -	F69B          	FRETOP	equ	0F69BH
 282:     -	F6AB          	AUTLIN	equ	0F6ABH
 283:     -	F6B1          	SAVSTK	equ	0F6B1H
 284:     -	F6C2          	VARTAB	equ	0F6C2H
 285:     -	F6C6          	STREND	equ	0F6C6H
 286:     -	F7F6          	DAC	equ	0F7F6H
 287:     -	F847          	ARG	equ	0F847H
 288:     -	F85F          	MAXFIL	equ	0F85FH
 289:     -	F860          	FILTAB	equ	0F860H
 290:     -	F862          	NULBUF	equ	0F862H
 291:     -	F864          	PTRFIL	equ	0F864H
 292:     -	F866          	FILNAM	equ	0F866H
 293:     -	F87C          	NLONLY	equ	0F87CH
 294:     -	F87D          	SAVEND	equ	0F87DH
 295:     -	FB20          	HOKVLD	equ	0FB20H
 296:     -	FC48          	BOTTOM	equ	0FC48H
 297:     -	FC4A          	HIMEM	equ	0FC4AH
 298:     -	FCAE          	FLBMEM	equ	0FCAEH
 299:     -	FCBE          	RUNBNF	equ	0FCBEH
 300:     -	FCBF          	SAVENT	equ	0FCBFH
 301:     -	FCC1          	EXPTBL	equ	0FCC1H
 302:     -	FCC5          	SLTTBL	equ	0FCC5H
 303:     -	FCC9          	SLTATR	equ	0FCC9H
 304:     -	FD09          	SLTWRK	equ	0FD09H
 305:     -	FD89          	PROCNM	equ	0FD89H
 306:     -	FD99          	DEVICE	equ	0FD99H
 307:				
 308:     -	FD9F          	H.TIMI	equ	0FD9FH
 309:     -	FDEF          	H.DSKO	equ	0FDEFH
 310:     -	FDF9          	H.NAME	equ	0FDF9H
 311:     -	FDFE          	H.KILL	equ	0FDFEH
 312:     -	FE08          	H.COPY	equ	0FE08H
 313:     -	FE12          	H.DSKF	equ	0FE12H
 314:     -	FE17          	H.DSKI	equ	0FE17H
 315:     -	FE21          	H.LSET	equ	0FE21H
 316:     -	FE26          	H.RSET	equ	0FE26H
 317:     -	FE2B          	H.FIEL	equ	0FE2BH
 318:     -	FE30          	H.MKI$	equ	0FE30H
 319:     -	FE35          	H.MKS$	equ	0FE35H
 320:     -	FE3A          	H.MKD$	equ	0FE3AH
 321:     -	FE3F          	H.CVI	equ	0FE3FH
 322:     -	FE44          	H.CVS	equ	0FE44H
 323:     -	FE49          	H.CVD	equ	0FE49H
 324:     -	FE4E          	H.GETP	equ	0FE4EH
 325:     -	FE58          	H.NOFO	equ	0FE58H
 326:     -	FE5D          	H.NULO	equ	0FE5DH
 327:     -	FE62          	H.NTFL	equ	0FE62H
 328:     -	FE71          	H.BINS	equ	0FE71H
 329:     -	FE76          	H.BINL	equ	0FE76H
 330:     -	FE7B          	H.FILE	equ	0FE7BH
 331:     -	FE80          	H.DGET	equ	0FE80H
 332:     -	FE85          	H.FILO	equ	0FE85H
 333:     -	FE8A          	H.INDS	equ	0FE8AH
 334:     -	FE99          	H.LOC	equ	0FE99H
 335:     -	FE9E          	H.LOF	equ	0FE9EH
 336:     -	FEA3          	H.EOF	equ	0FEA3H
 337:     -	FEAD          	H.BAKU	equ	0FEADH
 338:     -	FEB2          	H.PARD	equ	0FEB2H
 339:     -	FEB7          	H.NODE	equ	0FEB7H
 340:     -	FEBC          	H.POSD	equ	0FEBCH
 341:     -	FECB          	H.RUNC	equ	0FECBH
 342:     -	FED0          	H.CLEA	equ	0FED0H
 343:     -	FED5          	H.LOPD	equ	0FED5H
 344:     -	FEDA          	H.STKE	equ	0FEDAH
 345:     -	FEFD          	H.ERRP	equ	0FEFDH
 346:     -	FFA7          	H.PHYD	equ	0FFA7H
 347:     -	FFAC          	H.FORM	equ	0FFACH
 348:     -	FFCA          	EXTBIO	equ	0FFCAH
 349:     -	FFCF          	DISINT	equ	0FFCFH
 350:     -	FFD4          	ENAINT	equ	0FFD4H
 351:				
 352:     -	FFFF          	YFFFF	equ	0FFFFH
 353:				
 354:				; Basic routines
 355:				
 356:     -	4173          	M.4173	equ	04173H		; return to after statement
 357:     -	268C          	DECSUB	equ	0268CH		; dbl subtract
 358:     -	269A          	DECADD	equ	0269AH		; dbl add
 359:     -	289F          	DECDIV	equ	0289FH		; dbl divide
 360:     -	2EF3          	VMOVE	equ	02EF3H		; copy variable
 361:     -	2F08          	VMOVFM	equ	02F08H		; copy variable
 362:     -	2F10          	M.2F10	equ	02F10H		; copy variable
 363:     -	2F99          	M.2F99	equ	02F99H		; integer to DAC
 364:     -	3042          	M.3042	equ	03042H		; convert sgn to dbl
 365:     -	30D1          	M.30D1	equ	030D1H		; dbl to integer
 366:     -	325C          	M.325C	equ	0325CH		; sgn multiply
 367:     -	6C1C          	ACLOSE	equ	06C1CH		; close all channels
 368:     -	4601          	EXECLP	equ	04601H		; execution loop
 369:     -	6F0B          	BADRES	equ	06F0BH		; evaluate adres operand
 370:     -	5EA4          	GETVAR	equ	05EA4H		; get variable pointer
 371:     -	5597          	GETYPR	equ	05597H		; get operand type
 372:     -	67D0          	FRETMP	equ	067D0H		; free temporary string
 373:     -	6A0E          	EVFSPC	equ	06A0EH		; evaluate filespec
 374:     -	542F          	EVADR	equ	0542FH		; evaluate adres operand
 375:     -	5432          	CNVADR	equ	05432H		; convert to adres
 376:     -	4756          	EVWORD	equ	04756H		; evaluate word operand
 377:     -	521B          	NEVBYT	equ	0521BH		; evaluate next byte operand
 378:     -	521C          	EVBYTE	equ	0521CH		; evaluate byte operand
 379:     -	521F          	CNVBYT	equ	0521FH		; convert to byte
 380:     -	7328          	OUTNL	equ	07328H		; newline to OUTDO
 381:     -	54F7          	PTOLN	equ	054F7H		; convert pointers to linenumbers
 382:     -	6B24          	CLOCHN	equ	06B24H		; close channel
 383:     -	4253          	MKPTRS	equ	04253H		; recalc linepointers
 384:     -	6AFA          	OPNCHN	equ	06AFAH		; open channel
 385:     -	4AFF          	SCROUT	equ	04AFFH		; output back to screen
 386:     -	4C64          	EVEXPR	equ	04C64H		; evaluate expression
 387:     -	6A6D          	GTCHNP	equ	06A6DH		; get channel pointer
 388:     -	4C5F          	EVLEXP	equ	04C5FH		; evaluate =expression
 389:     -	668E          	ALSSPC	equ	0668EH		; allocate stringspace
 390:     -	6627          	ALTSTR	equ	06627H		; allocate temp string
 391:     -	517A          	CNVDAC	equ	0517AH		; convert DAC to other type
 392:     -	46FF          	CSNG	equ	046FFH		; convert to SNG
 393:     -	7323          	COUTNL	equ	07323H		; newline to OUTDO if not at start of line
 394:     -	406F          	ERROR	equ	0406FH		; error
 395:     -	4666          	CHRGTR	equ	04666H		; CHRGTR
 396:     -	409B          	EXEBAS	equ	0409BH		; restart BASIC
 397:     -	739A          	QUITLD	equ	0739AH		; quit loading & start (headloop/executing)
 398:     -	6F1D          	SKPCHK	equ	06F1DH		; skip strong cassette devicecheck
 399:     -	6E41          	M.6E41	equ	06E41H		; resume character putback routine
 400:				
 401:     -	7D2F          	BASSCR	equ	07D2FH		; adres init screen for BASIC
 402:     -	7D17          	SKPROM	equ	07D17H		; start MSX-BASIC
 403:     -	7E14          	RSTCLR	equ	07E14H		; start MSX-BASIC program in ROM
 404:     -	7D31          	TXTINI	equ	07D31H		; BASIC initscreen (without INITXT & CNSDFG)
 405:				
 406:     -	6E92          	CALBSV	equ	06E92H		; start of BSAVE routine
 407:     -	6EC6          	CALBLD	equ	06EC6H		; start of BLOAD routine
 408:     -	6EF4          	EXEBLD	equ	06EF4H		; finish BLOAD
 409:				
 410:     -	F38B          	RETRTN	equ	0F38BH		; adres with a RET instruction, allways available
 411:				
 412:				
 413:				; FCB structure
 414:				
 415:				; off	name	cp/m function		msx function
 416:				
 417:				; +0	DR	drive			drive
 418:				; +1,8	F1-F8	filename		filename
 419:				; +9,3	T1-T3	filetype		filetype
 420:				; +12	EX	extent			extent
 421:				; +13	S1	reserved		fileattribute
 422:				; +14	S2	reserved		extent high byte / recordsize low byte (block)
 423:				; +15	RC	record count in extent	record count in extent / recordsize high byte (block)
 424:				; +16	AL	allocation		Filesize
 425:				; +20	AL	allocation		Date
 426:				; +22	AL	allocation		Time
 427:				; +24	AL	allocation		Devicecode
 428:				; +25	AL	allocation		Directoryentry Number
 429:				; +26	AL	allocation		Start Cluster
 430:				; +28	AL	allocation		Current Cluster
 431:				; +30	AL	allocation		Current Relative Cluster
 432:				; +32	CR	record in extent	record in extent
 433:				; +33,3	R0-R2	random access record	random access record
 434:				; +36	R3	not used		random access record when recordsize <64
 435:				
 436:				
 437:				
 438:     -	4000  4142    		defb	"AB"
 439:     -	4002  6F57    		defw	A576F
 440:     -	4004  8B65    		defw	A6576
 441:     -	4006  0000    		defw	0
 442:     -	4008  0000    		defw	0
 443:     -	400A          		defs	6
 444:				
 445:				; diskdriver entries
 446:				
 447:    0+10	4010  C3A574  	T4010:	jp	DSKIO			; DSKIO entrypoint
 448:   10+10	4013  C34375  	T4013:	jp	DSKCHG			; DSKCHG entrypoint
 449:   20+10	4016  C34875  	T4016:	jp	GETDPB			; GETDPB entrypoint
 450:   30+10	4019  C36D75  	T4019:	jp	CHOICE			; CHOICE entrypoint
 451:   40+10	401C  C3A475  	T401C:	jp	DSKFMT			; DSKFMT entrypoint
 452:   50+10	401F  C3EF75  	T401F:	jp	MTOFF			; MTOFF entrypoint
 453:				
 454:				; kernel entries
 455:				
 456:   60+10	4022  C33A5B  	A4022:	jp	A5B3A			; start DiskBasic entrypoint
 457:   70+4	4025  37      	A4025:	scf				; format disk entrypoint (workarea must be supplied)
 458:   74+10	4026  C3C660  		jp	A60B1
 459:   84+10	4029  C32262  	A4029:	jp	A620D			; stop all disks entry point
 460:				
 461:				; Unused code ??
 462:				;
 463:   94+4	402C  00      		nop
 464:				
 465:   98+10	402D  C3C85F  	A402D:	jp	A5FB3			; get slotid entrypoint
 466:				
 467:				;	  Subroutine get MSX-DOS system bottom
 468:				;	     Inputs  -
 469:				;	     Outputs HL = lowest adres used by the base MSX-DOS system
 470:				
 471:  108+16	4030  2A4BF3  	A4030:	ld	hl,(YF34B)
 472:  124+10	4033  C9      		ret
 473:				
 474:				;	  Subroutine check if keyboardinput available
 475:				;	     Inputs  -
 476:				;	     Outputs Zx set if no input, Zx reset if input, A = input
 477:				
 478:				
 479:  134+15	4034  DDE5    	A4034:	push	ix
 480:  149+14	4036  DD21B700		ld	ix,BREAKX
 481:  163+17	403A  CDAB40  		call	A40AB			; BREAKX BIOS call
 482:  180+14	403D  DDE1    		pop	ix			; CTRL-STOP pressed ?
 483:  194+7+5	403F  300A    		jr	nc,A404B		; nope,
 484:  201+7	4041  3E03    		ld	a,003H
 485:  208+13	4043  3236F3  		ld	(YF336),a		; saved input available
 486:  221+13	4046  3237F3  		ld	(YF337),a		; CTRL-C
 487:  234+4	4049  A7      		and	a			; flag NZ
 488:  238+10	404A  C9      		ret
 489:				;
 490:  248+13	404B  3A36F3  	A404B:	ld	a,(YF336)
 491:  261+4	404E  A7      		and	a			; saved input available ?
 492:  265+13	404F  3A37F3  		ld	a,(YF337)
 493:  278+5+6	4052  C0      		ret	nz			; yep, return it (flag NZ)
 494:  283+15	4053  DDE5    		push	ix
 495:  298+14	4055  DD219C00		ld	ix,CHSNS
 496:  312+17	4059  CDAB40  		call	A40AB			; CHSNS BIOS call
 497:  329+14	405C  DDE1    		pop	ix			; any chars in the keyboard buffer ?
 498:  343+5+6	405E  C8      		ret	z			; nope, quit (flag Z)
 499:  348+7	405F  3EFF    		ld	a,0FFH
 500:  355+13	4061  3236F3  		ld	(YF336),a		; flag saved input available
 501:  368+15	4064  DDE5    		push	ix
 502:  383+14	4066  DD219F00		ld	ix,CHGET
 503:  397+17	406A  CDAB40  		call	A40AB			; CHGET BIOS call
 504:  414+14	406D  DDE1    		pop	ix			; get char from keyboard buffer
 505:  428+13	406F  3237F3  		ld	(YF337),a		; save char
 506:  441+11	4072  C5      		push	bc
 507:  452+7	4073  0600    		ld	b,000H
 508:  459+4	4075  04      		inc	b
 509:  463+10	4076  C1      		pop	bc			; flag NZ
 510:  473+10	4077  C9      		ret
 511:				
 512:				;	  Subroutine get keyboardinput
 513:				;	     Inputs  -
 514:				;	     Outputs A = input
 515:				
 516:  483+11	4078  E5      	A4078:	push	hl
 517:  494+10	4079  2136F3  		ld	hl,YF336
 518:  504+4	407C  AF      		xor	a
 519:  508+7	407D  BE      		cp	(hl)			; saved input available ?
 520:  515+7	407E  77      		ld	(hl),a			; not anymore!
 521:  522+6	407F  23      		inc	hl
 522:  528+7	4080  7E      		ld	a,(hl)
 523:  535+10	4081  E1      		pop	hl
 524:  545+5+6	4082  C0      		ret	nz			; yep, return it
 525:  550+15	4083  DDE5    		push	ix
 526:  565+14	4085  DD219F00		ld	ix,CHGET
 527:  579+17	4089  CDAB40  		call	A40AB			; CHGET BIOS call
 528:  596+14	408C  DDE1    		pop	ix			; get char
 529:  610+10	408E  C9      		ret
 530:				
 531:				;	  Subroutine output to screen
 532:				;	     Inputs  A = output
 533:				;	     Outputs -
 534:				
 535:  620+15	408F  DDE5    	A408F:	push	ix
 536:  635+14	4091  DD21A200		ld	ix,CHPUT
 537:  649+17	4095  CDAB40  		call	A40AB			; CHPUT BIOS call
 538:  666+14	4098  DDE1    		pop	ix
 539:  680+10	409A  C9      		ret
 540:				;	  Subroutine output to printer
 541:				;	     Inputs  A = output
 542:				;	     Outputs -
 543:				
 544:  690+15	409B  DDE5    	A409B:	push	ix
 545:  705+14	409D  DD21A500		ld	ix,LPTOUT
 546:  719+17	40A1  CDAB40  		call	A40AB			; LPTOUT BIOS call
 547:  736+14	40A4  DDE1    		pop	ix
 548:  750+10	40A6  C9      		ret
 549:				
 550:				;	  Subroutine BDOS 00 (system reset)
 551:				;	     Inputs  
 552:				;	     Outputs ________________________ 
 553:				
 554:  760+14	40A7  DD219B40	A40A7:	ld	ix,EXEBAS
 555:				
 556:				;	  Subroutine MSX-BIOS call
 557:				;	     Inputs  IX = bios call, others depends on the bios call
 558:				;	     Outputs depends on the bios call
 559:				
 560:  774+15	40AB  FDE5    	A40AB:	push	iy
 561:  789+20	40AD  FD2AC0FC		ld	iy,(EXPTBL-1+0)
 562:  809+17	40B1  CD1C00  		call	CALSLT
 563:  826+4	40B4  FB      		ei
 564:  830+14	40B5  FDE1    		pop	iy
 565:  844+10	40B7  C9      		ret
 566:				
 567:				;	  Subroutine check for and initialize clockchip
 568:				;	     Inputs  -
 569:				;	     Outputs -
 570:				
 571:  854+7	40B8  3E0D    	A40B8:	ld	a,13
 572:  861+11	40BA  D3B4    		out	(0B4H),a
 573:  872+7	40BC  3E0A    		ld	a,00AH
 574:  879+11	40BE  D3B5    		out	(0B5H),a		; alarm off, clock running, bank 2
 575:  890+4	40C0  AF      		xor	a
 576:  894+11	40C1  D3B4    		out	(0B4H),a		; pos 0
 577:  905+7	40C3  060F    		ld	b,00FH
 578:  912+11	40C5  DBB5    	A40C5:	in	a,(0B5H)		; read data
 579:  923+7	40C7  E60F    		and	00FH
 580:  930+4	40C9  A8      		xor	b
 581:  934+11	40CA  D3B5    		out	(0B5H),a		; change it and write back
 582:  945+4	40CC  4F      		ld	c,a
 583:  949+4	40CD  00      		nop				; wait or patched code ??
 584:  953+11	40CE  DBB5    		in	a,(0B5H)
 585:  964+7	40D0  E60F    		and	00FH
 586:  971+4	40D2  B9      		cp	c			; correctly readback ?
 587:  975+5+6	40D3  C0      		ret	nz			; nope, no clockchip!
 588:  980+4	40D4  A8      		xor	b
 589:  984+11	40D5  D3B5    		out	(0B5H),a		; restore orginal data
 590:  995+8+5	40D7  10EC    		djnz	A40C5			; try all values
 591: 1003+7	40D9  3EFF    		ld	a,0FFH
 592: 1010+13	40DB  3238F3  		ld	(YF338),a		; flag use clockchip
 593: 1023+7	40DE  3E0D    		ld	a,13
 594: 1030+11	40E0  D3B4    		out	(0B4H),a
 595: 1041+7	40E2  3E09    		ld	a,009H
 596: 1048+11	40E4  D3B5    		out	(0B5H),a		; alarm off, clock running, bank 1
 597: 1059+7	40E6  3E0A    		ld	a,10
 598: 1066+11	40E8  D3B4    		out	(0B4H),a		; pos 10
 599: 1077+7	40EA  3E01    		ld	a,1
 600: 1084+11	40EC  D3B5    		out	(0B5H),a		; 24 hour system
 601: 1095+7	40EE  3E0D    		ld	a,13
 602: 1102+11	40F0  D3B4    		out	(0B4H),a
 603: 1113+4	40F2  AF      		xor	a
 604: 1117+11	40F3  D3B5    		out	(0B5H),a		; alarm off, clock paused, bank 0
 605: 1128+10	40F5  01000D  		ld	bc,00D00H
 606: 1138+4	40F8  79      	A40F8:	ld	a,c
 607: 1142+11	40F9  D3B4    		out	(0B4H),a
 608: 1153+11	40FB  DBB5    		in	a,(0B5H)
 609: 1164+11	40FD  F5      		push	af
 610: 1175+4	40FE  0C      		inc	c
 611: 1179+8+5	40FF  10F7    		djnz	A40F8			; save time registers
 612: 1187+7	4101  3E0E    		ld	a,14
 613: 1194+11	4103  D3B4    		out	(0B4H),a
 614: 1205+4	4105  AF      		xor	a
 615: 1209+11	4106  D3B5    		out	(0B5H),a		; clear testbits
 616: 1220+7	4108  060D    		ld	b,00DH
 617: 1227+4	410A  0D      	A410A:	dec	c
 618: 1231+4	410B  79      		ld	a,c
 619: 1235+11	410C  D3B4    		out	(0B4H),a
 620: 1246+10	410E  F1      		pop	af
 621: 1256+11	410F  D3B5    		out	(0B5H),a
 622: 1267+8+5	4111  10F7    		djnz	A410A			; restore time registers
 623: 1275+12	4113  1839    		jr	A414E			; put clock in running mode
 624:				
 625:				;	  Subroutine store date
 626:				;	     Inputs  
 627:				;	     Outputs -
 628:				
 629: 1287+16	4115  223BF3  	A4115:	ld	(YF33B),hl
 630: 1303+13	4118  3A38F3  		ld	a,(YF338)
 631: 1316+4	411B  A7      		and	a			; use clockchip ?
 632: 1320+5+6	411C  C8      		ret	z			; no, quit
 633: 1325+13	411D  3A4AF2  		ld	a,(YF24A)
 634: 1338+4	4120  47      		ld	b,a
 635: 1342+13	4121  3A49F2  		ld	a,(YF249)
 636: 1355+4	4124  4F      		ld	c,a
 637: 1359+13	4125  3A48F2  		ld	a,(YF248)
 638: 1372+4	4128  57      		ld	d,a			; current day
 639: 1376+7	4129  1E07    		ld	e,007H			; nibble 7 (date)
 640: 1383+17	412B  CD5941  		call	A4159			; pause clock, select bank 0
 641: 1400+12	412E  1812    		jr	A4142
 642:				
 643:				;	  Subroutine store time
 644:				;	     Inputs  
 645:				;	     Outputs -
 646:				
 647: 1412+13	4130  3A38F3  	A4130:	ld	a,(YF338)
 648: 1425+4	4133  A7      		and	a			; use clockchip ?
 649: 1429+5+6	4134  C8      		ret	z			; no, quit
 650: 1434+7	4135  1E00    		ld	e,000H			; nibble 0 (time)
 651: 1441+17	4137  CD5941  		call	A4159			; pause clock, select bank 0
 652: 1458+7	413A  3E0F    		ld	a,00FH
 653: 1465+11	413C  D3B4    		out	(0B4H),a
 654: 1476+7	413E  3E02    		ld	a,002H
 655: 1483+11	4140  D3B5    		out	(0B5H),a		; time reset
 656: 1494+4	4142  62      	A4142:	ld	h,d
 657: 1498+17	4143  CD6041  		call	A4160			; write clockchip byte
 658: 1515+4	4146  61      		ld	h,c
 659: 1519+17	4147  CD6041  		call	A4160			; write clockchip byte
 660: 1536+4	414A  60      		ld	h,b
 661: 1540+17	414B  CD6041  		call	A4160			; write clockchip byte
 662:				
 663:				;	  Subroutine put clockchip in running mode
 664:				;	     Inputs  -
 665:				;	     Outputs -
 666:				
 667: 1557+7	414E  3E0D    	A414E:	ld	a,13
 668: 1564+11	4150  D3B4    		out	(0B4H),a
 669: 1575+11	4152  DBB5    		in	a,(0B5H)
 670: 1586+7	4154  F608    		or	008H
 671: 1593+11	4156  D3B5    	A4156:	out	(0B5H),a
 672: 1604+10	4158  C9      		ret
 673:				
 674:				;	  Subroutine pause clockchip and select bank 0
 675:				;	     Inputs  -
 676:				;	     Outputs -
 677:				
 678: 1614+17	4159  CD4E41  	A4159:	call	A414E			; clock in running mode
 679: 1631+7	415C  E604    		and	004H
 680: 1638+12	415E  18F6    		jr	A4156			; clock paused, select bank 0
 681:				
 682:				;	  Subroutine write byte to clockchip
 683:				;	     Inputs  H = data, E = nibblenumber
 684:				;	     Outputs E = updated nibblenumber (+2)
 685:				
 686: 1650+4	4160  AF      	A4160:	xor	a
 687: 1654+7	4161  2E08    		ld	l,8
 688: 1661+8	4163  CB04    	A4163:	rlc	h
 689: 1669+4	4165  8F      		adc	a,a
 690: 1673+4	4166  27      		daa
 691: 1677+4	4167  2D      		dec	l
 692: 1681+7+5	4168  20F9    		jr	nz,A4163		; convert to BCD
 693: 1688+17	416A  CD7141  		call	A4171
 694: 1705+4	416D  0F      		rrca
 695: 1709+4	416E  0F      		rrca
 696: 1713+4	416F  0F      		rrca
 697: 1717+4	4170  0F      		rrca
 698: 1721+11	4171  F5      	A4171:	push	af
 699: 1732+4	4172  7B      		ld	a,e
 700: 1736+4	4173  1C      		inc	e
 701: 1740+11	4174  D3B4    		out	(0B4H),a
 702: 1751+10	4176  F1      		pop	af
 703: 1761+12	4177  18DD    		jr	A4156
 704:				
 705:				;	  Subroutine get date and time
 706:				;	     Inputs  
 707:				;	     Outputs Cx set if from clockchip,
 708:				
 709: 1773+13	4179  3A38F3  	A4179:	ld	a,(YF338)
 710: 1786+4	417C  A7      		and	a			; use clockchip ?
 711: 1790+4	417D  47      		ld	b,a
 712: 1794+4	417E  4F      		ld	c,a
 713: 1798+4	417F  57      		ld	d,a
 714: 1802+4	4180  5F      		ld	e,a			; 00:00:00
 715: 1806+16	4181  2A3BF3  		ld	hl,(YF33B)		; days since 1-1-1980
 716: 1822+5+6	4184  C8      		ret	z			; no clockchip, quit
 717: 1827+17	4185  CD5941  		call	A4159			; clock paused, select bank 0
 718: 1844+7	4188  1E0D    		ld	e,12+1
 719: 1851+17	418A  CDAD41  		call	A41AD			; read byte from clockchip
 720: 1868+17	418D  CD2355  		call	A5523			; setup days in februari
 721: 1885+17	4190  CDAD41  		call	A41AD			; read byte from clockchip
 722: 1902+13	4193  3249F2  		ld	(YF249),a		; current month
 723: 1915+17	4196  CDAD41  		call	A41AD			; read byte from clockchip
 724: 1932+13	4199  3248F2  		ld	(YF248),a		; current day
 725: 1945+4	419C  1D      		dec	e			; nibble 5
 726: 1949+17	419D  CDAD41  		call	A41AD			; read byte from clockchip
 727: 1966+4	41A0  47      		ld	b,a
 728: 1970+17	41A1  CDAD41  		call	A41AD			; read byte from clockchip
 729: 1987+4	41A4  4F      		ld	c,a
 730: 1991+17	41A5  CDAD41  		call	A41AD			; read byte from clockchip
 731: 2008+17	41A8  CD4E41  		call	A414E			; clock in running mode
 732: 2025+4	41AB  37      		scf
 733: 2029+10	41AC  C9      		ret
 734:				
 735:				;	  Subroutine read byte from clockchip
 736:				;	     Inputs  E = nibblenumber+1
 737:				;	     Outputs E = updated nibblenumber (-2), A = data
 738:				
 739: 2039+4	41AD  AF      	A41AD:	xor	a
 740: 2043+17	41AE  CDB541  		call	A41B5
 741: 2060+4	41B1  87      		add	a,a
 742: 2064+4	41B2  87      		add	a,a
 743: 2068+4	41B3  82      		add	a,d
 744: 2072+4	41B4  87      		add	a,a
 745: 2076+4	41B5  57      	A41B5:	ld	d,a
 746: 2080+4	41B6  1D      		dec	e
 747: 2084+4	41B7  7B      		ld	a,e
 748: 2088+11	41B8  D3B4    		out	(0B4H),a
 749: 2099+11	41BA  DBB5    		in	a,(0B5H)
 750: 2110+7	41BC  E60F    		and	00FH
 751: 2117+4	41BE  82      		add	a,d
 752: 2121+4	41BF  57      		ld	d,a
 753: 2125+10	41C0  C9      		ret
 754:				
 755:				;
 756:				; Identification string (not used)
 757:				;
 758:				
 759:     -	41C1  204D5358		defb	" MSX-DOS ver. 2.2 Copyright 1984 by Microsoft "
	      2D444F53
	      20766572
	      2E20322E
	      3220436F
	      70797269
	      67687420
	      31393834
	      20627920
	      4D696372
	      6F736F66
	      7420
 760:				
 761:				;	  Subroutine BDOS 0C (return version number)
 762:				;	     Inputs  
 763:				;	     Outputs ________________________ 
 764:				
 765: 2135+7	41EF  0600    	A41EF:	ld	b,000H
 766: 2142+7	41F1  3E22    		ld	a,022H			; CP/M version 2.2
 767: 2149+10	41F3  C9      		ret
 768:				
 769:				;	  Subroutine get FAT entry content
 770:				;	     Inputs  HL = clusternumber, IX = pointer to DPB
 771:				;	     Outputs HL = clusterentry content, Zx set if entry is free, DE = pointer to FAT buffer
 772:				
 773: 2159+19	41F4  DD5E13  	A41F4:	ld	e,(ix+013H)
 774: 2178+19	41F7  DD5614  		ld	d,(ix+014H)		; pointer to FAT buffer of drive
 775: 2197+17	41FA  CD52F2  	A41FA:	call	XF252
 776: 2214+11	41FD  D5      		push	de
 777: 2225+4	41FE  5D      		ld	e,l
 778: 2229+4	41FF  54      		ld	d,h
 779: 2233+8	4200  CB3C    		srl	h
 780: 2241+8	4202  CB1D    		rr	l
 781: 2249+4	4204  1F      		rra
 782: 2253+11	4205  19      		add	hl,de
 783: 2264+10	4206  D1      		pop	de
 784: 2274+11	4207  19      		add	hl,de
 785: 2285+4	4208  17      		rla
 786: 2289+7	4209  7E      		ld	a,(hl)
 787: 2296+6	420A  23      		inc	hl
 788: 2302+7	420B  66      		ld	h,(hl)
 789: 2309+7+5	420C  300C    		jr	nc,A421A
 790: 2316+8	420E  CB3C    		srl	h
 791: 2324+4	4210  1F      		rra
 792: 2328+8	4211  CB3C    		srl	h
 793: 2336+4	4213  1F      		rra
 794: 2340+8	4214  CB3C    		srl	h
 795: 2348+4	4216  1F      		rra
 796: 2352+8	4217  CB3C    		srl	h
 797: 2360+4	4219  1F      		rra
 798: 2364+4	421A  6F      	A421A:	ld	l,a
 799: 2368+4	421B  7C      		ld	a,h
 800: 2372+7	421C  E60F    		and	00FH
 801: 2379+4	421E  67      		ld	h,a
 802: 2383+4	421F  B5      		or	l
 803: 2387+10	4220  C9      		ret
 804:				
 805:				;	  Subroutine set FAT entry content
 806:				;	     Inputs  HL = clusternumber, DE = pointer to FAT buffer, BC = clusterentry content
 807:				;	     Outputs -
 808:				
 809: 2397+11	4221  D5      	A4221:	push	de
 810: 2408+4	4222  5D      		ld	e,l
 811: 2412+4	4223  54      		ld	d,h
 812: 2416+8	4224  CB3C    		srl	h
 813: 2424+8	4226  CB1D    		rr	l
 814: 2432+4	4228  1F      		rra
 815: 2436+11	4229  19      		add	hl,de
 816: 2447+10	422A  D1      		pop	de
 817: 2457+11	422B  19      		add	hl,de
 818: 2468+4	422C  17      		rla
 819: 2472+7+5	422D  3018    		jr	nc,A4247
 820: 2479+8	422F  CB21    		sla	c
 821: 2487+8	4231  CB10    		rl	b
 822: 2495+8	4233  CB21    		sla	c
 823: 2503+8	4235  CB10    		rl	b
 824: 2511+8	4237  CB21    		sla	c
 825: 2519+8	4239  CB10    		rl	b
 826: 2527+8	423B  CB21    		sla	c
 827: 2535+8	423D  CB10    		rl	b
 828: 2543+7	423F  7E      		ld	a,(hl)
 829: 2550+7	4240  E60F    		and	00FH
 830: 2557+4	4242  B1      		or	c
 831: 2561+7	4243  77      		ld	(hl),a
 832: 2568+6	4244  23      		inc	hl
 833: 2574+7	4245  70      		ld	(hl),b
 834: 2581+10	4246  C9      		ret
 835:				
 836: 2591+7	4247  71      	A4247:	ld	(hl),c
 837: 2598+6	4248  23      		inc	hl
 838: 2604+7	4249  7E      		ld	a,(hl)
 839: 2611+7	424A  E6F0    		and	0F0H
 840: 2618+4	424C  B0      		or	b
 841: 2622+7	424D  77      		ld	(hl),a
 842: 2629+10	424E  C9      		ret
 843:				
 844:				;	  Subroutine compare with filename1
 845:				;	     Inputs  HL = pointer to buffer, B = size
 846:				;	     Outputs Zx set if equal
 847:				
 848: 2639+10	424F  11B9F2  	A424F:	ld	de,YF2B9
 849:				
 850:				;	  Subroutine compare
 851:				;	     Inputs  DE = pointer to buffer1, HL = pointer to buffer2, B = size
 852:				;	     Outputs Zx set if equal
 853:				
 854: 2649+7	4252  1A      	A4252:	ld	a,(de)
 855: 2656+7	4253  BE      		cp	(hl)
 856: 2663+6	4254  23      		inc	hl
 857: 2669+6	4255  13      		inc	de
 858: 2675+5+6	4256  C0      		ret	nz
 859: 2680+8+5	4257  10F9    		djnz	A4252
 860: 2688+10	4259  C9      		ret
 861:				
 862:				;	  Subroutine check if devicename
 863:				;	     Inputs  
 864:				;	     Outputs ________________________ 
 865:				
 866: 2698+17	425A  CD55F2  	A425A:	call	XF255
 867: 2715+10	425D  21F7F1  		ld	hl,YF1F7		; table with devicenames
 868: 2725+7	4260  0E05    		ld	c,5			; 5 devices
 869: 2732+7	4262  0604    	A4262:	ld	b,4			; only check 4 bytes (because devicenames are only 4 chars long)
 870: 2739+17	4264  CD4F42  		call	A424F			; compare with filename1
 871: 2756+7+5	4267  202F    		jr	nz,A4298		; not this device, try the next
 872: 2763+7	4269  0604    		ld	b,4
 873: 2770+7	426B  1A      	A426B:	ld	a,(de)
 874: 2777+6	426C  13      		inc	de
 875: 2783+7	426D  FE20    		cp	" "
 876: 2790+7+5	426F  2032    		jr	nz,A42A3		; last 4 bytes of filename not spaces, not a device
 877: 2797+8+5	4271  10F8    		djnz	A426B
 878: 2805+4	4273  79      		ld	a,c
 879: 2809+8	4274  ED44    		neg
 880: 2817+13	4276  3216F2  		ld	(YF20B+11),a		; devicecode
 881: 2830+10	4279  21B9F2  		ld	hl,YF2B9
 882: 2840+10	427C  110BF2  		ld	de,YF20B
 883: 2850+10	427F  010400  		ld	bc,4
 884: 2860+16+5	4282  EDB0    		ldir				; copy of devicename
 885: 2876+17	4284  CD9654  		call	A5496			; get time and date (dirformat)
 886: 2893+20	4287  ED4323F2		ld	(YF20B+24),bc
 887: 2913+20	428B  ED5321F2		ld	(YF20B+22),de
 888: 2933+10	428F  210BF2  		ld	hl,YF20B
 889: 2943+11	4292  E5      		push	hl
 890: 2954+14	4293  FDE1    		pop	iy
 891: 2968+7	4295  F601    		or	001H			; Cx reset, Zx reset
 892: 2975+10	4297  C9      		ret
 893:				
 894: 2985+4	4298  05      	A4298:	dec	b
 895: 2989+4	4299  7D      		ld	a,l
 896: 2993+4	429A  80      		add	a,b
 897: 2997+4	429B  6F      		ld	l,a
 898: 3001+4	429C  7C      		ld	a,h
 899: 3005+7	429D  CE00    		adc	a,000H
 900: 3012+4	429F  67      		ld	h,a
 901: 3016+4	42A0  0D      		dec	c
 902: 3020+7+5	42A1  20BF    		jr	nz,A4262
 903:									; Zx set
 904: 3027+4	42A3  37      	A42A3:	scf
 905: 3031+10	42A4  C9      		ret
 906:				
 907:				;	  Subroutine validate FCB, clear S2 and find direntry
 908:				;	     Inputs  
 909:				;	     Outputs ________________________ 
 910:				
 911: 3041+11	42A5  D5      	A42A5:	push	de
 912: 3052+10	42A6  210E00  		ld	hl,0000EH
 913: 3062+11	42A9  19      		add	hl,de
 914: 3073+10	42AA  3600    		ld	(hl),0			; FCB S2 (extent high byte)
 915: 3083+17	42AC  CDB142  		call	A42B1			; validate FCB drive and filename and find direntry
 916: 3100+10	42AF  D1      		pop	de
 917: 3110+10	42B0  C9      		ret
 918:				;
 919: 3120+17	42B1  CD0E44  	A42B1:	call	A440E			; validate FCB drive and filename
 920: 3137+5+6	42B4  D8      		ret	c			; invalid, quit
 921:				
 922:				;	  Subroutine find first directoryentry
 923:				;	     Inputs  
 924:				;	     Outputs ________________________ 
 925:				
 926: 3142+17	42B5  CD5A42  	A42B5:	call	A425A			; check if devicename
 927: 3159+5+6	42B8  D0      		ret	nc			; yep, quit with pointer to fake device direntry
 928: 3164+17	42B9  CDD344  		call	A44D3			; reset direntry search and get latest FAT
 929:				
 930:				;	  Subroutine find next directoryentry
 931:				;	     Inputs  
 932:				;	     Outputs ________________________ 
 933:				
 934: 3181+17	42BC  CD58F2  	A42BC:	call	XF258
 935: 3198+17	42BF  CD0E43  		call	A430E			; get next direntry
 936: 3215+5+6	42C2  D8      		ret	c			; no more, quit
 937: 3220+7	42C3  7E      	A42C3:	ld	a,(hl)
 938: 3227+4	42C4  B7      		or	a
 939: 3231+7+5	42C5  2835    		jr	z,A42FC			; unused entry,
 940: 3238+7	42C7  FEE5    		cp	0E5H
 941: 3245+7+5	42C9  2831    		jr	z,A42FC			; deleted entry,
 942: 3252+11	42CB  E5      		push	hl
 943: 3263+7	42CC  060B    		ld	b,11
 944: 3270+10	42CE  11B9F2  		ld	de,YF2B9
 945: 3280+17	42D1  CD5242  	A42D1:	call	A4252			; compare with fcb filename
 946: 3297+7+5	42D4  2806    		jr	z,A42DC			; equal, found!
 947: 3304+7	42D6  FE3F    		cp	"?"
 948: 3311+7+5	42D8  201B    		jr	nz,A42F5		; on difference no wildcard, try next
 949: 3318+8+5	42DA  10F5    		djnz	A42D1			; wildcard pos ignored, check rest
 950: 3326+10	42DC  E1      	A42DC:	pop	hl
 951: 3336+11	42DD  E5      		push	hl
 952: 3347+14	42DE  FDE1    		pop	iy
 953: 3361+13	42E0  3AC4F2  		ld	a,(YF2C4)
 954: 3374+7	42E3  EE80    		xor	080H
 955: 3381+8	42E5  CB7F    		bit	7,a
 956: 3389+5+6	42E7  C8      		ret	z			; orginal FCB DR byte had b7 set, ignore direntryattribute
 957: 3394+19	42E8  FD7E0B  		ld	a,(iy+00BH)
 958: 3413+7	42EB  E61E    		and	01EH
 959: 3420+5+6	42ED  C8      		ret	z			; files with archive or read-only bit set are ok, quit
 960: 3425+13	42EE  3ADCF2  		ld	a,(YF2DC)
 961: 3438+4	42F1  B7      		or	a			; include special fileattribute flag set ?
 962: 3442+5+6	42F2  C0      		ret	nz			; yep, every direntry is ok, quit
 963: 3447+12	42F3  1801    		jr	A42F6
 964:				
 965: 3459+10	42F5  E1      	A42F5:	pop	hl
 966: 3469+17	42F6  CD4843  	A42F6:	call	A4348			; get next direntry (while searching)
 967: 3486+7+5	42F9  30C8    		jr	nc,A42C3		; ok, check it
 968: 3493+10	42FB  C9      		ret
 969:				
 970: 3503+13	42FC  3AFEF2  	A42FC:	ld	a,(YF2FE)
 971: 3516+4	42FF  3C      		inc	a			; already found a free direntry ?
 972: 3520+7+5	4300  2006    		jr	nz,A4308
 973: 3527+13	4302  3AB8F2  		ld	a,(YF2B8)
 974: 3540+13	4305  32FEF2  		ld	(YF2FE),a		; nope, register it
 975: 3553+7	4308  7E      	A4308:	ld	a,(hl)
 976: 3560+4	4309  B7      		or	a			; unused direntry ?
 977: 3564+7+5	430A  20EA    		jr	nz,A42F6		; nope, the search goes on!
 978: 3571+4	430C  37      		scf
 979: 3575+10	430D  C9      		ret
 980:				
 981:				;	  Subroutine get next direntry (at start of search)
 982:				;	     Inputs  
 983:				;	     Outputs ________________________ 
 984:				
 985: 3585+13	430E  3AB8F2  	A430E:	ld	a,(YF2B8)
 986: 3598+4	4311  3C      		inc	a
 987: 3602+19	4312  DDBE0B  		cp	(ix+00BH)		; last direntry ?
 988: 3621+7+5	4315  3050    		jr	nc,A4367		; yep, update directory of disk when needed and quit
 989:				
 990:				;	  Subroutine get direntry
 991:				;	     Inputs  
 992:				;	     Outputs ________________________ 
 993:				
 994: 3628+17	4317  CD5BF2  	A4317:	call	XF25B
 995: 3645+13	431A  32B8F2  		ld	(YF2B8),a
 996: 3658+4	431D  4F      		ld	c,a
 997: 3662+19	431E  DDA604  		and	(ix+004H)		; dirmask
 998: 3681+4	4321  6F      		ld	l,a
 999: 3685+7	4322  2600    		ld	h,000H
1000: 3692+11	4324  29      		add	hl,hl
1001: 3703+11	4325  29      		add	hl,hl
1002: 3714+11	4326  29      		add	hl,hl
1003: 3725+11	4327  29      		add	hl,hl
1004: 3736+11	4328  29      		add	hl,hl
1005: 3747+20	4329  ED5B51F3		ld	de,(YF351)		; dirsector buffer
1006: 3767+11	432D  19      		add	hl,de
1007: 3778+19	432E  DD4605  		ld	b,(ix+005H)		; dirshift
1008: 3797+8	4331  CB39    	A4331:	srl	c
1009: 3805+8+5	4333  10FC    		djnz	A4331
1010: 3813+13	4335  3A45F2  		ld	a,(YF245)
1011: 3826+4	4338  B9      		cp	c			; same as dirsector currently in buffer ?
1012: 3830+7+5	4339  2007    		jr	nz,A4342		; nope, go get it
1013: 3837+13	433B  3A46F2  		ld	a,(YF246)
1014: 3850+19	433E  DDBE00  		cp	(ix+000H)		; same driveid as dirsector buffer owner ?
1015: 3869+5+6	4341  C8      		ret	z			; yep, do nothing
1016: 3874+11	4342  E5      	A4342:	push	hl
1017: 3885+17	4343  CDA446  		call	A46A4			; read dirsector
1018: 3902+10	4346  E1      		pop	hl
1019: 3912+10	4347  C9      		ret
1020:				
1021:				;	  Subroutine get next direntry (while searching)
1022:				;	     Inputs  
1023:				;	     Outputs ________________________ 
1024:				
1025: 3922+17	4348  CD5EF2  	A4348:	call	XF25E
1026: 3939+13	434B  3AB8F2  		ld	a,(YF2B8)
1027: 3952+4	434E  3C      		inc	a
1028: 3956+19	434F  DDBE0B  		cp	(ix+00BH)		; last direntry ?
1029: 3975+7+5	4352  3013    		jr	nc,A4367		; yep, update directory of disk when needed and quit
1030: 3982+13	4354  32B8F2  		ld	(YF2B8),a
1031: 3995+10	4357  112000  		ld	de,00020H
1032: 4005+11	435A  19      		add	hl,de
1033: 4016+19	435B  DDA604  		and	(ix+004H)		; dirmask
1034: 4035+5+6	435E  C0      		ret	nz
1035: 4040+4	435F  0C      		inc	c
1036: 4044+17	4360  CDA446  		call	A46A4			; read dirsector
1037: 4061+16	4363  2A51F3  		ld	hl,(YF351)		; dirsector buffer
1038: 4077+10	4366  C9      		ret
1039:				
1040:				;	  Subroutine at end of directory
1041:				;	     Inputs  
1042:				;	     Outputs ________________________ 
1043:				
1044: 4087+17	4367  CD4347  	A4367:	call	A4743			; update directory of disk when needed
1045: 4104+4	436A  37      		scf
1046: 4108+10	436B  C9      		ret
1047:				
1048:				;	  Subroutine BDOS 13 (delete file)
1049:				;	     Inputs  
1050:				;	     Outputs ________________________ 
1051:				
1052: 4118+17	436C  CD0E44  	A436C:	call	A440E			; validate FCB drive and filename
1053: 4135+10+7	436F  D4B542  		call	nc,A42B5		; valid, find first directoryentry
1054: 4145+7	4372  3EFF    		ld	a,0FFH
1055: 4152+5+6	4374  D8      		ret	c			; invalid or not found, quit with error
1056: 4157+5+6	4375  C0      		ret	nz			; device, quit with error
1057: 4162+7	4376  3EE5    	A4376:	ld	a,0E5H
1058: 4169+13	4378  323CF2  		ld	(YF23C),a		; flag directory buffer changed
1059: 4182+7	437B  77      		ld	(hl),a			; deleted direntry
1060: 4189+19	437C  FD6E1A  		ld	l,(iy+01AH)
1061: 4208+19	437F  FD661B  		ld	h,(iy+01BH)
1062: 4227+4	4382  7C      		ld	a,h			; file has start cluster ?
1063: 4231+4	4383  B5      		or	l
1064: 4235+10+7	4384  C49B4F  		call	nz,A4F9B		; yep, release chain
1065: 4245+17	4387  CDBC42  		call	A42BC			; find next directoryentry
1066: 4262+7+5	438A  30EA    		jr	nc,A4376		; found, delete next file
1067: 4269+17	438C  CD0344  		call	A4403			; update directory of disk (SHOULD BE: CALL A4748)
1068: 4286+10	438F  C3CF45  		jp	A45CF			; write FAT (SHOULD BE: JP A45C4, write FAT when needed)
1069:				
1070:				;	  Subroutine BDOS 17 (rename file)
1071:				;	     Inputs  
1072:				;	     Outputs ________________________ 
1073:				
1074: 4296+17	4392  CD0E44  	A4392:	call	A440E			; validate FCB drive and filename
1075: 4313+7+5	4395  3874    		jr	c,A440B			; invalid, quit with error
1076: 4320+10	4397  110500  		ld	de,00005H
1077: 4330+11	439A  19      		add	hl,de			; to new filename
1078: 4341+10	439B  11C5F2  		ld	de,YF2C5		; new filenamebuffer
1079: 4351+17	439E  CDF4F1  		call	XF1F4			; validate FCB filename (new filename)
1080: 4368+10+7	43A1  D4B542  		call	nc,A42B5		; new filename valid, find first directoryentry
1081: 4378+7+5	43A4  3865    		jr	c,A440B			; invalid or not found, quit with error
1082: 4385+7+5	43A6  2063    		jr	nz,A440B
1083: 4392+10	43A8  21B9F2  		ld	hl,YF2B9
1084: 4402+10	43AB  11D0F2  		ld	de,YF2D0
1085: 4412+10	43AE  010C00  		ld	bc,11+1
1086: 4422+16+5	43B1  EDB0    		ldir				; save filename (search specifier) + orginal DR byte
1087: 4438+10	43B3  21C5F2  	A43B3:	ld	hl,YF2C5		; new filename
1088: 4448+10	43B6  11B9F2  		ld	de,YF2B9
1089: 4458+7	43B9  060B    		ld	b,11
1090: 4465+7	43BB  7E      	A43BB:	ld	a,(hl)
1091: 4472+7	43BC  FE3F    		cp	"?"			; wildcard char ?
1092: 4479+7+5	43BE  2003    		jr	nz,A43C3		; nope, use the char of the new filename
1093: 4486+19	43C0  FD7E00  		ld	a,(iy+000H)		; yep, use the char of the orginal filename
1094: 4505+7	43C3  12      	A43C3:	ld	(de),a
1095: 4512+6	43C4  23      		inc	hl
1096: 4518+6	43C5  13      		inc	de
1097: 4524+10	43C6  FD23    		inc	iy
1098: 4534+8+5	43C8  10F1    		djnz	A43BB
1099: 4542+7	43CA  3E80    		ld	a,080H
1100: 4549+7	43CC  12      		ld	(de),a			; ´orginal DR byte´ b7 set (ignore fileattribute)
1101: 4556+17	43CD  CD5A42  		call	A425A			; check if devicename
1102: 4573+7+5	43D0  3036    		jr	nc,A4408		; yep, end rename with error
1103: 4580+13	43D2  3AB8F2  		ld	a,(YF2B8)
1104: 4593+11	43D5  F5      		push	af
1105: 4604+7	43D6  3EFF    		ld	a,0FFH
1106: 4611+13	43D8  32B8F2  		ld	(YF2B8),a		; flag direntry search start at the begin
1107: 4624+17	43DB  CDBC42  		call	A42BC			; find next directoryentry
1108: 4641+10	43DE  C1      		pop	bc
1109: 4651+7+5	43DF  3027    		jr	nc,A4408		; found, so resulting filename does already exist. end rename with error
1110: 4658+4	43E1  78      		ld	a,b
1111: 4662+17	43E2  CD1743  		call	A4317			; get direntry which get renamed
1112: 4679+4	43E5  EB      		ex	de,hl
1113: 4683+10	43E6  21B9F2  		ld	hl,YF2B9
1114: 4693+10	43E9  010B00  		ld	bc,11
1115: 4703+16+5	43EC  EDB0    		ldir				; replace filename with new one
1116: 4719+7	43EE  3EFF    		ld	a,0FFH
1117: 4726+13	43F0  323CF2  		ld	(YF23C),a		; flag directory buffer changed
1118: 4739+10	43F3  21D0F2  		ld	hl,YF2D0
1119: 4749+10	43F6  11B9F2  		ld	de,YF2B9
1120: 4759+10	43F9  010C00  		ld	bc,11+1
1121: 4769+16+5	43FC  EDB0    		ldir				; restore filename (search specifier) + orginal DR byte
1122: 4785+17	43FE  CDBC42  		call	A42BC			; find next directoryentry
1123: 4802+7+5	4401  30B0    		jr	nc,A43B3		; found, rename next file
1124: 4809+17	4403  CD4347  	A4403:	call	A4743			; update directory of disk when needed 
1125: 4826+4	4406  AF      		xor	a			; no error
1126: 4830+10	4407  C9      		ret
1127:				;
1128: 4840+17	4408  CD4347  	A4408:	call	A4743			; update directory of disk when needed
1129: 4857+7	440B  3EFF    	A440B:	ld	a,0FFH			; error
1130: 4864+10	440D  C9      		ret
1131:				
1132:				;	  Subroutine validate FCB drive and filename
1133:				;	     Inputs  
1134:				;	     Outputs ________________________ 
1135:				
1136: 4874+17	440E  CD61F2  	A440E:	call	XF261
1137: 4891+4	4411  AF      		xor	a
1138: 4895+13	4412  32DCF2  		ld	(YF2DC),a		; do not include special fileattributes
1139: 4908+4	4415  EB      		ex	de,hl
1140: 4912+7	4416  7E      		ld	a,(hl)
1141: 4919+6	4417  23      		inc	hl
1142: 4925+13	4418  32C4F2  		ld	(YF2C4),a		; save FCB DR byte
1143: 4938+7	441B  E60F    		and	00FH			; only use b3-b0 for drive
1144: 4945+17	441D  CD2744  		call	A4427			; validate fcb driveid
1145: 4962+5+6	4420  D8      		ret	c
1146: 4967+10	4421  11B9F2  		ld	de,YF2B9
1147: 4977+10	4424  C3F4F1  		jp	XF1F4			; validate FCB filename
1148:				
1149:				;	  Subroutine Validate driveid (FCB style)
1150:				;	     Inputs  A = driveid
1151:				;	     Outputs ________________________ 
1152:				
1153: 4987+4	4427  4F      	A4427:	ld	c,a
1154: 4991+13	4428  3A47F3  		ld	a,(YF347)
1155: 5004+4	442B  B9      		cp	c
1156: 5008+5+6	442C  D8      		ret	c
1157: 5013+4	442D  79      		ld	a,c
1158: 5017+4	442E  3D      		dec	a
1159: 5021+10	442F  F23544  		jp	p,A4435
1160: 5031+13	4432  3A47F2  		ld	a,(YF247)		; default driveid
1161: 5044+13	4435  32E1F2  	A4435:	ld	(YF2E1),a		; set current driveid
1162: 5057+10	4438  C9      		ret
1163:				
1164:				;	  Subroutine get max record and extent
1165:				;	     Inputs  
1166:				;	     Outputs ________________________ 
1167:				
1168: 5067+19	4439  FD7E1F  	A4439:	ld	a,(iy+01FH)
1169: 5086+4	443C  B7      		or	a
1170: 5090+7+5	443D  201F    		jr	nz,A445E		; filesize > 16777215, use max value
1171: 5097+19	443F  FD7E1C  		ld	a,(iy+01CH)
1172: 5116+19	4442  FD4E1D  		ld	c,(iy+01DH)
1173: 5135+19	4445  FD461E  		ld	b,(iy+01EH)
1174: 5154+4	4448  87      		add	a,a
1175: 5158+8	4449  CB11    		rl	c
1176: 5166+8	444B  CB10    		rl	b			; number of records (128 bytes)
1177: 5174+7+5	444D  380F    		jr	c,A445E			; >65535, use max value
1178: 5181+4	444F  B7      		or	a			; is filesize a multiply of 128 ?
1179: 5185+7+5	4450  2805    		jr	z,A4457
1180: 5192+6	4452  03      		inc	bc			; nope, increase the recordnumber
1181: 5198+4	4453  78      		ld	a,b
1182: 5202+4	4454  B1      		or	c			; does that fit ?
1183: 5206+7+5	4455  2807    		jr	z,A445E			; nope, use max value
1184: 5213+4	4457  79      	A4457:	ld	a,c
1185: 5217+8	4458  CBB9    		res	7,c			; c = max recordnumber (0-127)
1186: 5225+4	445A  87      		add	a,a
1187: 5229+8	445B  CB10    		rl	b			; b = max extent
1188: 5237+5+6	445D  D0      		ret	nc			; does fit, quit
1189: 5242+10	445E  017FFF  	A445E:	ld	bc,0FF7FH		; extent 255, record 127
1190: 5252+10	4461  C9      		ret
1191:				
1192:				;	  Subroutine BDOS 0F (open file)
1193:				;	     Inputs  
1194:				;	     Outputs ________________________ 
1195:				
1196: 5262+17	4462  CDA542  	A4462:	call	A42A5			; validate FCB, clear S2 and find direntry
1197: 5279+7+5	4465  38A4    		jr	c,A440B			; error, quit with error
1198: 5286+17	4467  CD3944  		call	A4439			; get max record and extent
1199: 5303+13	446A  3A0CF3  		ld	a,(YF30C)		; original FCB EX byte
1200: 5316+4	446D  04      		inc	b			; ?? correct for large files (filesize > 4177919 where extend is 0FFH)
1201: 5320+4	446E  B8      		cp	b			; is extent of file big enough ?
1202: 5324+7+5	446F  309A    		jr	nc,A440B		; nope, quit with error
1203: 5331+17	4471  CD64F2  	A4471:	call	XF264
1204: 5348+4	4474  EB      		ex	de,hl
1205: 5352+10	4475  010F00  		ld	bc,0000FH
1206: 5362+11	4478  09      		add	hl,bc
1207: 5373+17	4479  CD3944  		call	A4439			; get max record and extent
1208: 5390+13	447C  3A0CF3  		ld	a,(YF30C)
1209: 5403+4	447F  B8      		cp	b			; orginal FCB EX byte same as max extent ?
1210: 5407+7+5	4480  2806    		jr	z,A4488			; same, use RC=max recordnumber (means extent is not full)
1211: 5414+7	4482  0E80    		ld	c,080H
1212: 5421+7+5	4484  3802    		jr	c,A4488			; smaller, use RC=128 (means extend is full)
1213: 5428+7	4486  0E00    		ld	c,000H			; bigger, use RC=0 (means extend is empty)
1214: 5435+7	4488  71      	A4488:	ld	(hl),c			; RC
1215: 5442+6	4489  23      		inc	hl
1216: 5448+4	448A  EB      		ex	de,hl
1217: 5452+10	448B  011C00  		ld	bc,0001CH
1218: 5462+11	448E  09      		add	hl,bc
1219: 5473+7	448F  0E04    		ld	c,004H
1220: 5480+16+5	4491  EDB0    		ldir				; copy filesize
1221: 5496+10	4493  01F8FF  		ld	bc,0FFF8H
1222: 5506+11	4496  09      		add	hl,bc
1223: 5517+16	4497  EDA0    		ldi
1224: 5533+16	4499  EDA0    		ldi				; creation date
1225: 5549+7	449B  0EFC    		ld	c,0FCH
1226: 5556+11	449D  09      		add	hl,bc
1227: 5567+16	449E  EDA0    		ldi
1228: 5583+16	44A0  EDA0    		ldi				; creation time
1229: 5599+19	44A2  FD7E0B  		ld	a,(iy+00BH)
1230: 5618+8	44A5  CB7F    		bit	7,a
1231: 5626+7+5	44A7  2005    		jr	nz,A44AE		; device,
1232: 5633+19	44A9  DD7E00  		ld	a,(ix+000H)		; driveid
1233: 5652+7	44AC  F640    		or	040H			; flag diskfile unchanged
1234: 5659+7	44AE  12      	A44AE:	ld	(de),a			; devicecode
1235: 5666+6	44AF  13      		inc	de
1236: 5672+13	44B0  3AB8F2  		ld	a,(YF2B8)
1237: 5685+7	44B3  12      		ld	(de),a			; direntry number
1238: 5692+6	44B4  13      		inc	de
1239: 5698+19	44B5  FD7E1A  		ld	a,(iy+01AH)
1240: 5717+7	44B8  12      		ld	(de),a
1241: 5724+6	44B9  13      		inc	de
1242: 5730+6	44BA  13      		inc	de
1243: 5736+7	44BB  12      		ld	(de),a
1244: 5743+6	44BC  1B      		dec	de
1245: 5749+19	44BD  FD7E1B  		ld	a,(iy+01BH)
1246: 5768+7	44C0  12      		ld	(de),a
1247: 5775+6	44C1  13      		inc	de
1248: 5781+6	44C2  13      		inc	de
1249: 5787+7	44C3  12      		ld	(de),a			; start cluster and last cluster accessed
1250: 5794+6	44C4  13      		inc	de
1251: 5800+4	44C5  AF      		xor	a
1252: 5804+7	44C6  12      		ld	(de),a
1253: 5811+6	44C7  13      		inc	de
1254: 5817+7	44C8  12      		ld	(de),a			; last cluster accessed, relative
1255: 5824+10	44C9  C9      		ret
1256:				
1257:				;	  Subroutine handle DSKCHG error
1258:				;	     Inputs  
1259:				;	     Outputs ________________________ 
1260:				
1261: 5834+4	44CA  4F      	A44CA:	ld	c,a
1262: 5838+13	44CB  3AE1F2  		ld	a,(YF2E1)		; current driveid
1263: 5851+17	44CE  CD0A47  		call	A470A			; start diskerror handler
1264: 5868+12	44D1  1808    		jr	A44DB			; get latest FAT (try again)
1265:				
1266:				;	  Subroutine reset direntry search and get latest FAT
1267:				;	     Inputs  
1268:				;	     Outputs ________________________ 
1269:				
1270: 5880+7	44D3  3EFF    	A44D3:	ld	a,0FFH
1271: 5887+13	44D5  32B8F2  		ld	(YF2B8),a		; invalid latest direntry (search from the begin)
1272: 5900+13	44D8  32FEF2  		ld	(YF2FE),a		; not found a free direntry
1273:				
1274:				;	  Subroutine get latest FAT
1275:				;	     Inputs  
1276:				;	     Outputs ________________________ 
1277:				
1278: 5913+17	44DB  CD67F2  	A44DB:	call	XF267
1279: 5930+17	44DE  CD5545  		call	A4555			; get pointer to DPB of current drive
1280: 5947+13	44E1  3AE1F2  		ld	a,(YF2E1)		; current driveid
1281: 5960+19	44E4  DD4E01  		ld	c,(ix+001H)		; mediadesciptor
1282: 5979+7	44E7  0600    		ld	b,0
1283: 5986+4	44E9  B7      		or	a
1284: 5990+17	44EA  CD7C60  		call	A6067			; DSKCHG
1285: 6007+7+5	44ED  38DB    		jr	c,A44CA			; error,
1286: 6014+17	44EF  CD3345  		call	A4536			; update DPBTBL entry current drive
1287: 6031+19	44F2  DD6E13  		ld	l,(ix+013H)
1288: 6050+19	44F5  DD6614  		ld	h,(ix+014H)
1289: 6069+6	44F8  2B      		dec	hl
1290: 6075+4	44F9  78      		ld	a,b			; DSKCHG status
1291: 6079+7	44FA  B6      		or	(hl)			; combined with the FAT buffer status
1292: 6086+13	44FB  3AE1F2  		ld	a,(YF2E1)		; current driveid
1293: 6099+16	44FE  2A41F2  		ld	hl,(YF241)
1294: 6115+10	4501  FA0A45  		jp	m,A450A			; FAT buffer invalid OR diskchange unknown, read the FAT
1295: 6125+5+6	4504  C0      		ret	nz			; FAT buffer changed OR disk unchanged, do not read the FAT and quit
1296: 6130+4	4505  BD      		cp	l			; current drive same as datasector buffer owner ?
1297: 6134+7+5	4506  200B    		jr	nz,A4516		; nope, read the FAT
1298: 6141+4	4508  25      		dec	h			; datasector buffer changed ?
1299: 6145+5+6	4509  C8      		ret	z			; yep, do not read the FAT and quit
1300: 6150+4	450A  95      	A450A:	sub	l			; current drive same as datasector buffer owner ?
1301: 6154+7+5	450B  2006    		jr	nz,A4516		; nope, leave the datasector buffer alone
1302: 6161+4	450D  6F      		ld	l,a
1303: 6165+4	450E  67      		ld	h,a
1304:				
1305:				; VERSION 1.1 CHANGE
1306:				;
1307:				; ld (YF23F),hl is removed, because it is not explicit needed
1308:				; room is used later on to fix the FAT reading bug when one of the other FAT copies is used (when first FAT read generates a error)
1309:				;
1310:				
1311: 6169+4	450F  2D      		dec	l
1312: 6173+16	4510  2241F2  		ld	(YF241),hl		; invalid datasector buffer
1313: 6189+7	4513  3EFF    	A4516:	ld	a,0FFH
1314: 6196+13	4515  3246F2  		ld	(YF246),a		; invalid dirsector buffer
1315: 6209+17	4518  CDFA45  		call	A45FA			; get FAT parameters
1316: 6226+6	451B  2B      		dec	hl
1317: 6232+10	451C  3600    		ld	(hl),0			; FAT buffer unchanged
1318: 6242+6	451E  23      		inc	hl
1319: 6248+11	451F  F5      	A4522:	push	af
1320: 6259+17	4520  CDD746  		call	A46D7			; read FAT sectors
1321: 6276+7+5	4523  3819    		jr	c,A4541			; error, try the next FAT copy
1322: 6283+10	4525  F1      		pop	af
1323: 6293+7	4526  46      	A4529:	ld	b,(hl)			; mediabyte of FAT sector
1324: 6300+13	4527  3AE1F2  		ld	a,(YF2E1)		; current driveid
1325: 6313+19	452A  DD4E01  		ld	c,(ix+001H)		; mediadescriptor
1326: 6332+15	452D  DDE5    		push	ix
1327: 6347+10	452F  E1      		pop	hl
1328: 6357+17	4530  CD8460  		call	A606F			; GETDPB
1329: 6374+11	4533  E5      	A4536:	push	hl
1330: 6385+14	4534  DDE1    		pop	ix
1331: 6399+4	4536  EB      		ex	de,hl
1332: 6403+17	4537  CD6345  		call	A4563			; get DPBTBL entry of current drive
1333: 6420+7	453A  73      		ld	(hl),e
1334: 6427+6	453B  23      		inc	hl
1335: 6433+7	453C  72      		ld	(hl),d
1336: 6440+10	453D  C9      		ret
1337:				;
1338: 6450+4	453E  7B      	A4541:	ld	a,e
1339: 6454+4	453F  81      		add	a,c
1340: 6458+4	4540  5F      		ld	e,a
1341: 6462+7+5	4541  3001    		jr	nc,A4547
1342: 6469+4	4543  14      		inc	d
1343: 6473+10	4544  F1      	A4547:	pop	af			; adjust first FAT sector to the first FAT sector of the next FAT copy
1344:				
1345:				; VERSION 1.1 BUGFIX
1346:				;
1347:				; Begin of change
1348:				;
1349:				
1350: 6483+4	4545  41      		ld	b,c			; restore sectors per FAT (B is destroyed by the DSKIO)
1351:				
1352:				; End of change
1353:				 
1354: 6487+4	4546  3D      		dec	a
1355: 6491+7+5	4547  20D6    		jr	nz,A4522		; there is a other FAT copy, try that one
1356: 6498+17	4549  CDFA45  		call	A45FA			; get FAT parameters (so the first FAT copy is used)
1357: 6515+11	454C  E5      		push	hl
1358: 6526+17	454D  CDC546  		call	A46C5			; read FAT sectors with DOS error handling
1359: 6543+10	4550  E1      		pop	hl
1360: 6553+12	4551  18D3    		jr	A4529			; use FAT buffer
1361:				;
1362:				; CHANGED, TO KEEP ROUTINES ALIGNED WITH PREVIOUS VERSION
1363:				;
1364:     -	4553 .. 4554 00		defs	04555H-044CAH-($-A44CA),0
1365:				
1366:				;	  Subroutine get pointer to DPB of current drive
1367:				;	     Inputs  
1368:				;	     Outputs HL = IX = pointer to DPB
1369:				
1370: 6565+17	4555  CD6AF2  	A4555:	call	XF26A
1371: 6582+17	4558  CD6345  		call	A4563			; get DPBTBL entry of current drive
1372: 6599+7	455B  7E      		ld	a,(hl)
1373: 6606+6	455C  23      		inc	hl
1374: 6612+7	455D  66      		ld	h,(hl)
1375: 6619+4	455E  6F      		ld	l,a
1376: 6623+11	455F  E5      		push	hl
1377: 6634+14	4560  DDE1    		pop	ix
1378: 6648+10	4562  C9      		ret
1379:				
1380:				;	  Subroutine get DPBTBL entry of current drive
1381:				;	     Inputs  HL = adres of pointer
1382:				;	     Outputs ________________________ 
1383:				
1384: 6658+13	4563  3AE1F2  	A4563:	ld	a,(YF2E1)		; current driveid
1385: 6671+10	4566  2155F3  		ld	hl,YF355
1386: 6681+4	4569  87      		add	a,a
1387: 6685+4	456A  85      		add	a,l
1388: 6689+4	456B  6F      		ld	l,a
1389: 6693+5+6	456C  D0      		ret	nc
1390: 6698+4	456D  24      		inc	h
1391: 6702+10	456E  C9      		ret
1392:				
1393:				;	  Subroutine BDOS 10 (close file)
1394:				;	     Inputs  
1395:				;	     Outputs ________________________ 
1396:				
1397: 6712+11	456F  D5      	A456F:	push	de
1398: 6723+14	4570  FDE1    		pop	iy
1399: 6737+17	4572  CD0E44  		call	A440E			; validate FCB drive and filename
1400: 6754+7	4575  3EFF    		ld	a,0FFH
1401: 6761+5+6	4577  D8      		ret	c			; invalid, quit with error
1402: 6766+19	4578  FD7E18  		ld	a,(iy+018H)
1403: 6785+7	457B  E6C0    		and	0C0H
1404: 6792+7	457D  3E00    		ld	a,0			; ok
1405: 6799+5+6	457F  C0      		ret	nz			; device OR unchanged diskfile, quit
1406: 6804+13	4580  3AE1F2  		ld	a,(YF2E1)		; current driveid
1407: 6817+16	4583  2A41F2  		ld	hl,(YF241)
1408: 6833+4	4586  BD      		cp	l			; same drive as owner datasector buffer ?
1409: 6837+10+7	4587  CC2D47  		call	z,A472D			; yep, write datasector buffer when needed
1410: 6847+17	458A  CD5545  		call	A4555			; get pointer to DPB of current drive
1411: 6864+19	458D  FD7E19  		ld	a,(iy+019H)		; direntrynumber
1412: 6883+17	4590  CD1743  		call	A4317			; get direntry
1413: 6900+7	4593  060B    		ld	b,11
1414: 6907+17	4595  CD4F42  		call	A424F			; compare with filename1
1415: 6924+7+5	4598  2054    		jr	nz,A45EE		; not the same, make FAT buffer unchanged and quit with error
1416: 6931+15	459A  FDE5    		push	iy
1417: 6946+10	459C  D1      		pop	de
1418: 6956+7	459D  0E0B    		ld	c,00BH
1419: 6963+11	459F  09      		add	hl,bc
1420: 6974+4	45A0  EB      		ex	de,hl
1421: 6978+7	45A1  0E16    		ld	c,016H
1422: 6985+11	45A3  09      		add	hl,bc
1423: 6996+16	45A4  EDA0    		ldi
1424: 7012+16	45A6  EDA0    		ldi
1425: 7028+10	45A8  01FCFF  		ld	bc,0FFFCH
1426: 7038+11	45AB  09      		add	hl,bc
1427: 7049+16	45AC  EDA0    		ldi
1428: 7065+16	45AE  EDA0    		ldi
1429: 7081+10	45B0  010400  		ld	bc,00004H
1430: 7091+11	45B3  09      		add	hl,bc
1431: 7102+16	45B4  EDA0    		ldi
1432: 7118+16	45B6  EDA0    		ldi
1433: 7134+10	45B8  01F4FF  		ld	bc,0FFF4H
1434: 7144+11	45BB  09      		add	hl,bc
1435: 7155+10	45BC  010400  		ld	bc,00004H
1436: 7165+16+5	45BF  EDB0    		ldir
1437: 7181+17	45C1  CD4847  		call	A4748			; update directory of disk
1438:				
1439:				;	  Subroutine write FAT when needed
1440:				;	     Inputs  
1441:				;	     Outputs ________________________ 
1442:				
1443: 7198+19	45C4  DD6E13  	A45C4:	ld	l,(ix+013H)
1444: 7217+19	45C7  DD6614  		ld	h,(ix+014H)
1445: 7236+6	45CA  2B      		dec	hl
1446: 7242+7	45CB  7E      		ld	a,(hl)
1447: 7249+7	45CC  FE01    		cp	1			; FAT buffer changed ?
1448: 7256+5+6	45CE  C0      		ret	nz			; nope, quit (?? return error if FAT buffer invalid)
1449:				
1450:				;	  Subroutine write FAT
1451:				;	     Inputs  
1452:				;	     Outputs ________________________ 
1453:				
1454: 7261+17	45CF  CD6DF2  	A45CF:	call	XF26D
1455: 7278+17	45D2  CDFA45  		call	A45FA			; get FAT parameters
1456: 7295+6	45D5  2B      		dec	hl
1457: 7301+10	45D6  3600    		ld	(hl),0			; FAT buffer unchanged
1458: 7311+6	45D8  23      		inc	hl
1459: 7317+11	45D9  F5      	A45D9:	push	af
1460: 7328+11	45DA  D5      		push	de
1461: 7339+11	45DB  C5      		push	bc
1462: 7350+11	45DC  E5      		push	hl
1463: 7361+17	45DD  CD5547  		call	A4755			; write FAT sectors with DOS error handling
1464: 7378+10	45E0  E1      		pop	hl
1465: 7388+10	45E1  C1      		pop	bc
1466: 7398+10	45E2  D1      		pop	de
1467: 7408+4	45E3  7B      		ld	a,e
1468: 7412+4	45E4  80      		add	a,b
1469: 7416+4	45E5  5F      		ld	e,a
1470: 7420+7+5	45E6  3001    		jr	nc,A45E9
1471: 7427+4	45E8  14      		inc	d			; to start sector of the next FAT
1472: 7431+10	45E9  F1      	A45E9:	pop	af
1473: 7441+4	45EA  3D      		dec	a
1474: 7445+7+5	45EB  20EC    		jr	nz,A45D9		; write next FAT
1475: 7452+10	45ED  C9      		ret
1476:				
1477:				;	  Subroutine make FAT buffer unchanged and quit with error
1478:				;	     Inputs  
1479:				;	     Outputs ________________________ 
1480:				
1481: 7462+19	45EE  DD6E13  	A45EE:	ld	l,(ix+013H)
1482: 7481+19	45F1  DD6614  		ld	h,(ix+014H)
1483: 7500+6	45F4  2B      		dec	hl
1484: 7506+10	45F5  3600    		ld	(hl),0			; FAT buffer unchanged
1485: 7516+7	45F7  3EFF    		ld	a,0FFH			; error
1486: 7523+10	45F9  C9      		ret
1487:				
1488:				;	  Subroutine get FAT parameters
1489:				;	     Inputs  IX = pointer to DPB
1490:				;	     Outputs A = number of FATs, DE = first FAT sector, B = number sectors per FAT, HL = pointer to FAT buffer
1491:				
1492: 7533+19	45FA  DD7E0A  	A45FA:	ld	a,(ix+00AH)		; number of FATs
1493: 7552+19	45FD  DD6E13  		ld	l,(ix+013H)
1494: 7571+19	4600  DD6614  		ld	h,(ix+014H)		; pointer to FAT buffer
1495: 7590+19	4603  DD4610  		ld	b,(ix+010H)		; number of sectors per FAT
1496: 7609+19	4606  DD5E08  		ld	e,(ix+008H)
1497: 7628+19	4609  DD5609  		ld	d,(ix+009H)		; first FAT sector
1498: 7647+10	460C  C9      		ret
1499:				
1500:				;	  Subroutine get dir parameters
1501:				;	     Inputs  IX = pointer to DPB, A = relative dirsector, DE = first dirsector
1502:				;	     Outputs DE = dirsector, B = 1, HL = pointer to dirsector buffer
1503:				
1504: 7657+19	460D  DD8611  	A460D:	add	a,(ix+011H)
1505: 7676+4	4610  5F      		ld	e,a
1506: 7680+19	4611  DD5612  		ld	d,(ix+012H)
1507: 7699+7+5	4614  3001    		jr	nc,A4617
1508: 7706+4	4616  14      		inc	d			; + first dir sector
1509: 7710+16	4617  2A51F3  	A4617:	ld	hl,(YF351)		; dirsector buffer
1510: 7726+7	461A  0601    		ld	b,1			; 1 sector
1511: 7733+10	461C  C9      		ret
1512:				
1513:				;	  Subroutine BDOS 16 (create file)
1514:				;	     Inputs  
1515:				;	     Outputs ________________________ 
1516:				
1517: 7743+11	461D  D5      	A461D:	push	de
1518: 7754+17	461E  CD0E44  	T461E:	call	A440E			; validate FCB drive and filename
1519: 7771+7+5	4621  382A    		jr	c,A464D			; invalid, quit with error
1520: 7778+6	4623  23      		inc	hl
1521: 7784+6	4624  23      		inc	hl
1522: 7790+10	4625  3600    		ld	(hl),0			; clear S2 byte
1523: 7800+10	4627  21B9F2  		ld	hl,YF2B9
1524: 7810+7	462A  3E3F    		ld	a,"?"
1525: 7817+10	462C  010B00  		ld	bc,11
1526: 7827+16+5	462F  EDB1    		cpir				; wildcard char in filename ?
1527: 7843+7+5	4631  281A    		jr	z,A464D			; yep, quit with error
1528: 7850+17	4633  CDB542  		call	A42B5			; find first directoryentry
1529: 7867+7+5	4636  3019    		jr	nc,A4651		; found, special actions for existing file/device
1530: 7874+13	4638  3AFEF2  		ld	a,(YF2FE)
1531: 7887+7	463B  FEFF    		cp	0FFH			; found free direntry ?
1532: 7894+7+5	463D  280E    		jr	z,A464D			; nope, quit with error (directory is full)
1533: 7901+17	463F  CD1743  		call	A4317			; get direntry
1534: 7918+11	4642  E5      		push	hl
1535: 7929+14	4643  FDE1    		pop	iy
1536: 7943+12	4645  1822    		jr	A4669			; setup direntry
1537:				;
1538: 7955+20	4647  FDCB0B7E	A4647:	bit	7,(iy+00BH)
1539: 7975+7+5	464B  2050    		jr	nz,A469D		; device, treat as open file
1540:									; file with special fileattribute, quit with error
1541: 7982+10	464D  D1      	A464D:	pop	de
1542: 7992+7	464E  3EFF    		ld	a,0FFH
1543: 7999+10	4650  C9      		ret
1544:				
1545: 8009+7+5	4651  20F4    	A4651:	jr	nz,A4647		; device or file with special fileattribute,
1546: 8016+13	4653  3A0CF3  		ld	a,(YF30C)		; orginal FCB EX byte
1547: 8029+4	4656  B7      		or	a
1548: 8033+7+5	4657  2044    		jr	nz,A469D		; is not zero, just open the file
1549: 8040+19	4659  FD6E1A  		ld	l,(iy+01AH)
1550: 8059+19	465C  FD661B  		ld	h,(iy+01BH)
1551: 8078+4	465F  7C      		ld	a,h
1552: 8082+4	4660  B5      		or	l			; has start cluster ?
1553: 8086+7+5	4661  2806    		jr	z,A4669			; nop,
1554: 8093+17	4663  CD9B4F  		call	A4F9B			; release chain
1555: 8110+17	4666  CDCF45  		call	A45CF			; write FAT
1556: 8127+15	4669  FDE5    	A4669:	push	iy
1557: 8142+10	466B  D1      		pop	de
1558: 8152+10	466C  21B9F2  		ld	hl,YF2B9
1559: 8162+10	466F  010B00  		ld	bc,11
1560: 8172+16+5	4672  EDB0    		ldir				; copy filename in FCB to direntry
1561: 8188+7	4674  7E      		ld	a,(hl)
1562: 8195+4	4675  17      		rla
1563: 8199+7	4676  3E00    		ld	a,000H
1564: 8206+7+5	4678  3002    		jr	nc,A467C		; b7 DR byte reset, ordinary file
1565: 8213+7	467A  3E06    		ld	a,006H			; b7 DR byte set, hidden system file
1566: 8220+7	467C  12      	A467C:	ld	(de),a
1567: 8227+6	467D  13      		inc	de
1568: 8233+4	467E  EB      		ex	de,hl
1569: 8237+7	467F  060A    		ld	b,10
1570: 8244+4	4681  AF      		xor	a
1571: 8248+7	4682  77      	A4682:	ld	(hl),a
1572: 8255+6	4683  23      		inc	hl
1573: 8261+8+5	4684  10FC    		djnz	A4682			; clear unused bytes direntry
1574: 8269+11	4686  E5      		push	hl
1575: 8280+17	4687  CD9654  		call	A5496			; get time and date (dirformat)
1576: 8297+10	468A  E1      		pop	hl
1577: 8307+7	468B  73      		ld	(hl),e
1578: 8314+6	468C  23      		inc	hl
1579: 8320+7	468D  72      		ld	(hl),d
1580: 8327+6	468E  23      		inc	hl
1581: 8333+7	468F  71      		ld	(hl),c
1582: 8340+6	4690  23      		inc	hl
1583: 8346+7	4691  70      		ld	(hl),b
1584: 8353+6	4692  23      		inc	hl			; fill in time and date in direntry
1585: 8359+4	4693  AF      		xor	a
1586: 8363+7	4694  0606    		ld	b,2+4
1587: 8370+7	4696  77      	A4696:	ld	(hl),a
1588: 8377+6	4697  23      		inc	hl
1589: 8383+8+5	4698  10FC    		djnz	A4696			; fill in no first cluster, filesize 0 in direntry
1590: 8391+17	469A  CD4847  		call	A4748			; update directory of disk
1591:				
1592: 8408+15	469D  FDE5    	A469D:	push	iy
1593: 8423+10	469F  E1      		pop	hl
1594: 8433+10	46A0  D1      		pop	de
1595: 8443+10	46A1  C37144  		jp	A4471			; continue with open file
1596:				
1597:				;	  Subroutine read dirsector
1598:				;	     Inputs  C = relative dir sector
1599:				;	     Outputs ________________________ 
1600:				
1601: 8453+11	46A4  C5      	A46A4:	push	bc
1602: 8464+17	46A5  CD4347  		call	A4743			; update directory of disk when needed
1603: 8481+10	46A8  C1      		pop	bc
1604: 8491+19	46A9  DD4600  		ld	b,(ix+000H)		; driveid
1605: 8510+20	46AC  ED4345F2		ld	(YF246-1),bc		; set driveid and sector dirsector buffer
1606: 8530+11	46B0  C5      		push	bc
1607: 8541+4	46B1  79      		ld	a,c			; relative dirsector
1608: 8545+17	46B2  CD0D46  		call	A460D			; setup dirsector parameters
1609: 8562+17	46B5  CDC546  		call	A46C5			; read dirsector with DOS error handling
1610: 8579+10	46B8  C1      		pop	bc
1611: 8589+10	46B9  C9      		ret
1612:				
1613:				;	  Subroutine BDOS 2F (read logical sector)
1614:				;	     Inputs  
1615:				;	     Outputs ________________________ 
1616:				
1617: 8599+4	46BA  44      	A46BA:	ld	b,h
1618: 8603+4	46BB  7D      		ld	a,l
1619: 8607+13	46BC  32E1F2  		ld	(YF2E1),a		; set current driveid
1620: 8620+17	46BF  CD5545  		call	A4555			; get pointer to DPB of current drive
1621: 8637+16	46C2  2A3DF2  		ld	hl,(YF23D)		; transferadres
1622:				
1623:				;	  Subroutine read sectors with DOS error handling
1624:				;	     Inputs  
1625:				;	     Outputs ________________________ 
1626:				
1627: 8653+17	46C5  CD70F2  	A46C5:	call	XF270
1628: 8670+4	46C8  AF      		xor	a
1629: 8674+13	46C9  32FFF2  		ld	(YF2FF),a		; flag read disk operation
1630: 8687+17	46CC  CDD746  		call	A46D7			; read sector
1631: 8704+5+6	46CF  D0      		ret	nc			; no error, quit
1632: 8709+17	46D0  CDE846  		call	A46E8			; adjust parameters to restart at error sector and start diskerror handler
1633: 8726+4	46D3  3D      		dec	a
1634: 8730+7+5	46D4  28EF    		jr	z,A46C5			; RETRY, try again
1635: 8737+10	46D6  C9      		ret				; IGNORE, quit
1636:				
1637:				;	  Subroutine read sectors
1638:				;	     Inputs  
1639:				;	     Outputs ________________________ 
1640:				
1641: 8747+19	46D7  DD7E00  	A46D7:	ld	a,(ix+000H)		; driveid
1642: 8766+19	46DA  DD4E01  		ld	c,(ix+001H)		; mediadescriptor
1643: 8785+11	46DD  E5      		push	hl
1644: 8796+11	46DE  D5      		push	de
1645: 8807+11	46DF  C5      		push	bc
1646: 8818+17	46E0  CD6760  		call	A6052			; read disksector
1647: 8835+10	46E3  D1      		pop	de
1648: 8845+4	46E4  4A      		ld	c,d
1649: 8849+10	46E5  D1      		pop	de
1650: 8859+10	46E6  E1      		pop	hl
1651: 8869+10	46E7  C9      		ret
1652:				
1653:				;	  Subroutine adjust parameters to restart at error sector and start diskerror handler
1654:				;	     Inputs  
1655:				;	     Outputs ________________________ 
1656:				
1657: 8879+11	46E8  F5      	A46E8:	push	af
1658: 8890+4	46E9  79      		ld	a,c
1659: 8894+4	46EA  90      		sub	b
1660: 8898+4	46EB  4F      		ld	c,a
1661: 8902+11	46EC  C5      		push	bc
1662: 8913+7	46ED  0600    		ld	b,000H
1663: 8920+4	46EF  EB      		ex	de,hl
1664: 8924+11	46F0  09      		add	hl,bc
1665: 8935+11	46F1  E5      		push	hl
1666: 8946+11	46F2  D5      		push	de
1667: 8957+19	46F3  DD5E02  		ld	e,(ix+002H)
1668: 8976+19	46F6  DD5603  		ld	d,(ix+003H)		; sectorsize
1669: 8995+17	46F9  CD1649  		call	A4916			; multiply
1670: 9012+10	46FC  E1      		pop	hl
1671: 9022+10	46FD  D1      		pop	de
1672: 9032+11	46FE  09      		add	hl,bc
1673: 9043+10	46FF  C1      		pop	bc
1674: 9053+10	4700  F1      		pop	af
1675: 9063+4	4701  4F      		ld	c,a
1676: 9067+13	4702  3AFFF2  		ld	a,(YF2FF)		; type of diskoperation
1677: 9080+4	4705  B1      		or	c
1678: 9084+4	4706  4F      		ld	c,a
1679: 9088+19	4707  DD7E00  		ld	a,(ix+000H)		; driveid
1680:				
1681:				;	  Subroutine start diskerror handler
1682:				;	     Inputs  
1683:				;	     Outputs ________________________ 
1684:				
1685: 9107+17	470A  CD73F2  	A470A:	call	XF273
1686: 9124+11	470D  C5      		push	bc
1687: 9135+11	470E  D5      		push	de
1688: 9146+11	470F  E5      		push	hl
1689: 9157+16	4710  2A23F3  		ld	hl,(YF323)
1690: 9173+17	4713  CDE8F1  		call	XF1E8			; start diskerror handler in DOS memory
1691: 9190+4	4716  79      		ld	a,c			; requested action
1692: 9194+10	4717  E1      		pop	hl
1693: 9204+10	4718  D1      		pop	de
1694: 9214+10	4719  C1      		pop	bc
1695: 9224+7	471A  FE02    		cp	2
1696: 9231+5+6	471C  C0      		ret	nz
1697: 9236+10	471D  C3E2F1  		jp	XF1E2			; Warm boot
1698:				
1699:				;	  Subroutine BDOS 30 (write logical sector)
1700:				;	     Inputs  
1701:				;	     Outputs ________________________ 
1702:				
1703: 9246+4	4720  44      	A4720:	ld	b,h
1704: 9250+4	4721  7D      		ld	a,l
1705: 9254+13	4722  32E1F2  		ld	(YF2E1),a		; set current driveid
1706: 9267+17	4725  CD5545  		call	A4555			; get pointer to DPB of current drive
1707: 9284+16	4728  2A3DF2  		ld	hl,(YF23D)		; transferadres
1708: 9300+12	472B  1828    		jr	A4755			; write sectors with DOS error handling
1709:				
1710:				;	  Subroutine write datasector buffer when needed
1711:				;	     Inputs  
1712:				;	     Outputs ________________________ 
1713:				
1714: 9312+10	472D  2142F2  	A472D:	ld	hl,YF242
1715: 9322+4	4730  AF      		xor	a
1716: 9326+7	4731  BE      		cp	(hl)			; datasector buffer changed ?
1717: 9333+7	4732  77      		ld	(hl),a			; now it is unchanged
1718: 9340+5+6	4733  C8      		ret	z			; nope, quit
1719: 9345+20	4734  DD2A43F2		ld	ix,(YF243)		; saved DPB pointer
1720: 9365+16	4738  2A4FF3  		ld	hl,(YF34F)		; datasector buffer
1721: 9381+7	473B  0601    		ld	b,1			; 1 sector
1722: 9388+20	473D  ED5B3FF2		ld	de,(YF23F)		; sectornumber of datasector buffer
1723: 9408+12	4741  1812    		jr	A4755			; write sector with DOS error handling
1724:				
1725:				;	  Subroutine write dirsector buffer when needed
1726:				;	     Inputs  
1727:				;	     Outputs ________________________ 
1728:				
1729: 9420+13	4743  3A3CF2  	A4743:	ld	a,(YF23C)
1730: 9433+4	4746  B7      		or	a			; directory buffer changed ?
1731: 9437+5+6	4747  C8      		ret	z			; nope, quit
1732:				
1733:				;	  Subroutine write dirsector buffer
1734:				;	     Inputs  
1735:				;	     Outputs ________________________ 
1736:				
1737: 9442+17	4748  CD76F2  	A4748:	call	XF276
1738: 9459+4	474B  AF      		xor	a
1739: 9463+13	474C  323CF2  		ld	(YF23C),a		; directory buffer unchanged
1740: 9476+13	474F  3A45F2  		ld	a,(YF245)		; current dirsector (offset)
1741: 9489+17	4752  CD0D46  		call	A460D			; setup dirsector parameters
1742:				
1743:				;	  Subroutine write sectors with DOS error handling
1744:				;	     Inputs  
1745:				;	     Outputs ________________________ 
1746:				
1747: 9506+17	4755  CD79F2  	A4755:	call	XF279
1748: 9523+7	4758  3E01    		ld	a,1
1749: 9530+13	475A  32FFF2  		ld	(YF2FF),a		; flag write disk operation
1750: 9543+19	475D  DD7E00  		ld	a,(ix+000H)		; driveid
1751: 9562+19	4760  DD4E01  		ld	c,(ix+001H)		; mediadescriptor
1752: 9581+11	4763  E5      		push	hl
1753: 9592+11	4764  D5      		push	de
1754: 9603+11	4765  C5      		push	bc
1755: 9614+17	4766  CD6960  		call	A6054			; write disksector
1756: 9631+10	4769  D1      		pop	de
1757: 9641+4	476A  4A      		ld	c,d
1758: 9645+10	476B  D1      		pop	de
1759: 9655+10	476C  E1      		pop	hl
1760: 9665+5+6	476D  D0      		ret	nc			; no error, quit
1761: 9670+17	476E  CDE846  		call	A46E8			; adjust parameters to restart at error sector and start diskerror handler
1762: 9687+4	4771  3D      		dec	a
1763: 9691+7+5	4772  28E1    		jr	z,A4755			; RETRY, try again
1764: 9698+10	4774  C9      		ret				; IGNORE, quit
1765:				
1766:				;	  Subroutine BDOS 14 (read next record)
1767:				;	     Inputs  
1768:				;	     Outputs ________________________ 
1769:				
1770: 9708+17	4775  CDF84E  	A4775:	call	A4EF8			; get recordnumber from CR,EX and S2 fields
1771: 9725+17	4778  CD234B  		call	A4B23			; read record
1772: 9742+12	477B  1806    		jr	A4783			; update sequencial fields
1773:				
1774:				;	  Subroutine BDOS 15 (write next record)
1775:				;	     Inputs  
1776:				;	     Outputs ________________________ 
1777:				
1778: 9754+17	477D  CDF84E  	A477D:	call	A4EF8			; get recordnumber from CR,EX and S2 fields
1779: 9771+17	4780  CDA34C  		call	A4CA3			; write record
1780: 9788+17	4783  CD6A48  	A4783:	call	A486A			; increase recordnumber if something was read/written
1781: 9805+12	4786  1814    		jr	A479C			; update CR,EX and S2 field
1782:				
1783:				;	  Subroutine BDOS 21 (random access read record)
1784:				;	     Inputs  
1785:				;	     Outputs ________________________ 
1786:				
1787: 9817+17	4788  CD5748  	A4788:	call	A4857			; get recordnumber from Rx fields, 1 record
1788: 9834+17	478B  CD234B  		call	A4B23			; read record
1789: 9851+12	478E  1809    		jr	A4799			; update Rx, CR,EX and S2 field
1790:				;
1791: 9863+15	4790  FDE5    	A4790:	push	iy
1792: 9878+10	4792  D1      		pop	de
1793:				
1794:				;	  Subroutine BDOS 22 (random access write record)
1795:				;	     Inputs  
1796:				;	     Outputs ________________________ 
1797:				
1798: 9888+17	4793  CD5748  	A4793:	call	A4857			; get recordnumber from Rx fields, 1 record
1799: 9905+17	4796  CDA34C  		call	A4CA3			; write record
1800: 9922+17	4799  CD4448  	A4799:	call	A4844			; update Rx fields
1801:				
1802: 9939+4	479C  7D      	A479C:	ld	a,l
1803: 9943+7	479D  E67F    		and	07FH
1804: 9950+19	479F  FD7720  		ld	(iy+020H),a		; CR
1805: 9969+8	47A2  CB25    		sla	l
1806: 9977+8	47A4  CB14    		rl	h
1807: 9985+19	47A6  FD740C  		ld	(iy+00CH),h		; S2
1808:10004+8	47A9  CB13    		rl	e
1809:10012+19	47AB  FD730E  		ld	(iy+00EH),e		; EX
1810:10031+13	47AE  3ADEF2  		ld	a,(YF2DE)		; result recordoperation
1811:10044+10	47B1  C9      		ret
1812:				
1813:				;	  Subroutine BDOS 27 (random block read)
1814:				;	     Inputs  
1815:				;	     Outputs ________________________ 
1816:				
1817:10054+4	47B2  AF      	A47B2:	xor	a
1818:10058+13	47B3  3206F3  		ld	(YF306),a		; no CP/M call
1819:10071+17	47B6  CD5A48  		call	A485A			; get random record number
1820:10088+17	47B9  CD234B  		call	A4B23			; read record(s)
1821:10105+12	47BC  180A    		jr	A47C8
1822:				
1823:				;	  Subroutine BDOS 26 (random block write)
1824:				;	     Inputs  
1825:				;	     Outputs ________________________ 
1826:				
1827:10117+4	47BE  AF      	A47BE:	xor	a
1828:10121+13	47BF  3206F3  		ld	(YF306),a		; no CP/M call
1829:10134+17	47C2  CD5A48  		call	A485A			; get random record number
1830:10151+17	47C5  CDA34C  		call	A4CA3			; write record(s)
1831:10168+17	47C8  CD6A48  	A47C8:	call	A486A			; increase recordnumber if something was read/written
1832:10185+17	47CB  CD4448  		call	A4844			; update Rx fields
1833:10202+4	47CE  69      		ld	l,c
1834:10206+4	47CF  60      		ld	h,b
1835:10210+10	47D0  C9      		ret
1836:				
1837:				;	  Subroutine BDOS 28 (write random with zero fill)
1838:				;	     Inputs  
1839:				;	     Outputs ________________________ 
1840:				
1841:10220+11	47D1  D5      	A47D1:	push	de
1842:10231+14	47D2  FDE1    		pop	iy
1843:10245+19	47D4  FD7E10  		ld	a,(iy+010H)
1844:10264+19	47D7  FD4E11  		ld	c,(iy+011H)
1845:10283+19	47DA  FD4612  		ld	b,(iy+012H)
1846:10302+19	47DD  FD5E13  		ld	e,(iy+013H)
1847:10321+4	47E0  87      		add	a,a
1848:10325+8	47E1  CB11    		rl	c
1849:10333+8	47E3  CB10    		rl	b
1850:10341+8	47E5  CB13    		rl	e
1851:10349+4	47E7  B7      		or	a
1852:10353+7+5	47E8  2806    		jr	z,A47F0
1853:10360+6	47EA  03      		inc	bc
1854:10366+4	47EB  78      		ld	a,b
1855:10370+4	47EC  B1      		or	c
1856:10374+7+5	47ED  2001    		jr	nz,A47F0
1857:10381+4	47EF  1C      		inc	e
1858:10385+19	47F0  FD6E21  	A47F0:	ld	l,(iy+021H)
1859:10404+19	47F3  FD6622  		ld	h,(iy+022H)
1860:10423+15	47F6  ED42    		sbc	hl,bc
1861:10438+7+5	47F8  2896    		jr	z,A4790
1862:10445+19	47FA  FD7E23  		ld	a,(iy+023H)
1863:10464+4	47FD  9B      		sbc	a,e
1864:10468+7+5	47FE  3890    		jr	c,A4790
1865:10475+11	4800  E5      		push	hl
1866:10486+17	4801  CD9047  		call	A4790
1867:10503+10	4804  D1      		pop	de
1868:10513+4	4805  B7      		or	a
1869:10517+5+6	4806  C0      		ret	nz
1870:10522+16	4807  2A3DF2  		ld	hl,(YF23D)		; transferadres
1871:10538+11	480A  E5      		push	hl
1872:10549+16	480B  2A51F3  		ld	hl,(YF351)
1873:10565+16	480E  223DF2  		ld	(YF23D),hl		; tempory use dirsector buffer
1874:10581+7	4811  0680    		ld	b,080H
1875:10588+7	4813  77      	A4813:	ld	(hl),a
1876:10595+6	4814  23      		inc	hl
1877:10601+8+5	4815  10FC    		djnz	A4813
1878:10609+4	4817  3D      		dec	a
1879:10613+13	4818  3246F2  		ld	(YF246),a		; invalid dirsector buffer
1880:10626+19	481B  FD6E21  		ld	l,(iy+021H)
1881:10645+19	481E  FD6622  		ld	h,(iy+022H)
1882:10664+15	4821  ED52    		sbc	hl,de
1883:10679+4	4823  4D      		ld	c,l
1884:10683+4	4824  44      		ld	b,h
1885:10687+4	4825  EB      		ex	de,hl
1886:10691+7	4826  1600    		ld	d,000H
1887:10698+19	4828  FD7E23  		ld	a,(iy+023H)
1888:10717+4	482B  9A      		sbc	a,d
1889:10721+4	482C  5F      		ld	e,a
1890:10725+11	482D  E5      	A482D:	push	hl
1891:10736+10	482E  210100  		ld	hl,00001H
1892:10746+17	4831  CDA34C  		call	A4CA3			; write record
1893:10763+17	4834  CD6A48  		call	A486A			; increase recordnumber if something was writen
1894:10780+4	4837  4D      		ld	c,l
1895:10784+4	4838  44      		ld	b,h
1896:10788+10	4839  E1      		pop	hl
1897:10798+6	483A  2B      		dec	hl
1898:10804+4	483B  7C      		ld	a,h
1899:10808+4	483C  B5      		or	l
1900:10812+7+5	483D  20EE    		jr	nz,A482D
1901:10819+10	483F  E1      		pop	hl
1902:10829+16	4840  223DF2  		ld	(YF23D),hl		; restore transferadres
1903:10845+10	4843  C9      		ret
1904:				;
1905:10855+13	4844  3ADEF2  	A4844:	ld	a,(YF2DE)		; result recordoperation
1906:10868+19	4847  FD7521  		ld	(iy+021H),l
1907:10887+19	484A  FD7422  		ld	(iy+022H),h
1908:10906+19	484D  FD7323  		ld	(iy+023H),e
1909:10925+4	4850  14      		inc	d
1910:10929+4	4851  15      		dec	d
1911:10933+5+6	4852  C8      		ret	z
1912:10938+19	4853  FD7224  		ld	(iy+024H),d
1913:10957+10	4856  C9      		ret
1914:				;
1915:10967+10	4857  210100  	A4857:	ld	hl,1			; 1 record
1916:10977+11	485A  D5      	A485A:	push	de
1917:10988+14	485B  FDE1    		pop	iy
1918:11002+19	485D  FD4E21  		ld	c,(iy+021H)		; R0
1919:11021+19	4860  FD4622  		ld	b,(iy+022H)		; R1
1920:11040+19	4863  FD5E23  		ld	e,(iy+023H)		; R2
1921:11059+19	4866  FD5624  		ld	d,(iy+024H)		; R3
1922:11078+10	4869  C9      		ret
1923:				;
1924:11088+5+6	486A  C8      	A486A:	ret	z
1925:11093+6	486B  23      		inc	hl
1926:11099+4	486C  7C      		ld	a,h
1927:11103+4	486D  B5      		or	l
1928:11107+5+6	486E  C0      		ret	nz
1929:11112+6	486F  13      		inc	de
1930:11118+10	4870  C9      		ret
1931:				;
1932:11128+10	4871  E1      	A4871:	pop	hl
1933:11138+4	4872  69      		ld	l,c
1934:11142+4	4873  60      		ld	h,b
1935:11146+7	4874  3E01    		ld	a,1
1936:11153+13	4876  32DEF2  		ld	(YF2DE),a		; error in recordoperation
1937:11166+4	4879  AF      		xor	a
1938:11170+4	487A  4F      		ld	c,a
1939:11174+4	487B  47      		ld	b,a
1940:11178+10	487C  C9      		ret
1941:				;
1942:11188+16	487D  22E8F2  	A487D:	ld	(YF2E8),hl		; number of records requested
1943:11204+20	4880  ED43E4F2		ld	(YF2E4+0),bc
1944:11224+20	4884  ED53E6F2		ld	(YF2E4+2),de		; startrecord
1945:11244+19	4888  FD7E00  		ld	a,(iy+000H)
1946:11263+17	488B  CD2744  		call	A4427			; validate fcb driveid
1947:11280+7+5	488E  38E1    		jr	c,A4871
1948:11287+10	4890  118000  		ld	de,00080H
1949:11297+13	4893  3A06F3  		ld	a,(YF306)
1950:11310+4	4896  B7      		or	a			; Random Block ?
1951:11314+7+5	4897  200F    		jr	nz,A48A8
1952:11321+19	4899  FD7E0E  		ld	a,(iy+00EH)
1953:11340+19	489C  FD560F  		ld	d,(iy+00FH)		; yep, use user set recordsize
1954:11359+4	489F  5F      		ld	e,a
1955:11363+4	48A0  B2      		or	d			; zero recordsize ?
1956:11367+7+5	48A1  2005    		jr	nz,A48A8
1957:11374+7	48A3  1E80    		ld	e,080H
1958:11381+19	48A5  FD730E  		ld	(iy+00EH),e		; yep, use 128 bytes default
1959:11400+4	48A8  14      	A48A8:	inc	d
1960:11404+4	48A9  15      		dec	d
1961:11408+7+5	48AA  2005    		jr	nz,A48B1
1962:11415+4	48AC  7B      		ld	a,e
1963:11419+7	48AD  FE40    		cp	040H
1964:11426+7+5	48AF  3804    		jr	c,A48B5
1965:11433+4	48B1  AF      	A48B1:	xor	a
1966:11437+13	48B2  32E7F2  		ld	(YF2E4+3),a		; make sure it's a valid record
1967:11450+16	48B5  2A3DF2  	A48B5:	ld	hl,(YF23D)
1968:11466+16	48B8  22E2F2  		ld	(YF2E2),hl		; current transferadres
1969:11482+4	48BB  AF      		xor	a
1970:11486+13	48BC  32DEF2  		ld	(YF2DE),a		; no error in recordoperation
1971:11499+13	48BF  32DFF2  		ld	(YF2DF),a		; flag do not increase sector
1972:11512+20	48C2  ED4BE8F2		ld	bc,(YF2E8)		; number of records requested
1973:11532+17	48C6  CD1649  		call	A4916			; * recordsize
1974:11549+19	48C9  FD7E18  		ld	a,(iy+018H)
1975:11568+4	48CC  B7      		or	a
1976:11572+5+6	48CD  F8      		ret	m			; DOS device, quit
1977:11577+11	48CE  C5      		push	bc
1978:11588+17	48CF  CD5545  		call	A4555			; get pointer to DPB of current drive
1979:11605+20	48D2  ED4BE4F2		ld	bc,(YF2E4+0)
1980:11625+17	48D6  CD1649  		call	A4916
1981:11642+20	48D9  ED43F4F2		ld	(YF2F4+0),bc
1982:11662+11	48DD  C5      		push	bc
1983:11673+20	48DE  ED4BE6F2		ld	bc,(YF2E4+2)
1984:11693+17	48E2  CD1C49  		call	A491C
1985:11710+20	48E5  ED43F6F2		ld	(YF2F4+2),bc		; startbyte = startrecord * recordsize
1986:11730+4	48E9  60      		ld	h,b
1987:11734+4	48EA  69      		ld	l,c
1988:11738+10	48EB  C1      		pop	bc			; BCHL = startbyte
1989:11748+19	48EC  DD5E02  		ld	e,(ix+002H)
1990:11767+19	48EF  DD5603  		ld	d,(ix+003H)
1991:11786+17	48F2  CD3249  		call	A4932			; / sectorsize
1992:11803+16	48F5  22F2F2  		ld	(YF2F2),hl		; offset in sector of startbyte
1993:11819+20	48F8  ED43EEF2		ld	(YF2EE),bc		; relative sector of startbyte
1994:11839+19	48FC  DD7E06  		ld	a,(ix+006H)
1995:11858+4	48FF  A1      		and	c			; clustermask
1996:11862+13	4900  32DDF2  		ld	(YF2DD),a		; current relative sector in cluster (of startbyte)
1997:11875+19	4903  DD7E07  		ld	a,(ix+007H)		; clustershift
1998:11894+4	4906  3D      	A4906:	dec	a
1999:11898+7+5	4907  2806    		jr	z,A490F
2000:11905+8	4909  CB38    		srl	b
2001:11913+8	490B  CB19    		rr	c
2002:11921+12	490D  18F7    		jr	A4906
2003:				;
2004:11933+20	490F  ED43ECF2	A490F:	ld	(YF2EC),bc		; relative cluster of startbyte
2005:11953+10	4913  C1      		pop	bc
2006:11963+4	4914  AF      		xor	a
2007:11967+10	4915  C9      		ret
2008:				;
2009:11977+17	4916  CD7CF2  	A4916:	call	XF27C
2010:11994+10	4919  210000  		ld	hl,00000H
2011:12004+4	491C  78      	A491C:	ld	a,b
2012:12008+7	491D  0611    		ld	b,011H
2013:12015+12	491F  1807    		jr	A4928
2014:				;
2015:12027+7+5	4921  3001    	A4921:	jr	nc,A4924
2016:12034+11	4923  19      		add	hl,de
2017:12045+8	4924  CB1C    	A4924:	rr	h
2018:12053+8	4926  CB1D    		rr	l
2019:12061+4	4928  1F      	A4928:	rra
2020:12065+8	4929  CB19    		rr	c
2021:12073+8+5	492B  10F4    		djnz	A4921
2022:12081+4	492D  47      		ld	b,a
2023:12085+10	492E  C9      		ret
2024:				;
2025:     -	492F          	DIV16:
2026:12095+10	492F  210000  	A492F:	ld	hl,00000H
2027:12105+17	4932  CD7FF2  	A4932:	call	XF27F
2028:12122+4	4935  78      		ld	a,b
2029:12126+7	4936  0610    		ld	b,010H
2030:12133+8	4938  CB11    		rl	c
2031:12141+4	493A  17      		rla
2032:12145+8	493B  CB15    	A493B:	rl	l
2033:12153+8	493D  CB14    		rl	h
2034:12161+7+5	493F  380D    		jr	c,A494E
2035:12168+15	4941  ED52    		sbc	hl,de
2036:12183+7+5	4943  3001    		jr	nc,A4946
2037:12190+11	4945  19      		add	hl,de
2038:12201+4	4946  3F      	A4946:	ccf
2039:12205+8	4947  CB11    	A4947:	rl	c
2040:12213+4	4949  17      		rla
2041:12217+8+5	494A  10EF    		djnz	A493B
2042:12225+4	494C  47      		ld	b,a
2043:12229+10	494D  C9      		ret
2044:				;
2045:12239+4	494E  B7      	A494E:	or	a
2046:12243+15	494F  ED52    		sbc	hl,de
2047:12258+12	4951  18F4    		jr	A4947
2048:				;
2049:12270+4	4953  60      	A4953:	ld	h,b
2050:12274+4	4954  69      		ld	l,c			; bytes to transfer
2051:12278+20	4955  ED4BF2F2		ld	bc,(YF2F2)		; offset in sector startbyte
2052:12298+4	4959  78      		ld	a,b
2053:12302+4	495A  B1      		or	c
2054:12306+4	495B  5F      		ld	e,a
2055:12310+4	495C  57      		ld	d,a
2056:12314+7+5	495D  2813    		jr	z,A4972			; at start sector, no partial start
2057:12321+19	495F  DD5E02  		ld	e,(ix+002H)
2058:12340+19	4962  DD5603  		ld	d,(ix+003H)
2059:12359+4	4965  EB      		ex	de,hl			; sectorsize
2060:12363+15	4966  ED42    		sbc	hl,bc
2061:12378+4	4968  EB      		ex	de,hl			; bytes left in sector
2062:12382+15	4969  ED52    		sbc	hl,de			; enough ?
2063:12397+7+5	496B  3005    		jr	nc,A4972		; nop, get what you can
2064:12404+11	496D  19      		add	hl,de
2065:12415+4	496E  EB      		ex	de,hl
2066:12419+10	496F  210000  		ld	hl,00000H
2067:12429+20	4972  ED53F8F2	A4972:	ld	(YF2F8),de		; bytes to transfer from partial sector
2068:12449+4	4976  4D      		ld	c,l
2069:12453+4	4977  44      		ld	b,h			; bytes left after partial sector transfer
2070:12457+19	4978  DD5E02  		ld	e,(ix+002H)
2071:12476+19	497B  DD5603  		ld	d,(ix+003H)
2072:12495+17	497E  CD2F49  		call	A492F			; / sectorsize
2073:12512+16	4981  22FAF2  		ld	(YF2FA),hl		; partial bytes in endsector
2074:12528+20	4984  ED43FCF2		ld	(YF2FC),bc		; hole sectors of transfer
2075:12548+10	4988  C9      		ret
2076:				;
2077:12558+17	4989  CD82F2  	A4989:	call	XF282
2078:12575+19	498C  FD6E1C  		ld	l,(iy+01CH)
2079:12594+19	498F  FD661D  		ld	h,(iy+01DH)		; current cluster of file
2080:12613+19	4992  FD5E1E  		ld	e,(iy+01EH)
2081:12632+19	4995  FD561F  		ld	d,(iy+01FH)		; current relative cluster of file
2082:12651+4	4998  7D      		ld	a,l
2083:12655+4	4999  B4      		or	h
2084:12659+7+5	499A  2833    		jr	z,A49CF			; file has no start cluster,
2085:12666+11	499C  C5      		push	bc
2086:12677+4	499D  79      		ld	a,c
2087:12681+4	499E  93      		sub	e
2088:12685+4	499F  4F      		ld	c,a
2089:12689+4	49A0  78      		ld	a,b
2090:12693+4	49A1  9A      		sbc	a,d
2091:12697+4	49A2  47      		ld	b,a
2092:12701+7+5	49A3  300B    		jr	nc,A49B0		; requested cluster behind current, search from current cluster
2093:12708+10	49A5  C1      		pop	bc
2094:12718+10	49A6  110000  		ld	de,0			; relative cluster 0
2095:12728+19	49A9  FD6E1A  		ld	l,(iy+01AH)
2096:12747+19	49AC  FD661B  		ld	h,(iy+01BH)		; start cluster of file
2097:12766+11	49AF  F5      		push	af
2098:12777+10	49B0  F1      	A49B0:	pop	af
2099:12787+17	49B1  CD85F2  	A49B1:	call	XF285
2100:12804+4	49B4  78      		ld	a,b
2101:12808+4	49B5  B1      		or	c
2102:12812+5+6	49B6  C8      		ret	z
2103:12817+11	49B7  D5      		push	de
2104:12828+11	49B8  E5      		push	hl
2105:12839+17	49B9  CDF441  		call	A41F4			; get FAT entry content
2106:12856+10	49BC  D1      		pop	de
2107:12866+4	49BD  7C      		ld	a,h
2108:12870+7	49BE  FE0F    		cp	00FH
2109:12877+7+5	49C0  3805    		jr	c,A49C7
2110:12884+4	49C2  7D      		ld	a,l
2111:12888+7	49C3  FEF8    		cp	0F8H
2112:12895+7+5	49C5  3005    		jr	nc,A49CC		; end cluster
2113:12902+10	49C7  D1      	A49C7:	pop	de
2114:12912+6	49C8  13      		inc	de
2115:12918+6	49C9  0B      		dec	bc
2116:12924+12	49CA  18E5    		jr	A49B1
2117:				;
2118:12936+4	49CC  EB      	A49CC:	ex	de,hl
2119:12940+10	49CD  D1      		pop	de
2120:12950+10	49CE  C9      		ret
2121:				;
2122:12960+6	49CF  03      	A49CF:	inc	bc			; BC<>0 (means not found)
2123:12966+6	49D0  1B      		dec	de
2124:12972+10	49D1  C9      		ret
2125:				;
2126:12982+13	49D2  32E0F2  	A49D2:	ld	(YF2E0),a
2127:12995+16	49D5  2AECF2  		ld	hl,(YF2EC)		; relative cluster
2128:13011+13	49D8  3ADDF2  		ld	a,(YF2DD)		; current relative sector in cluster
2129:13024+17	49DB  CDDB4E  		call	A4EDB			; get sectornumber of cluster
2130:13041+4	49DE  EB      		ex	de,hl
2131:13045+16	49DF  2A3FF2  		ld	hl,(YF23F)
2132:13061+15	49E2  ED52    		sbc	hl,de			; is it currently in the datasector buffer ?
2133:13076+7+5	49E4  200A    		jr	nz,A49F0		; nope, get it
2134:13083+13	49E6  3AE1F2  		ld	a,(YF2E1)		; current driveid
2135:13096+4	49E9  6F      		ld	l,a
2136:13100+13	49EA  3A41F2  		ld	a,(YF241)
2137:13113+4	49ED  BD      		cp	l			; same drive as owner datasector buffer ?
2138:13117+7+5	49EE  282B    		jr	z,A4A1B			; yep,
2139:13124+11	49F0  D5      	A49F0:	push	de
2140:13135+15	49F1  DDE5    		push	ix
2141:13150+17	49F3  CD2D47  		call	A472D			; write datasector buffer when needed
2142:13167+14	49F6  DDE1    		pop	ix
2143:13181+10	49F8  D1      		pop	de
2144:13191+13	49F9  3AE0F2  		ld	a,(YF2E0)
2145:13204+4	49FC  B7      		or	a			; real or fake read ?
2146:13208+7+5	49FD  200E    		jr	nz,A4A0D		; fake read
2147:13215+4	49FF  3D      		dec	a
2148:13219+13	4A00  3241F2  		ld	(YF241),a
2149:13232+16	4A03  2A4FF3  		ld	hl,(YF34F)		; datasector buffer
2150:13248+7	4A06  0601    		ld	b,1			; 1 sector
2151:13255+11	4A08  D5      		push	de
2152:13266+17	4A09  CDC546  		call	A46C5			; read sector with DOS error handling
2153:13283+10	4A0C  D1      		pop	de
2154:13293+20	4A0D  ED533FF2	A4A0D:	ld	(YF23F),de		; current datasector
2155:13313+13	4A11  3AE1F2  		ld	a,(YF2E1)		; current driveid
2156:13326+13	4A14  3241F2  		ld	(YF241),a		; set owner datasector buffer
2157:13339+20	4A17  DD2243F2		ld	(YF243),ix		; save DPB pointer
2158:13359+7	4A1B  3E01    	A4A1B:	ld	a,1
2159:13366+13	4A1D  32DFF2  		ld	(YF2DF),a		; flag do increase sector
2160:13379+16	4A20  2AE2F2  		ld	hl,(YF2E2)
2161:13395+11	4A23  E5      		push	hl
2162:13406+20	4A24  ED4BF8F2		ld	bc,(YF2F8)
2163:13426+11	4A28  09      		add	hl,bc
2164:13437+16	4A29  22E2F2  		ld	(YF2E2),hl		; update current transferadres
2165:13453+16	4A2C  2A4FF3  		ld	hl,(YF34F)		; datasector buffer
2166:13469+20	4A2F  ED5BF2F2		ld	de,(YF2F2)
2167:13489+11	4A33  19      		add	hl,de
2168:13500+10	4A34  D1      		pop	de
2169:13510+10	4A35  C9      		ret
2170:				;
2171:13520+17	4A36  CD88F2  	A4A36:	call	XF288
2172:13537+16	4A39  2AF8F2  		ld	hl,(YF2F8)
2173:13553+4	4A3C  7C      		ld	a,h
2174:13557+4	4A3D  B5      		or	l			; partial sector read
2175:13561+5+6	4A3E  C8      		ret	z			; nope, quit
2176:13566+4	4A3F  AF      		xor	a			; real read
2177:13570+17	4A40  CDD249  		call	A49D2			; read datasector
2178:13587+10	4A43  C3D9F1  		jp	XF1D9			; transfer to DOS memory
2179:				;
2180:13597+17	4A46  CD8BF2  	A4A46:	call	XF28B
2181:13614+16	4A49  2AF8F2  		ld	hl,(YF2F8)
2182:13630+4	4A4C  7C      		ld	a,h
2183:13634+4	4A4D  B5      		or	l			; partial start ?
2184:13638+5+6	4A4E  C8      		ret	z			; nop, quit
2185:13643+16	4A4F  2AEEF2  		ld	hl,(YF2EE)
2186:13659+6	4A52  23      		inc	hl
2187:13665+16	4A53  22EEF2  		ld	(YF2EE),hl		; update relative sector of startbyte
2188:13681+4	4A56  AF      		xor	a
2189:13685+4	4A57  EB      		ex	de,hl
2190:13689+16	4A58  2AF0F2  		ld	hl,(YF2F0)
2191:13705+15	4A5B  ED52    		sbc	hl,de			; sector behind end of file ?
2192:13720+4	4A5D  1F      		rra				; if yes, fake read
2193:13724+17	4A5E  CDD249  		call	A49D2			; read datasector
2194:13741+4	4A61  EB      		ex	de,hl
2195:13745+17	4A62  CDD9F1  		call	XF1D9			; transfer from DOS memory
2196:13762+7	4A65  3E01    		ld	a,1
2197:13769+13	4A67  3242F2  		ld	(YF242),a		; flag datasector changed
2198:13782+10	4A6A  C9      		ret
2199:				;
2200:13792+10	4A6B  210000  	A4A6B:	ld	hl,0
2201:13802+16	4A6E  22F2F2  		ld	(YF2F2),hl
2202:13818+16	4A71  2AFAF2  		ld	hl,(YF2FA)
2203:13834+16	4A74  22F8F2  		ld	(YF2F8),hl
2204:13850+4	4A77  7C      		ld	a,h
2205:13854+4	4A78  B5      		or	l
2206:13858+4	4A79  37      		scf
2207:13862+5+6	4A7A  C8      		ret	z
2208:				
2209:13867+13	4A7B  3ADFF2  	A4A7B:	ld	a,(YF2DF)
2210:13880+4	4A7E  B7      		or	a			; flag do not increase
2211:13884+5+6	4A7F  C8      		ret	z			; yep, quit
2212:13889+13	4A80  3ADDF2  		ld	a,(YF2DD)
2213:13902+19	4A83  DDBE06  		cp	(ix+006H)		; clustermask
2214:13921+7+5	4A86  381A    		jr	c,A4AA2			; still sectors left in this cluster, increase relative sector in cluster
2215:13928+20	4A88  ED5BECF2		ld	de,(YF2EC)		; current cluster of file
2216:13948+10	4A8C  21F70F  		ld	hl,00FF7H
2217:13958+15	4A8F  ED52    		sbc	hl,de
2218:13973+5+6	4A91  D8      		ret	c			; is the end cluster, quit
2219:13978+4	4A92  EB      		ex	de,hl
2220:13982+17	4A93  CDF441  		call	A41F4			; get FAT entry content
2221:13999+16	4A96  22ECF2  		ld	(YF2EC),hl		; new current cluster of file
2222:14015+16	4A99  2AEAF2  		ld	hl,(YF2EA)
2223:14031+6	4A9C  23      		inc	hl
2224:14037+16	4A9D  22EAF2  		ld	(YF2EA),hl		; new current relative cluster of file
2225:14053+7	4AA0  3EFF    		ld	a,0FFH			; relative sector in cluster 0
2226:14060+4	4AA2  3C      	A4AA2:	inc	a
2227:14064+13	4AA3  32DDF2  		ld	(YF2DD),a
2228:14077+4	4AA6  B7      		or	a
2229:14081+10	4AA7  C9      		ret
2230:				;
2231:14091+7	4AA8  7E      	A4AA8:	ld	a,(hl)
2232:14098+16	4AA9  EDA0    		ldi
2233:14114+7	4AAB  FE0D    		cp	00DH
2234:14121+7+5	4AAD  2002    		jr	nz,A4AB1
2235:14128+10	4AAF  360A    		ld	(hl),00AH
2236:14138+7	4AB1  FE0A    	A4AB1:	cp	00AH
2237:14145+7+5	4AB3  2815    		jr	z,A4ACA
2238:14152+4	4AB5  78      		ld	a,b
2239:14156+4	4AB6  B1      		or	c
2240:14160+7+5	4AB7  20EF    		jr	nz,A4AA8
2241:14167+16	4AB9  2200F3  	A4AB9:	ld	(YF300),hl
2242:14183+20	4ABC  ED53E2F2	A4ABC:	ld	(YF2E2),de		; update current transferadres
2243:14203+10	4AC0  C2E24B  		jp	nz,A4BE2
2244:14213+23	4AC3  FDCB18B6		res	6,(iy+018H)
2245:14236+10	4AC7  C3E24B  		jp	A4BE2
2246:				;
2247:14246+17	4ACA  CDA853  	A4ACA:	call	A53A8			; console output
2248:14263+10	4ACD  210000  		ld	hl,00000H
2249:14273+4	4AD0  79      		ld	a,c
2250:14277+4	4AD1  B0      		or	b
2251:14281+7+5	4AD2  2025    		jr	nz,A4AF9
2252:14288+4	4AD4  3C      		inc	a
2253:14292+12	4AD5  18E2    		jr	A4AB9
2254:				
2255:				;	  Subroutine read record for dos devices
2256:				;	     Inputs  
2257:				;	     Outputs ________________________ 
2258:				
2259:14304+20	4AD7  ED5BE2F2	A4AD7:	ld	de,(YF2E2)		; current transferadres
2260:14324+4	4ADB  3C      		inc	a
2261:14328+7+5	4ADC  2814    		jr	z,A4AF2			; CON, handle
2262:14335+4	4ADE  3C      		inc	a
2263:14339+7+5	4ADF  20DB    		jr	nz,A4ABC		; PRN, quit
2264:				
2265:				; read record AUX
2266:				
2267:14346+17	4AE1  CD6E54  	A4AE1:	call	A546E			; auxiliary input
2268:14363+7	4AE4  12      		ld	(de),a
2269:14370+6	4AE5  13      		inc	de
2270:14376+7	4AE6  FE1A    		cp	01AH
2271:14383+7+5	4AE8  28D2    		jr	z,A4ABC			; CTRL-Z, 
2272:14390+6	4AEA  0B      		dec	bc
2273:14396+4	4AEB  78      		ld	a,b
2274:14400+4	4AEC  B1      		or	c			; all bytes done ?
2275:14404+7+5	4AED  20F2    		jr	nz,A4AE1		; nope, next byte
2276:14411+4	4AEF  3C      		inc	a
2277:14415+12	4AF0  18CA    		jr	A4ABC
2278:				
2279:				; read record CON
2280:				
2281:14427+16	4AF2  2A00F3  	A4AF2:	ld	hl,(YF300)
2282:14443+4	4AF5  7C      		ld	a,h
2283:14447+4	4AF6  B5      		or	l
2284:14451+7+5	4AF7  20AF    		jr	nz,A4AA8
2285:				
2286:				; VERSION 1.1 CHANGE
2287:				;
2288:				; CHANGED, BUGFIX
2289:				; ld hl,00080H
2290:				;
2291:				
2292:14458+10	4AF9  217F00  	A4AF9:	ld	hl,0007FH
2293:14468+13	4AFC  3AD9F4  		ld	a,(KBUF+186)
2294:14481+4	4AFF  BD      		cp	l
2295:14485+7+5	4B00  2803    		jr	z,A4B05
2296:14492+16	4B02  22D9F4  		ld	(KBUF+186),hl
2297:14508+11	4B05  C5      	A4B05:	push	bc
2298:14519+11	4B06  D5      		push	de
2299:14530+10	4B07  11D9F4  		ld	de,KBUF+186
2300:14540+17	4B0A  CDE050  		call	A50E0			; BDOS 0A (buffered console input)
2301:14557+10	4B0D  D1      		pop	de
2302:14567+10	4B0E  C1      		pop	bc
2303:14577+10	4B0F  21DBF4  		ld	hl,KBUF+186+2
2304:14587+7	4B12  7E      		ld	a,(hl)
2305:14594+7	4B13  FE1A    		cp	01AH
2306:14601+7+5	4B15  2091    		jr	nz,A4AA8
2307:14608+7	4B17  12      		ld	(de),a
2308:14615+6	4B18  13      		inc	de
2309:14621+7	4B19  3E0A    		ld	a,00AH			; LF
2310:14628+17	4B1B  CDA853  		call	A53A8			; console output
2311:14645+4	4B1E  AF      		xor	a
2312:14649+4	4B1F  67      		ld	h,a
2313:14653+4	4B20  6F      		ld	l,a
2314:14657+12	4B21  1896    		jr	A4AB9
2315:				
2316:				;	  Subroutine read record
2317:				;	     Inputs  DEBC = recordnumber, HL = number of records
2318:				;	     Outputs DEHL = last record done, BC = number of records done
2319:				
2320:14669+17	4B23  CD7D48  	A4B23:	call	A487D			; initialize record info
2321:14686+10	4B26  FAD74A  		jp	m,A4AD7			; dos device, special action
2322:14696+19	4B29  FD6E10  		ld	l,(iy+010H)
2323:14715+19	4B2C  FD6611  		ld	h,(iy+011H)
2324:14734+20	4B2F  ED5BF4F2		ld	de,(YF2F4+0)
2325:14754+4	4B33  B7      		or	a
2326:14758+15	4B34  ED52    		sbc	hl,de
2327:14773+11	4B36  E5      		push	hl
2328:14784+19	4B37  FD6E12  		ld	l,(iy+012H)
2329:14803+19	4B3A  FD6613  		ld	h,(iy+013H)
2330:14822+20	4B3D  ED5BF6F2		ld	de,(YF2F4+2)
2331:14842+15	4B41  ED52    		sbc	hl,de
2332:14857+10	4B43  E1      		pop	hl
2333:14867+10	4B44  DA974C  		jp	c,A4C97			; startbyte behind end of file, quit with nothing done
2334:14877+7+5	4B47  200D    		jr	nz,A4B56		; startbyte at least 65536 bytes from the end of file, go get it
2335:14884+4	4B49  7C      		ld	a,h
2336:14888+4	4B4A  B5      		or	l
2337:14892+10	4B4B  CA974C  		jp	z,A4C97			; startbyte is at end of file, quit with nothing done
2338:14902+11	4B4E  E5      		push	hl
2339:14913+15	4B4F  ED42    		sbc	hl,bc			; requested number of bytes past file ?
2340:14928+10	4B51  E1      		pop	hl
2341:14938+7+5	4B52  3002    		jr	nc,A4B56		; nope, go get it
2342:14945+4	4B54  44      		ld	b,h
2343:14949+4	4B55  4D      		ld	c,l			; only read number of bytes until the end of file
2344:14953+17	4B56  CD8EF2  	A4B56:	call	XF28E
2345:14970+17	4B59  CD5349  		call	A4953			; calculate partial sector transfers
2346:14987+20	4B5C  ED4BECF2		ld	bc,(YF2EC)		; relative cluster
2347:15007+17	4B60  CD8949  		call	A4989			; get absolute cluster
2348:15024+4	4B63  78      		ld	a,b
2349:15028+4	4B64  B1      		or	c			; found ?
2350:15032+10	4B65  C2974C  		jp	nz,A4C97		; nope, quit with nothing done
2351:15042+16	4B68  22ECF2  		ld	(YF2EC),hl		; current cluster = cluster of startbyte
2352:15058+20	4B6B  ED53EAF2		ld	(YF2EA),de		; current relative cluster = relative cluster of startbyte
2353:15078+17	4B6F  CD364A  		call	A4A36			; do partical sector read if needed
2354:15095+16	4B72  2AFCF2  		ld	hl,(YF2FC)
2355:15111+4	4B75  7C      		ld	a,h
2356:15115+4	4B76  B5      		or	l
2357:15119+10	4B77  CADC4B  		jp	z,A4BDC			; not any whole sectors to transfer, to partical end
2358:15129+17	4B7A  CD7B4A  		call	A4A7B			; to next sector (only when partical read was done)
2359:15146+7+5	4B7D  3863    		jr	c,A4BE2			; there is no next,
2360:15153+7	4B7F  3E01    		ld	a,1
2361:15160+13	4B81  32DFF2  		ld	(YF2DF),a		; flag do increase sector
2362:15173+13	4B84  3ADDF2  		ld	a,(YF2DD)		; current relative sector in cluster
2363:15186+20	4B87  ED4BFCF2		ld	bc,(YF2FC)
2364:15206+16	4B8B  2AECF2  		ld	hl,(YF2EC)		; current cluster of file
2365:15222+11	4B8E  C5      	A4B8E:	push	bc
2366:15233+17	4B8F  CD484E  		call	A4E48			; calculate sequential sectors
2367:15250+11	4B92  C5      		push	bc
2368:15261+11	4B93  F5      		push	af
2369:15272+4	4B94  47      		ld	b,a
2370:15276+17	4B95  CDC546  		call	A46C5			; read sectors with DOS error handling
2371:15293+10	4B98  F1      		pop	af
2372:15303+4	4B99  4F      		ld	c,a
2373:15307+7	4B9A  0600    		ld	b,000H			; number of sectors read
2374:15314+7+5	4B9C  3823    		jr	c,A4BC1			; sectors read does not include the sector in the datasector buffer
2375:15321+13	4B9E  3A42F2  		ld	a,(YF242)
2376:15334+4	4BA1  B7      		or	a			; datasector buffer changed ?
2377:15338+7+5	4BA2  281D    		jr	z,A4BC1			; nope, then no need to transfer the datasector buffer
2378:15345+11	4BA4  C5      		push	bc
2379:15356+19	4BA5  DD4E02  		ld	c,(ix+002H)
2380:15375+19	4BA8  DD4603  		ld	b,(ix+003H)		; sectorsize
2381:15394+11	4BAB  C5      		push	bc
2382:15405+11	4BAC  E5      		push	hl
2383:15416+16	4BAD  2A3FF2  		ld	hl,(YF23F)		; sectornumber of datasector buffer
2384:15432+15	4BB0  ED52    		sbc	hl,de
2385:15447+4	4BB2  EB      		ex	de,hl
2386:15451+17	4BB3  CD1649  		call	A4916			; multiply
2387:15468+10	4BB6  E1      		pop	hl
2388:15478+11	4BB7  09      		add	hl,bc
2389:15489+10	4BB8  C1      		pop	bc
2390:15499+4	4BB9  EB      		ex	de,hl
2391:15503+16	4BBA  2A4FF3  		ld	hl,(YF34F)		; datasector buffer
2392:15519+17	4BBD  CDD9F1  		call	XF1D9			; transfer to DOS memory
2393:15536+10	4BC0  C1      		pop	bc
2394:15546+10	4BC1  D1      	A4BC1:	pop	de
2395:15556+10	4BC2  E1      		pop	hl
2396:15566+4	4BC3  B7      		or	a
2397:15570+15	4BC4  ED42    		sbc	hl,bc			; done all whole sectors ?
2398:15585+7+5	4BC6  2814    		jr	z,A4BDC			; yep, go partial end
2399:15592+4	4BC8  4D      		ld	c,l
2400:15596+4	4BC9  44      		ld	b,h
2401:15600+10	4BCA  21F70F  		ld	hl,00FF7H
2402:15610+15	4BCD  ED52    		sbc	hl,de			; end cluster ?
2403:15625+7+5	4BCF  3811    		jr	c,A4BE2			; yep, finish without partial end
2404:15632+16	4BD1  2AEAF2  		ld	hl,(YF2EA)
2405:15648+6	4BD4  23      		inc	hl
2406:15654+16	4BD5  22EAF2  		ld	(YF2EA),hl		; increase current relarive cluster
2407:15670+4	4BD8  AF      		xor	a			; current relative sector in cluster = first sector
2408:15674+4	4BD9  EB      		ex	de,hl
2409:15678+12	4BDA  18B2    		jr	A4B8E			; again
2410:				;
2411:15690+17	4BDC  CD6B4A  	A4BDC:	call	A4A6B			; last partial sector ?
2412:15707+10+7	4BDF  D4364A  		call	nc,A4A36		; yes, do partical sector read if needed
2413:15717+17	4BE2  CD91F2  	A4BE2:	call	XF291
2414:15734+16	4BE5  2AE2F2  		ld	hl,(YF2E2)		; current transferadres (end)
2415:15750+20	4BE8  ED5B3DF2		ld	de,(YF23D)		; transferadres (begin)
2416:15770+4	4BEC  B7      		or	a
2417:15774+15	4BED  ED52    		sbc	hl,de
2418:15789+4	4BEF  4D      		ld	c,l
2419:15793+4	4BF0  44      		ld	b,h			; size of transfer
2420:15797+10	4BF1  118000  		ld	de,00080H
2421:15807+13	4BF4  3A06F3  		ld	a,(YF306)
2422:15820+4	4BF7  B7      		or	a			; Random Block
2423:15824+7+5	4BF8  2006    		jr	nz,A4C00		; nope, use 128 bytes recordsize
2424:15831+19	4BFA  FD5E0E  		ld	e,(iy+00EH)
2425:15850+19	4BFD  FD560F  		ld	d,(iy+00FH)		; user recordsize for Random Block
2426:15869+17	4C00  CD2F49  	A4C00:	call	A492F			; how many records ?
2427:15886+4	4C03  7C      		ld	a,h
2428:15890+4	4C04  B5      		or	l			; partly records ?
2429:15894+7+5	4C05  2810    		jr	z,A4C17			; nop,
2430:15901+6	4C07  03      		inc	bc			; records +1
2431:15907+4	4C08  EB      		ex	de,hl
2432:15911+15	4C09  ED52    		sbc	hl,de			; 'missed' bytes
2433:15926+20	4C0B  ED5BE2F2		ld	de,(YF2E2)
2434:15946+4	4C0F  AF      	A4C0F:	xor	a
2435:15950+7	4C10  12      		ld	(de),a
2436:15957+6	4C11  13      		inc	de
2437:15963+6	4C12  2B      		dec	hl
2438:15969+4	4C13  7C      		ld	a,h
2439:15973+4	4C14  B5      		or	l
2440:15977+7+5	4C15  20F8    		jr	nz,A4C0F		; clear 'missed' bytes
2441:15984+16	4C17  2AE8F2  	A4C17:	ld	hl,(YF2E8)		; number of records requested
2442:16000+15	4C1A  ED42    		sbc	hl,bc
2443:16015+7+5	4C1C  2804    		jr	z,A4C22			; all done,
2444:16022+4	4C1E  3C      		inc	a
2445:16026+13	4C1F  32DEF2  		ld	(YF2DE),a		; error in record operation
2446:16039+17	4C22  CD94F2  	A4C22:	call	XF294
2447:16056+16	4C25  2AECF2  		ld	hl,(YF2EC)
2448:16072+19	4C28  FD751C  		ld	(iy+01CH),l
2449:16091+19	4C2B  FD741D  		ld	(iy+01DH),h		; current cluster of file FCB
2450:16110+16	4C2E  2AEAF2  		ld	hl,(YF2EA)
2451:16126+19	4C31  FD751E  		ld	(iy+01EH),l
2452:16145+19	4C34  FD741F  		ld	(iy+01FH),h		; current relative cluster of file FCB
2453:16164+16	4C37  2AE4F2  	A4C37:	ld	hl,(YF2E4+0)
2454:16180+20	4C3A  ED5BE6F2		ld	de,(YF2E4+2)		; startrecord
2455:16200+4	4C3E  78      		ld	a,b
2456:16204+4	4C3F  B1      		or	c			; done any records ?
2457:16208+5+6	4C40  C8      		ret	z			; nope, quit
2458:16213+6	4C41  0B      		dec	bc
2459:16219+11	4C42  09      		add	hl,bc
2460:16230+6	4C43  03      		inc	bc
2461:16236+5+6	4C44  D0      		ret	nc
2462:16241+6	4C45  13      		inc	de			; return current record
2463:16247+10	4C46  C9      		ret
2464:				
2465:				;	  Subroutine write record for dos devices
2466:				;	     Inputs  
2467:				;	     Outputs ________________________ 
2468:				
2469:16257+16	4C47  2A3DF2  	A4C47:	ld	hl,(YF23D)		; transferadres
2470:16273+7	4C4A  F640    		or	040H
2471:16280+4	4C4C  3C      		inc	a
2472:16284+7+5	4C4D  2824    		jr	z,A4C73			; CON, handle
2473:16291+4	4C4F  3C      		inc	a
2474:16295+7+5	4C50  2811    		jr	z,A4C63			; AUX, handle
2475:16302+4	4C52  3C      		inc	a
2476:16306+7+5	4C53  282C    	A4C53:	jr	z,A4C81			; NUL, handle
2477:				
2478:16313+7	4C55  7E      		ld	a,(hl)
2479:16320+6	4C56  23      		inc	hl
2480:16326+7	4C57  FE1A    		cp	01AH
2481:16333+7+5	4C59  2826    		jr	z,A4C81
2482:16340+17	4C5B  CD6654  		call	A5466			; printer output
2483:16357+6	4C5E  0B      		dec	bc
2484:16363+4	4C5F  78      		ld	a,b
2485:16367+4	4C60  B1      		or	c
2486:16371+12	4C61  18F0    		jr	A4C53
2487:				;
2488:16383+7	4C63  7E      	A4C63:	ld	a,(hl)
2489:16390+6	4C64  23      		inc	hl
2490:16396+17	4C65  CD7554  		call	A5475			; auxiliary output
2491:16413+7	4C68  FE1A    		cp	01AH
2492:16420+7+5	4C6A  2815    		jr	z,A4C81
2493:16427+6	4C6C  0B      		dec	bc
2494:16433+4	4C6D  78      		ld	a,b
2495:16437+4	4C6E  B1      		or	c
2496:16441+7+5	4C6F  20F2    		jr	nz,A4C63
2497:16448+12	4C71  180E    		jr	A4C81
2498:				;
2499:16460+7	4C73  7E      	A4C73:	ld	a,(hl)
2500:16467+6	4C74  23      		inc	hl
2501:16473+7	4C75  FE1A    		cp	01AH
2502:16480+7+5	4C77  2808    		jr	z,A4C81
2503:16487+17	4C79  CDA853  		call	A53A8			; console output
2504:16504+6	4C7C  0B      		dec	bc
2505:16510+4	4C7D  78      		ld	a,b
2506:16514+4	4C7E  B1      		or	c
2507:16518+7+5	4C7F  20F2    		jr	nz,A4C73
2508:16525+20	4C81  ED4BE8F2	A4C81:	ld	bc,(YF2E8)		; no. of records
2509:16545+12	4C85  18B0    		jr	A4C37
2510:				;
2511:16557+4	4C87  4B      	A4C87:	ld	c,e
2512:16561+4	4C88  42      		ld	b,d			; clusters to skip
2513:16565+17	4C89  CDB149  		call	A49B1			; get next absolute cluster
2514:16582+4	4C8C  78      		ld	a,b
2515:16586+4	4C8D  B1      		or	c			; found ?
2516:16590+10	4C8E  CA414D  		jp	z,A4D41			; yep,
2517:16600+17	4C91  CD124F  		call	A4F12			; allocate chain
2518:16617+10	4C94  D2414D  		jp	nc,A4D41		; ok, go writing
2519:				
2520:16627+17	4C97  CD97F2  	A4C97:	call	XF297
2521:16644+4	4C9A  AF      		xor	a
2522:16648+4	4C9B  4F      		ld	c,a
2523:16652+4	4C9C  47      		ld	b,a			; no records read/write
2524:16656+4	4C9D  3C      		inc	a
2525:16660+13	4C9E  32DEF2  		ld	(YF2DE),a		; error in record operation
2526:16673+12	4CA1  1894    		jr	A4C37
2527:				
2528:				;	  Subroutine write record
2529:				;	     Inputs  DEBC = recordnumber, HL = number of records
2530:				;	     Outputs ________________________ 
2531:				
2532:16685+17	4CA3  CD7D48  	A4CA3:	call	A487D			; initialize record info
2533:16702+11	4CA6  F5      		push	af
2534:16713+11	4CA7  C5      		push	bc
2535:16724+17	4CA8  CD9654  		call	A5496			; get time and date (dirformat)
2536:16741+19	4CAB  FD7114  		ld	(iy+014H),c
2537:16760+19	4CAE  FD7015  		ld	(iy+015H),b
2538:16779+19	4CB1  FD7316  		ld	(iy+016H),e
2539:16798+19	4CB4  FD7217  		ld	(iy+017H),d
2540:16817+10	4CB7  C1      		pop	bc
2541:16827+10	4CB8  F1      		pop	af
2542:16837+10	4CB9  FA474C  		jp	m,A4C47			; DOS device, special action
2543:16847+23	4CBC  FDCB18B6		res	6,(iy+018H)		; flag FCB changed
2544:16870+11	4CC0  C5      		push	bc
2545:16881+17	4CC1  CD5349  		call	A4953			; calculate partical sector transfers
2546:16898+10	4CC4  C1      		pop	bc
2547:16908+16	4CC5  2AF4F2  		ld	hl,(YF2F4+0)
2548:16924+20	4CC8  ED5BF6F2		ld	de,(YF2F4+2)		; startbyte
2549:16944+4	4CCC  78      		ld	a,b
2550:16948+4	4CCD  B1      		or	c			; zero bytes to write (only possible with Random Block) ?
2551:16952+10	4CCE  CADD4D  		jp	z,A4DDD			; yep, filesize adjust action
2552:16962+6	4CD1  0B      		dec	bc
2553:16968+11	4CD2  09      		add	hl,bc
2554:16979+7+5	4CD3  3001    		jr	nc,A4CD6
2555:16986+6	4CD5  13      		inc	de			; endbyte
2556:16992+4	4CD6  44      	A4CD6:	ld	b,h
2557:16996+4	4CD7  4D      		ld	c,l
2558:17000+4	4CD8  EB      		ex	de,hl
2559:17004+19	4CD9  DD5E02  		ld	e,(ix+002H)
2560:17023+19	4CDC  DD5603  		ld	d,(ix+003H)
2561:17042+17	4CDF  CD3249  		call	A4932			; / sectorsize
2562:17059+4	4CE2  60      		ld	h,b
2563:17063+4	4CE3  69      		ld	l,c			; relative sector of endbyte
2564:17067+19	4CE4  DD4607  		ld	b,(ix+007H)		; clustershift
2565:17086+4	4CE7  05      		dec	b
2566:17090+7+5	4CE8  2806    		jr	z,A4CF0
2567:17097+8	4CEA  CB3C    	A4CEA:	srl	h
2568:17105+8	4CEC  CB1D    		rr	l
2569:17113+8+5	4CEE  10FA    		djnz	A4CEA			; relative cluster of endbyte
2570:17121+11	4CF0  E5      	A4CF0:	push	hl
2571:17132+19	4CF1  FD4E10  		ld	c,(iy+010H)
2572:17151+19	4CF4  FD4611  		ld	b,(iy+011H)
2573:17170+19	4CF7  FD6E12  		ld	l,(iy+012H)
2574:17189+19	4CFA  FD6613  		ld	h,(iy+013H)		; filesize
2575:17208+17	4CFD  CD3249  		call	A4932			; / sectorsize
2576:17225+4	4D00  7C      		ld	a,h
2577:17229+4	4D01  B5      		or	l			; offset in sector
2578:17233+7+5	4D02  2801    		jr	z,A4D05
2579:17240+6	4D04  03      		inc	bc			; relative sector
2580:17246+17	4D05  CD9AF2  	A4D05:	call	XF29A
2581:17263+20	4D08  ED43F0F2		ld	(YF2F0),bc		; relative sector behind fileend
2582:17283+20	4D0C  ED4BECF2		ld	bc,(YF2EC)		; relative cluster of startbyte
2583:17303+17	4D10  CD8949  		call	A4989			; get absolute cluster
2584:17320+16	4D13  22ECF2  		ld	(YF2EC),hl		; current cluster = cluster of startbyte
2585:17336+20	4D16  ED53EAF2		ld	(YF2EA),de		; current relative cluster = relative cluster of startbyte
2586:17356+19	4D1A  E3      		ex	(sp),hl
2587:17375+4	4D1B  B7      		or	a
2588:17379+15	4D1C  ED52    		sbc	hl,de			; start and endbyte in same cluster ?
2589:17394+4	4D1E  EB      		ex	de,hl
2590:17398+10	4D1F  E1      		pop	hl
2591:17408+7+5	4D20  281F    		jr	z,A4D41			; yep,
2592:17415+4	4D22  78      		ld	a,b
2593:17419+4	4D23  B1      		or	c			; is cluster of startbyte found ?
2594:17423+10	4D24  CA874C  		jp	z,A4C87			; yep, make chain to cluster of endbyte if needed and start writing
2595:17433+11	4D27  C5      		push	bc
2596:17444+4	4D28  4B      		ld	c,e
2597:17448+4	4D29  42      		ld	b,d			; clusters to allocate
2598:17452+17	4D2A  CD124F  		call	A4F12			; allocate chain
2599:17469+10	4D2D  C1      		pop	bc
2600:17479+10	4D2E  DA974C  		jp	c,A4C97			; failed, quit with nothing done
2601:17489+20	4D31  ED5BEAF2		ld	de,(YF2EA)
2602:17509+6	4D35  13      		inc	de			; relative cluster to start
2603:17515+6	4D36  0B      		dec	bc			; clusters to skip
2604:17521+17	4D37  CDB149  		call	A49B1			; get next absolute cluster
2605:17538+16	4D3A  22ECF2  		ld	(YF2EC),hl		; cluster of startbyte
2606:17554+20	4D3D  ED53EAF2		ld	(YF2EA),de		; relative cluster of startbyte
2607:17574+17	4D41  CD464A  	A4D41:	call	A4A46			; handle partial sector write
2608:17591+16	4D44  2AFCF2  		ld	hl,(YF2FC)
2609:17607+4	4D47  7C      		ld	a,h
2610:17611+4	4D48  B5      		or	l			; any complete sectors ?
2611:17615+7+5	4D49  2841    		jr	z,A4D8C			; nope, goto partial end
2612:17622+20	4D4B  ED5BEEF2		ld	de,(YF2EE)
2613:17642+11	4D4F  19      		add	hl,de
2614:17653+16	4D50  22EEF2  		ld	(YF2EE),hl		; update relative sector of startbyte
2615:17669+17	4D53  CD7B4A  		call	A4A7B			; to the next sector (only when partial write was done)
2616:17686+7	4D56  3E01    		ld	a,1
2617:17693+13	4D58  32DFF2  		ld	(YF2DF),a		; flag do increase sector
2618:17706+13	4D5B  3ADDF2  		ld	a,(YF2DD)		; current relative sector in cluster
2619:17719+16	4D5E  2AECF2  		ld	hl,(YF2EC)		; relative cluster
2620:17735+20	4D61  ED4BFCF2		ld	bc,(YF2FC)		; whole sectors
2621:17755+11	4D65  C5      	A4D65:	push	bc
2622:17766+17	4D66  CD484E  		call	A4E48			; calculate sequencial sectors
2623:17783+11	4D69  C5      		push	bc
2624:17794+11	4D6A  F5      		push	af
2625:17805+4	4D6B  47      		ld	b,a
2626:17809+7+5	4D6C  3805    		jr	c,A4D73			; sectors writen does not include the sector in the datasector buffer
2627:17816+7	4D6E  3EFF    		ld	a,0FFH
2628:17823+13	4D70  3241F2  		ld	(YF241),a		; invalid datasector buffer
2629:17836+17	4D73  CD5547  	A4D73:	call	A4755			; write datasectors with DOS error handling
2630:17853+10	4D76  F1      		pop	af
2631:17863+10	4D77  D1      		pop	de
2632:17873+10	4D78  E1      		pop	hl
2633:17883+4	4D79  4F      		ld	c,a
2634:17887+4	4D7A  AF      		xor	a
2635:17891+4	4D7B  47      		ld	b,a
2636:17895+15	4D7C  ED42    		sbc	hl,bc			; whole sectors left ?
2637:17910+7+5	4D7E  280C    		jr	z,A4D8C			; nop, go to partial end
2638:17917+4	4D80  4D      		ld	c,l
2639:17921+4	4D81  44      		ld	b,h
2640:17925+16	4D82  2AEAF2  		ld	hl,(YF2EA)
2641:17941+6	4D85  23      		inc	hl
2642:17947+16	4D86  22EAF2  		ld	(YF2EA),hl		; update relative cluster
2643:17963+4	4D89  EB      		ex	de,hl
2644:17967+12	4D8A  18D9    		jr	A4D65			; again
2645:				;
2646:17979+17	4D8C  CD9DF2  	A4D8C:	call	XF29D
2647:17996+17	4D8F  CD6B4A  		call	A4A6B			; last partial sector ?
2648:18013+10+7	4D92  D4464A  		call	nc,A4A46		; partial end, handle partial sector write
2649:18023+16	4D95  2AE2F2  		ld	hl,(YF2E2)		; current transferadres
2650:18039+20	4D98  ED5B3DF2		ld	de,(YF23D)		; transferadres
2651:18059+4	4D9C  B7      		or	a
2652:18063+15	4D9D  ED52    		sbc	hl,de
2653:18078+20	4D9F  ED5BF4F2		ld	de,(YF2F4+0)
2654:18098+11	4DA3  19      		add	hl,de
2655:18109+20	4DA4  ED5BF6F2		ld	de,(YF2F4+2)
2656:18129+7+5	4DA8  3001    		jr	nc,A4DAB
2657:18136+6	4DAA  13      		inc	de
2658:18142+16	4DAB  22F4F2  	A4DAB:	ld	(YF2F4+0),hl
2659:18158+20	4DAE  ED53F6F2		ld	(YF2F4+2),de		; startbyte = startbyte + transfersize
2660:18178+19	4DB2  FD4E10  		ld	c,(iy+010H)
2661:18197+19	4DB5  FD4611  		ld	b,(iy+011H)
2662:18216+4	4DB8  B7      		or	a
2663:18220+15	4DB9  ED42    		sbc	hl,bc
2664:18235+19	4DBB  FD4E12  		ld	c,(iy+012H)
2665:18254+19	4DBE  FD4613  		ld	b,(iy+013H)
2666:18273+4	4DC1  EB      		ex	de,hl
2667:18277+15	4DC2  ED42    		sbc	hl,bc			; has file expanded ?
2668:18292+7+5	4DC4  3810    		jr	c,A4DD6			; nop,
2669:18299+15	4DC6  FDE5    	A4DC6:	push	iy
2670:18314+10	4DC8  E1      		pop	hl
2671:18324+10	4DC9  111000  		ld	de,00010H
2672:18334+11	4DCC  19      		add	hl,de
2673:18345+4	4DCD  EB      		ex	de,hl
2674:18349+10	4DCE  21F4F2  		ld	hl,YF2F4		; filelength = endbyte
2675:18359+10	4DD1  010400  		ld	bc,4
2676:18369+16+5	4DD4  EDB0    		ldir
2677:18385+20	4DD6  ED4BE8F2	A4DD6:	ld	bc,(YF2E8)		; no. of records
2678:18405+10	4DDA  C3224C  		jp	A4C22
2679:				
2680:				; filesize adjust
2681:				
2682:18415+4	4DDD  7C      	A4DDD:	ld	a,h
2683:18419+4	4DDE  B5      		or	l
2684:18423+4	4DDF  B2      		or	d
2685:18427+4	4DE0  B3      		or	e			; startbyte zero ?
2686:18431+7+5	4DE1  284F    		jr	z,A4E32			; yep, kill chain and quit
2687:18438+10	4DE3  010100  		ld	bc,1
2688:18448+15	4DE6  ED42    		sbc	hl,bc
2689:18463+4	4DE8  EB      		ex	de,hl
2690:18467+6	4DE9  0B      		dec	bc
2691:18473+15	4DEA  ED42    		sbc	hl,bc
2692:18488+4	4DEC  42      		ld	b,d
2693:18492+4	4DED  4B      		ld	c,e			; filesize = startbyte-1
2694:18496+19	4DEE  DD5E02  		ld	e,(ix+002H)
2695:18515+19	4DF1  DD5603  		ld	d,(ix+003H)
2696:18534+17	4DF4  CD3249  		call	A4932			; / sectorsize
2697:18551+19	4DF7  DD7E07  		ld	a,(ix+007H)		; clustershift
2698:18570+4	4DFA  3D      	A4DFA:	dec	a
2699:18574+7+5	4DFB  2806    		jr	z,A4E03
2700:18581+8	4DFD  CB38    		srl	b
2701:18589+8	4DFF  CB19    		rr	c
2702:18597+12	4E01  18F7    		jr	A4DFA
2703:				;
2704:18609+17	4E03  CD8949  	A4E03:	call	A4989			; get absolute cluster
2705:18626+4	4E06  78      		ld	a,b
2706:18630+4	4E07  B1      		or	c			; found ?
2707:18634+7+5	4E08  281C    		jr	z,A4E26			; yep, this means chain must be shortend
2708:18641+17	4E0A  CD124F  		call	A4F12			; allocate chain
2709:18658+10	4E0D  DA974C  		jp	c,A4C97			; failed, quit with nothing done
2710:18668+10	4E10  010000  	A4E10:	ld	bc,0
2711:18678+20	4E13  ED43E8F2		ld	(YF2E8),bc		; number of records = 0
2712:18698+20	4E17  ED43EAF2		ld	(YF2EA),bc		; current relative cluster = 0
2713:18718+19	4E1B  FD6E1A  		ld	l,(iy+01AH)
2714:18737+19	4E1E  FD661B  		ld	h,(iy+01BH)		; start cluster of file
2715:18756+16	4E21  22ECF2  		ld	(YF2EC),hl		; current cluster = start cluster of file
2716:18772+12	4E24  18A0    		jr	A4DC6
2717:				;
2718:18784+10	4E26  01FF0F  	A4E26:	ld	bc,00FFFH
2719:18794+17	4E29  CD9E4F  		call	A4F9E			; mark end & release rest chain
2720:18811+6	4E2C  1B      	A4E2C:	dec	de
2721:				
2722:				; VERSION 1.1 CHANGE
2723:				;
2724:				; CHANGED, BUGFIX
2725:				; ld a,0FFH
2726:				;
2727:				
2728:18817+7	4E2D  3E01    		ld	a,001H
2729:18824+7	4E2F  12      		ld	(de),a			; flag FAT buffer changed
2730:18831+12	4E30  18DE    		jr	A4E10
2731:				;
2732:18843+19	4E32  FD6E1A  	A4E32:	ld	l,(iy+01AH)
2733:18862+19	4E35  FD661B  		ld	h,(iy+01BH)
2734:18881+4	4E38  7C      		ld	a,h
2735:18885+4	4E39  B5      		or	l			; file has start cluster ?
2736:18889+7+5	4E3A  28D4    		jr	z,A4E10			; nop,
2737:18896+4	4E3C  AF      		xor	a
2738:18900+19	4E3D  FD771A  		ld	(iy+01AH),a
2739:18919+19	4E40  FD771B  		ld	(iy+01BH),a		; file has no start cluster (empty file)
2740:18938+17	4E43  CD9B4F  		call	A4F9B			; release chain
2741:18955+12	4E46  18E4    		jr	A4E2C
2742:				;
2743:18967+17	4E48  CDA0F2  	A4E48:	call	XF2A0
2744:18984+4	4E4B  57      		ld	d,a
2745:18988+11	4E4C  E5      		push	hl
2746:18999+4	4E4D  04      		inc	b
2747:19003+4	4E4E  05      		dec	b
2748:19007+7+5	4E4F  2802    		jr	z,A4E53
2749:19014+7	4E51  0EFF    		ld	c,0FFH
2750:19021+4	4E53  59      	A4E53:	ld	e,c
2751:19025+11	4E54  D5      		push	de
2752:19036+19	4E55  DD7E06  		ld	a,(ix+006H)		; clustermask
2753:19055+13	4E58  32DDF2  		ld	(YF2DD),a		; current relative sector in cluster
2754:19068+4	4E5B  3C      		inc	a
2755:19072+4	4E5C  92      		sub	d
2756:19076+4	4E5D  47      		ld	b,a
2757:19080+16	4E5E  22ECF2  	A4E5E:	ld	(YF2EC),hl
2758:19096+11	4E61  E5      		push	hl
2759:19107+17	4E62  CDF441  		call	A41F4			; get FAT entry content
2760:19124+10	4E65  D1      		pop	de
2761:19134+4	4E66  79      		ld	a,c
2762:19138+4	4E67  90      		sub	b
2763:19142+4	4E68  4F      		ld	c,a
2764:19146+7+5	4E69  280D    		jr	z,A4E78
2765:19153+19	4E6B  DD4606  		ld	b,(ix+006H)		; clustermask
2766:19172+7+5	4E6E  385A    		jr	c,A4ECA
2767:19179+4	4E70  04      		inc	b
2768:19183+6	4E71  13      		inc	de
2769:19189+4	4E72  EB      		ex	de,hl
2770:19193+15	4E73  ED52    		sbc	hl,de
2771:19208+4	4E75  EB      		ex	de,hl
2772:19212+7+5	4E76  28E6    		jr	z,A4E5E
2773:19219+10	4E78  D1      	A4E78:	pop	de
2774:19229+19	4E79  E3      		ex	(sp),hl
2775:19248+11	4E7A  E5      		push	hl
2776:19259+11	4E7B  D5      		push	de
2777:19270+4	4E7C  7B      		ld	a,e
2778:19274+4	4E7D  91      		sub	c
2779:19278+4	4E7E  5F      		ld	e,a
2780:19282+7	4E7F  1600    		ld	d,000H
2781:19289+19	4E81  DD4E02  		ld	c,(ix+002H)
2782:19308+19	4E84  DD4603  		ld	b,(ix+003H)		; sectorsize
2783:19327+17	4E87  CD1649  		call	A4916			; multiply
2784:19344+10	4E8A  F1      		pop	af
2785:19354+16	4E8B  2AE2F2  		ld	hl,(YF2E2)
2786:19370+11	4E8E  E5      		push	hl
2787:19381+11	4E8F  09      		add	hl,bc
2788:19392+16	4E90  22E2F2  		ld	(YF2E2),hl		; update current transferadres
2789:19408+10	4E93  C1      		pop	bc
2790:19418+10	4E94  E1      		pop	hl
2791:19428+11	4E95  C5      		push	bc
2792:19439+11	4E96  D5      		push	de
2793:19450+4	4E97  EB      		ex	de,hl
2794:19454+16	4E98  2AECF2  		ld	hl,(YF2EC)
2795:19470+15	4E9B  ED52    		sbc	hl,de
2796:19485+20	4E9D  ED4BEAF2		ld	bc,(YF2EA)
2797:19505+11	4EA1  09      		add	hl,bc
2798:19516+16	4EA2  22EAF2  		ld	(YF2EA),hl
2799:19532+4	4EA5  EB      		ex	de,hl
2800:19536+17	4EA6  CDDB4E  		call	A4EDB			; get sectornumber of cluster
2801:19553+4	4EA9  EB      		ex	de,hl
2802:19557+10	4EAA  C1      		pop	bc
2803:19567+13	4EAB  3A41F2  		ld	a,(YF241)
2804:19580+19	4EAE  DDBE00  		cp	(ix+000H)		; driveid
2805:19599+4	4EB1  79      		ld	a,c
2806:19603+4	4EB2  37      		scf
2807:19607+7+5	4EB3  2012    		jr	nz,A4EC7
2808:19614+16	4EB5  2A3FF2  		ld	hl,(YF23F)		; sectornumber of datasector buffer
2809:19630+4	4EB8  B7      		or	a
2810:19634+15	4EB9  ED52    		sbc	hl,de
2811:19649+7+5	4EBB  380A    		jr	c,A4EC7
2812:19656+4	4EBD  60      		ld	h,b
2813:19660+4	4EBE  69      		ld	l,c
2814:19664+11	4EBF  19      		add	hl,de
2815:19675+6	4EC0  2B      		dec	hl
2816:19681+20	4EC1  ED4B3FF2		ld	bc,(YF23F)		; sectornumber of datasector buffer
2817:19701+15	4EC5  ED42    		sbc	hl,bc
2818:19716+10	4EC7  E1      	A4EC7:	pop	hl
2819:19726+10	4EC8  C1      		pop	bc
2820:19736+10	4EC9  C9      		ret
2821:				;
2822:19746+4	4ECA  80      	A4ECA:	add	a,b
2823:19750+13	4ECB  32DDF2  		ld	(YF2DD),a		; current relative sector in cluster
2824:19763+7	4ECE  0E00    		ld	c,000H
2825:19770+12	4ED0  18A6    		jr	A4E78
2826:				
2827:				;	  Subroutine get decoded characterpair (not needed)
2828:				;	     Inputs  
2829:				;	     Outputs ________________________ 
2830:				
2831:19782+17	4ED2  CDFA41  	A4ED2:	call	A41FA
2832:19799+4	4ED5  7D      		ld	a,l
2833:19803+11	4ED6  29      		add	hl,hl
2834:19814+11	4ED7  29      		add	hl,hl			; second char in H
2835:19825+7	4ED8  E63F    		and	03FH			; first char in A
2836:19832+10	4EDA  C9      		ret
2837:				
2838:				; clusternumber to sectornumber
2839:				
2840:19842+17	4EDB  CDA3F2  	A4EDB:	call	XF2A3
2841:19859+11	4EDE  C5      		push	bc
2842:19870+19	4EDF  DD4607  		ld	b,(ix+007H)		; clustershift
2843:19889+6	4EE2  2B      		dec	hl
2844:19895+6	4EE3  2B      		dec	hl
2845:19901+4	4EE4  05      		dec	b
2846:19905+7+5	4EE5  2806    		jr	z,A4EED
2847:19912+8	4EE7  CB25    	A4EE7:	sla	l
2848:19920+8	4EE9  CB14    		rl	h
2849:19928+8+5	4EEB  10FA    		djnz	A4EE7
2850:19936+4	4EED  B5      	A4EED:	or	l
2851:19940+4	4EEE  6F      		ld	l,a
2852:19944+19	4EEF  DD4E0C  		ld	c,(ix+00CH)
2853:19963+19	4EF2  DD460D  		ld	b,(ix+00DH)
2854:19982+11	4EF5  09      		add	hl,bc			; + first datasector
2855:19993+10	4EF6  C1      		pop	bc
2856:20003+10	4EF7  C9      		ret
2857:				;
2858:20013+11	4EF8  D5      	A4EF8:	push	de
2859:20024+14	4EF9  FDE1    		pop	iy
2860:20038+19	4EFB  FD4E20  		ld	c,(iy+020H)		; CR (current record)
2861:20057+19	4EFE  FD460C  		ld	b,(iy+00CH)		; EX (extent)
2862:20076+19	4F01  FD5E0E  		ld	e,(iy+00EH)		; S2
2863:20095+7	4F04  1600    		ld	d,000H
2864:20102+8	4F06  CB21    		sla	c
2865:20110+8	4F08  CB3B    		srl	e
2866:20118+8	4F0A  CB18    		rr	b
2867:20126+8	4F0C  CB19    		rr	c			; debc = recordnumber
2868:20134+10	4F0E  210100  		ld	hl,00001H		; 1 record
2869:20144+10	4F11  C9      		ret
2870:				
2871:				; allocate chain
2872:				
2873:20154+17	4F12  CDA6F2  	A4F12:	call	XF2A6
2874:20171+19	4F15  DD5E13  		ld	e,(ix+013H)
2875:20190+19	4F18  DD5614  		ld	d,(ix+014H)
2876:20209+4	4F1B  EB      		ex	de,hl			; pointer to FAT buffer of drive
2877:20213+7	4F1C  7E      		ld	a,(hl)
2878:20220+6	4F1D  23      		inc	hl
2879:20226+7	4F1E  66      		ld	h,(hl)
2880:20233+4	4F1F  6F      		ld	l,a			; pointer to FAT
2881:20237+11	4F20  E5      		push	hl
2882:20248+4	4F21  EB      		ex	de,hl
2883:20252+19	4F22  DD5E0E  		ld	e,(ix+00EH)
2884:20271+19	4F25  DD560F  		ld	d,(ix+00FH)		; Max cluster
2885:20290+20	4F28  ED5302F3		ld	(YF302),de		; store
2886:20310+11	4F2C  E5      		push	hl
2887:20321+11	4F2D  C5      	A4F2D:	push	bc			; clusters to allocate
2888:20332+11	4F2E  E5      		push	hl			; start cluster
2889:20343+4	4F2F  54      		ld	d,h
2890:20347+4	4F30  5D      		ld	e,l
2891:20351+11	4F31  D5      	A4F31:	push	de
2892:20362+4	4F32  EB      		ex	de,hl
2893:20366+16	4F33  2A02F3  		ld	hl,(YF302)
2894:20382+6	4F36  2B      		dec	hl
2895:20388+4	4F37  B7      		or	a
2896:20392+15	4F38  ED52    		sbc	hl,de
2897:20407+4	4F3A  EB      		ex	de,hl			; last cluster on disk ?
2898:20411+10	4F3B  D1      		pop	de
2899:20421+7+5	4F3C  3010    		jr	nc,A4F4E		; nop, go up
2900:20428+4	4F3E  7B      		ld	a,e
2901:20432+4	4F3F  B2      		or	d			; search below finished ?
2902:20436+7+5	4F40  2014    		jr	nz,A4F56		; nop, go below
2903:20443+10	4F42  E1      		pop	hl
2904:20453+10	4F43  E1      		pop	hl
2905:20463+10	4F44  E1      		pop	hl
2906:20473+10	4F45  01FF0F  		ld	bc,00FFFH
2907:20483+17	4F48  CD9E4F  		call	A4F9E			; mark end & release rest chain
2908:20500+4	4F4B  37      		scf
2909:20504+12	4F4C  1846    		jr	A4F94
2910:				;
2911:20516+6	4F4E  23      	A4F4E:	inc	hl
2912:20522+17	4F4F  CD5E4F  		call	A4F5E			; try to allocate
2913:20539+4	4F52  7B      		ld	a,e			; nop not free !
2914:20543+4	4F53  B2      		or	d			; search below finished ?
2915:20547+7+5	4F54  28DB    		jr	z,A4F31			; try again (up)
2916:20554+6	4F56  1B      	A4F56:	dec	de
2917:20560+4	4F57  EB      		ex	de,hl
2918:20564+17	4F58  CD5E4F  		call	A4F5E			; try to allocate
2919:20581+4	4F5B  EB      		ex	de,hl			; nop not free !
2920:20585+12	4F5C  18D3    		jr	A4F31			; try again
2921:				;
2922:20597+11	4F5E  E5      	A4F5E:	push	hl
2923:20608+11	4F5F  D5      		push	de
2924:20619+17	4F60  CDF441  		call	A41F4			; cluster free ?
2925:20636+10	4F63  D1      		pop	de
2926:20646+10	4F64  E1      		pop	hl
2927:20656+5+6	4F65  C0      		ret	nz			; nop, no alloc
2928:20661+10	4F66  C1      		pop	bc
2929:20671+4	4F67  4D      		ld	c,l
2930:20675+4	4F68  44      		ld	b,h
2931:20679+19	4F69  E3      		ex	(sp),hl
2932:20698+19	4F6A  DD5E13  		ld	e,(ix+013H)
2933:20717+19	4F6D  DD5614  		ld	d,(ix+014H)		; pointer to FAT buffer of drive
2934:20736+17	4F70  CD2142  		call	A4221			; set FAT entry content
2935:20753+10	4F73  E1      		pop	hl
2936:20763+10	4F74  C1      		pop	bc
2937:20773+6	4F75  0B      		dec	bc
2938:20779+4	4F76  78      		ld	a,b
2939:20783+4	4F77  B1      		or	c
2940:20787+7+5	4F78  20B3    		jr	nz,A4F2D
2941:20794+10	4F7A  01FF0F  		ld	bc,00FFFH		; chain endmarker
2942:20804+17	4F7D  CD2142  		call	A4221			; set FAT entry content
2943:20821+6	4F80  1B      		dec	de
2944:20827+7	4F81  3E01    		ld	a,1
2945:20834+7	4F83  12      		ld	(de),a			; FAT changed
2946:20841+10	4F84  E1      		pop	hl
2947:20851+11	4F85  E5      		push	hl
2948:20862+17	4F86  CDF441  		call	A41F4			; get FAT entry content
2949:20879+10	4F89  C1      		pop	bc
2950:20889+4	4F8A  79      		ld	a,c
2951:20893+4	4F8B  B0      		or	b
2952:20897+7+5	4F8C  2006    		jr	nz,A4F94
2953:20904+19	4F8E  FD751A  		ld	(iy+01AH),l
2954:20923+19	4F91  FD741B  		ld	(iy+01BH),h		; start cluster of file
2955:20942+4	4F94  EB      	A4F94:	ex	de,hl
2956:20946+10	4F95  C1      		pop	bc
2957:20956+7	4F96  71      		ld	(hl),c
2958:20963+6	4F97  23      		inc	hl
2959:20969+7	4F98  70      		ld	(hl),b
2960:20976+4	4F99  EB      		ex	de,hl
2961:20980+10	4F9A  C9      		ret
2962:				
2963:				; release FAT chain
2964:				
2965:20990+10	4F9B  010000  	A4F9B:	ld	bc,00000H
2966:21000+17	4F9E  CDA9F2  	A4F9E:	call	XF2A9
2967:21017+11	4FA1  E5      		push	hl
2968:21028+17	4FA2  CDF441  		call	A41F4			; get FAT entry content
2969:21045+19	4FA5  E3      		ex	(sp),hl
2970:21064+17	4FA6  CD2142  		call	A4221			; set FAT entry content
2971:21081+10	4FA9  E1      		pop	hl
2972:21091+4	4FAA  7C      		ld	a,h
2973:21095+4	4FAB  B5      		or	l
2974:21099+5+6	4FAC  C8      		ret	z
2975:21104+4	4FAD  7C      		ld	a,h
2976:21108+7	4FAE  FE0F    		cp	00FH
2977:21115+7+5	4FB0  38E9    		jr	c,A4F9B
2978:21122+4	4FB2  7D      		ld	a,l
2979:21126+7	4FB3  FEF8    		cp	0F8H
2980:21133+7+5	4FB5  38E4    		jr	c,A4F9B 		; not end of chain, release
2981:21140+10	4FB7  C9      		ret
2982:				
2983:				;	  Subroutine BDOS 11 (search for first)
2984:				;	     Inputs  
2985:				;	     Outputs ________________________ 
2986:				
2987:21150+17	4FB8  CDA542  	A4FB8:	call	A42A5			; validate FCB, clear S2 and find direntry
2988:21167+7+5	4FBB  3843    	A4FBB:	jr	c,A5000			; error, quit
2989:21174+13	4FBD  3AB8F2  		ld	a,(YF2B8)
2990:21187+7+5	4FC0  2802    		jr	z,A4FC4			; file, save direntry number for search next
2991:21194+7	4FC2  3EFF    		ld	a,0FFH			; device, flag search next invalid
2992:21201+13	4FC4  320BF3  	A4FC4:	ld	(YF30B),a
2993:21214+20	4FC7  DD2209F3		ld	(YF309),ix		; save pointer to DPB
2994:21234+20	4FCB  ED5B3DF2		ld	de,(YF23D)		; transferadres
2995:21254+13	4FCF  3AE1F2  		ld	a,(YF2E1)		; current driveid
2996:21267+4	4FD2  3C      		inc	a
2997:21271+7	4FD3  12      		ld	(de),a
2998:21278+6	4FD4  13      		inc	de
2999:21284+7	4FD5  7E      		ld	a,(hl)
3000:21291+7	4FD6  FE05    		cp	005H
3001:21298+7+5	4FD8  2002    		jr	nz,A4FDC
3002:21305+10	4FDA  36E5    		ld	(hl),0E5H
3003:21315+10	4FDC  012000  	A4FDC:	ld	bc,00020H
3004:21325+17	4FDF  CDD9F1  		call	XF1D9			; transfer direntry to DOS memory
3005:21342+17	4FE2  CD3944  		call	A4439			; get max record and extent
3006:21359+13	4FE5  3A0CF3  		ld	a,(YF30C)
3007:21372+4	4FE8  B8      		cp	b			; orginal FCB EX byte same as max extent ?
3008:21376+7+5	4FE9  2804    		jr	z,A4FEF			; same, RC = max record
3009:21383+7+5	4FEB  3013    		jr	nc,A5000		; bigger, quit with error
3010:21390+7	4FED  0E80    		ld	c,080H			; smaller, RC = 128 (means extend is full)
3011:21397+16	4FEF  2A3DF2  	A4FEF:	ld	hl,(YF23D)		; transferadres
3012:21413+10	4FF2  110C00  		ld	de,0000CH
3013:21423+11	4FF5  19      		add	hl,de
3014:21434+7	4FF6  46      		ld	b,(hl)			; MS-DOS fileattribute
3015:21441+7	4FF7  77      		ld	(hl),a			; EX = orginal FCB EX byte (CP/M: requested extent)
3016:21448+6	4FF8  23      		inc	hl
3017:21454+7	4FF9  70      		ld	(hl),b			; S1 = MS-DOS fileattribute (CP/M: reserved)
3018:21461+6	4FFA  23      		inc	hl
3019:21467+7	4FFB  72      		ld	(hl),d			; S2 = 0 (CP/M: extent high byte)
3020:21474+6	4FFC  23      		inc	hl
3021:21480+7	4FFD  71      		ld	(hl),c			; RC = (CP/M: recordcount)
3022:21487+4	4FFE  AF      		xor	a			; CP/M direntry 0, no error
3023:21491+10	4FFF  C9      		ret
3024:				;
3025:21501+7	5000  3EFF    	A5000:	ld	a,0FFH
3026:21508+13	5002  320BF3  		ld	(YF30B),a
3027:21521+10	5005  C9      		ret
3028:				
3029:				;	  Subroutine BDOS 12 (search for next)
3030:				;	     Inputs  
3031:				;	     Outputs ________________________ 
3032:				
3033:21531+17	5006  CD0E44  	A5006:	call	A440E			; validate FCB drive and filename
3034:21548+7+5	5009  38F5    		jr	c,A5000			; invalid,
3035:21555+13	500B  3A0BF3  		ld	a,(YF30B)		; saved direntrynumber of last search first
3036:21568+7	500E  FEFF    		cp	0FFH
3037:21575+7+5	5010  28EE    		jr	z,A5000			; flag search next invalid, quit with error
3038:21582+13	5012  32B8F2  		ld	(YF2B8),a
3039:21595+20	5015  DD2A09F3		ld	ix,(YF309)		; saved pointer to DPB
3040:21615+17	5019  CDBC42  		call	A42BC			; find next directoryentry
3041:21632+12	501C  189D    		jr	A4FBB			; finish
3042:				
3043:				;	  Subroutine BDOS 23 (compute filesize)
3044:				;	     Inputs  
3045:				;	     Outputs ________________________ 
3046:				
3047:21644+17	501E  CDA542  	A501E:	call	A42A5			; validate FCB, clear S2 and find direntry
3048:21661+7	5021  3EFF    		ld	a,0FFH
3049:21668+5+6	5023  D8      		ret	c
3050:21673+11	5024  D5      		push	de
3051:21684+14	5025  DDE1    		pop	ix
3052:21698+19	5027  FD7E1C  		ld	a,(iy+01CH)
3053:21717+19	502A  FD4E1D  		ld	c,(iy+01DH)
3054:21736+19	502D  FD461E  		ld	b,(iy+01EH)
3055:21755+19	5030  FD5E1F  		ld	e,(iy+01FH)
3056:21774+4	5033  87      		add	a,a
3057:21778+8	5034  CB11    		rl	c
3058:21786+8	5036  CB10    		rl	b
3059:21794+8	5038  CB13    		rl	e
3060:21802+4	503A  B7      		or	a
3061:21806+7+5	503B  2806    		jr	z,A5043
3062:21813+6	503D  03      		inc	bc
3063:21819+4	503E  78      		ld	a,b
3064:21823+4	503F  B1      		or	c
3065:21827+7+5	5040  2001    		jr	nz,A5043
3066:21834+4	5042  1C      		inc	e
3067:21838+19	5043  DD7121  	A5043:	ld	(ix+021H),c
3068:21857+19	5046  DD7022  		ld	(ix+022H),b
3069:21876+19	5049  DD7323  		ld	(ix+023H),e
3070:21895+4	504C  AF      		xor	a
3071:21899+10	504D  C9      		ret
3072:				
3073:				;	  Subroutine BDOS 18 (return bitmap of logged-in drives)
3074:				;	     Inputs  
3075:				;	     Outputs ________________________ 
3076:				
3077:21909+13	504E  3A47F3  	A504E:	ld	a,(YF347)
3078:21922+4	5051  47      		ld	b,a
3079:21926+4	5052  AF      		xor	a
3080:21930+4	5053  37      	A5053:	scf
3081:21934+4	5054  17      		rla
3082:21938+8+5	5055  10FC    		djnz	A5053
3083:21946+10	5057  C9      		ret
3084:				
3085:				;	  Subroutine BDOS 1A (set DMA address)
3086:				;	     Inputs  
3087:				;	     Outputs ________________________ 
3088:				
3089:21956+20	5058  ED533DF2	A5058:	ld	(YF23D),de		; set transferadres
3090:21976+10	505C  C9      		ret
3091:				
3092:				;	  Subroutine BDOS 1B
3093:				;	     Inputs  
3094:				;	     Outputs ________________________ 
3095:				
3096:21986+4	505D  AF      	A505D:	xor	a
3097:21990+13	505E  3206F3  		ld	(YF306),a		; no CP/M call
3098:22003+4	5061  7B      		ld	a,e
3099:22007+17	5062  CD2744  		call	A4427			; validate fcb driveid
3100:22024+7	5065  3EFF    		ld	a,0FFH
3101:22031+5+6	5067  D8      		ret	c
3102:22036+17	5068  CDDB44  		call	A44DB			; get latest FAT
3103:22053+19	506B  DD5E13  		ld	e,(ix+013H)
3104:22072+19	506E  DD5614  		ld	d,(ix+014H)
3105:22091+11	5071  D5      		push	de
3106:22102+14	5072  FDE1    		pop	iy			; pointer to FAT buffer of drive
3107:22116+10	5074  210200  		ld	hl,2
3108:22126+4	5077  44      		ld	b,h
3109:22130+4	5078  4C      		ld	c,h
3110:22134+19	5079  DD5E0E  		ld	e,(ix+00EH)
3111:22153+19	507C  DD560F  		ld	d,(ix+00FH)
3112:22172+6	507F  1B      		dec	de			; number of clusters on disk
3113:22178+11	5080  D5      		push	de
3114:22189+11	5081  D5      	A5081:	push	de
3115:22200+11	5082  E5      		push	hl
3116:22211+17	5083  CDF441  		call	A41F4			; get FAT entry content
3117:22228+10	5086  E1      		pop	hl
3118:22238+10	5087  D1      		pop	de
3119:22248+7+5	5088  2001    		jr	nz,A508B
3120:22255+6	508A  03      		inc	bc
3121:22261+6	508B  23      	A508B:	inc	hl
3122:22267+6	508C  1B      		dec	de
3123:22273+4	508D  7B      		ld	a,e
3124:22277+4	508E  B2      		or	d
3125:22281+7+5	508F  20F0    		jr	nz,A5081
3126:22288+4	5091  60      		ld	h,b
3127:22292+4	5092  69      		ld	l,c
3128:22296+10	5093  D1      		pop	de
3129:22306+19	5094  DD7E06  		ld	a,(ix+006H)
3130:22325+4	5097  3C      		inc	a			; number of sectors per cluster
3131:22329+19	5098  DD4E02  		ld	c,(ix+002H)
3132:22348+19	509B  DD4603  		ld	b,(ix+003H)		; sectorsize
3133:22367+10	509E  C9      		ret
3134:				
3135:				;	  Subroutine BDOS 0D (reset discs)
3136:				;	     Inputs  
3137:				;	     Outputs ________________________ 
3138:				
3139:22377+10	509F  218000  	A509F:	ld	hl,00080H
3140:22387+16	50A2  223DF2  		ld	(YF23D),hl		; default transferadres
3141:22403+4	50A5  AF      		xor	a
3142:22407+13	50A6  3247F2  		ld	(YF247),a		; default driveid 0 (A:)
3143:22420+17	50A9  CD2D47  		call	A472D			; write datasector buffer when needed
3144:22437+10	50AC  2155F3  		ld	hl,YF355
3145:22447+13	50AF  3A47F3  		ld	a,(YF347)		; all drives
3146:22460+7	50B2  5E      	A50B2:	ld	e,(hl)
3147:22467+6	50B3  23      		inc	hl
3148:22473+7	50B4  56      		ld	d,(hl)			; pointer to DPB
3149:22480+6	50B5  23      		inc	hl
3150:22486+11	50B6  E5      		push	hl
3151:22497+11	50B7  F5      		push	af
3152:22508+11	50B8  D5      		push	de
3153:22519+14	50B9  DDE1    		pop	ix
3154:22533+17	50BB  CDC445  		call	A45C4			; write FAT buffer when needed
3155:22550+10	50BE  F1      		pop	af
3156:22560+10	50BF  E1      		pop	hl
3157:22570+4	50C0  3D      		dec	a
3158:22574+7+5	50C1  20EF    		jr	nz,A50B2		; next drive
3159:22581+10	50C3  C9      		ret
3160:				
3161:				;	  Subroutine BDOS 25 (return current drive)
3162:				;	     Inputs  
3163:				;	     Outputs ________________________ 
3164:				
3165:22591+13	50C4  3A47F2  	A50C4:	ld	a,(YF247)
3166:22604+10	50C7  C9      		ret
3167:				
3168:				;	  Subroutine BDOS 34 (update random access pointer)
3169:				;	     Inputs  
3170:				;	     Outputs ________________________ 
3171:				
3172:22614+17	50C8  CDF84E  	A50C8:	call	A4EF8			; get recordnumber from CR,EX and S2 field
3173:22631+19	50CB  FD7521  		ld	(iy+021H),l
3174:22650+19	50CE  FD7422  		ld	(iy+022H),h
3175:22669+19	50D1  FD7323  		ld	(iy+023H),e
3176:22688+10	50D4  C9      		ret
3177:				;	  Subroutine BDOS 0E (select disc)
3178:				;	     Inputs  
3179:				;	     Outputs ________________________ 
3180:				
3181:22698+13	50D5  3A47F3  	A50D5:	ld	a,(YF347)
3182:22711+4	50D8  BB      		cp	e
3183:22715+5+6	50D9  D8      		ret	c
3184:22720+5+6	50DA  C8      		ret	z
3185:22725+10	50DB  2147F2  		ld	hl,YF247
3186:22735+7	50DE  73      		ld	(hl),e
3187:22742+10	50DF  C9      		ret
3188:				
3189:				;	  Subroutine BDOS 0A (buffered console input)
3190:				;	     Inputs  
3191:				;	     Outputs ________________________ 
3192:				
3193:22752+11	50E0  D5      	A50E0:	push	de
3194:22763+13	50E1  3A37F2  		ld	a,(YF237)
3195:22776+13	50E4  3238F2  		ld	(YF238),a		; save current console columnpos to record start of inputline
3196:22789+4	50E7  AF      		xor	a
3197:22793+13	50E8  3239F2  		ld	(YF239),a		; not in insertmode
3198:22806+4	50EB  62      		ld	h,d
3199:22810+4	50EC  6B      		ld	l,e
3200:22814+4	50ED  47      		ld	b,a
3201:22818+7	50EE  4E      		ld	c,(hl)			; size of buffer
3202:22825+6	50EF  23      		inc	hl
3203:22831+4	50F0  57      		ld	d,a
3204:22835+7	50F1  5E      		ld	e,(hl)			; length of line already in buffer
3205:22842+6	50F2  23      		inc	hl
3206:22848+14	50F3  DD2159F4		ld	ix,KBUF+58
3207:22862+4	50F7  7B      		ld	a,e
3208:22866+4	50F8  B9      		cp	c			; is lengthbyte valid ?
3209:				
3210:				; VERSION 1.1 CHANGE
3211:				;
3212:				; CHANGED, BUGFIX
3213:				; jr nc,A5103
3214:				;
3215:				
3216:22870+7+5	50F9  3006    		jr	nc,A5101		; equal, use the line in buffer as basis otherwise use empty line as basis
3217:22877+11	50FB  E5      		push	hl			; length smaller than size of buffer
3218:22888+11	50FC  19      		add	hl,de
3219:22899+7	50FD  7E      		ld	a,(hl)
3220:22906+10	50FE  E1      		pop	hl
3221:22916+7	50FF  FE0D    		cp	00DH			; then line must be terminated by a CR
3222:22923+7+5	5101  2801    	A5101:	jr	z,A5104			; it is, use the line in buffer as basis
3223:22930+4	5103  5A      	A5103:	ld	e,d			; use empty line as basis
3224:				
3225:				; linputinput headloop, also lineinput CTRL-F
3226:				
3227:22934+17	5104  CDACF2  	A5104:	call	XF2AC			; hook
3228:22951+17	5107  CD4E54  		call	A544E			; BDOS 8 (direct input)
3229:22968+11	510A  E5      	A510A:	push	hl
3230:22979+11	510B  C5      		push	bc
3231:22990+10	510C  217453  		ld	hl,T5374
3232:23000+10	510F  011100  		ld	bc,NKEYNT		; number of keyentries
3233:23010+16+5	5112  EDB1    		cpir
3234:23026+11	5114  09      		add	hl,bc
3235:23037+11	5115  09      		add	hl,bc
3236:23048+11	5116  09      		add	hl,bc
3237:23059+7	5117  4E      		ld	c,(hl)
3238:23066+6	5118  23      		inc	hl
3239:23072+7	5119  66      		ld	h,(hl)
3240:23079+4	511A  69      		ld	l,c
3241:23083+10	511B  C1      		pop	bc
3242:23093+19	511C  E3      		ex	(sp),hl
3243:23112+10	511D  C9      		ret
3244:				
3245:				; lineinput CTRL-A, MSX graphic header
3246:				
3247:23122+17	511E  CD4E54  	A511E:	call	A544E			; BDOS 8 (direct input)
3248:23139+7	5121  FE40    		cp	040H
3249:23146+7+5	5123  38E5    		jr	c,A510A
3250:23153+7	5125  FE60    		cp	060H
3251:23160+7+5	5127  30E1    		jr	nc,A510A
3252:23167+11	5129  F5      		push	af
3253:23178+4	512A  78      		ld	a,b
3254:23182+4	512B  3C      		inc	a
3255:23186+4	512C  B9      		cp	c
3256:23190+7+5	512D  302F    		jr	nc,A515E		; beep
3257:23197+7	512F  3E01    		ld	a,001H
3258:23204+19	5131  DD7700  		ld	(ix+000H),a
3259:23223+10	5134  DD23    		inc	ix
3260:23233+4	5136  04      		inc	b
3261:23237+17	5137  CD5D53  		call	A535D
3262:23254+10	513A  F1      		pop	af
3263:				
3264:				
3265:				; lineinput, normal key action
3266:				
3267:23264+11	513B  F5      	A513B:	push	af
3268:23275+4	513C  78      		ld	a,b
3269:23279+4	513D  B9      		cp	c
3270:23283+7+5	513E  301E    		jr	nc,A515E		; beep
3271:23290+10	5140  F1      		pop	af
3272:23300+19	5141  DD7700  		ld	(ix+000H),a
3273:23319+10	5144  DD23    		inc	ix
3274:23329+4	5146  04      		inc	b
3275:23333+17	5147  CD5D53  		call	A535D
3276:23350+13	514A  3A39F2  		ld	a,(YF239)
3277:23363+4	514D  B7      		or	a			; insertmode ?
3278:23367+7+5	514E  20B4    		jr	nz,A5104		; yep,
3279:23374+4	5150  14      		inc	d
3280:23378+4	5151  7B      		ld	a,e
3281:23382+4	5152  BA      		cp	d
3282:23386+7+5	5153  38AF    		jr	c,A5104
3283:23393+7	5155  7E      		ld	a,(hl)
3284:23400+4	5156  3D      		dec	a
3285:23404+6	5157  23      		inc	hl
3286:23410+7+5	5158  20AA    		jr	nz,A5104
3287:23417+4	515A  14      		inc	d
3288:23421+6	515B  23      		inc	hl
3289:23427+12	515C  18A6    		jr	A5104
3290:				;
3291:23439+10	515E  F1      	A515E:	pop	af
3292:23449+7	515F  3E07    		ld	a,007H			; bell
3293:23456+17	5161  CDA853  		call	A53A8			; console output
3294:23473+12	5164  189E    		jr	A5104
3295:				
3296:				; lineinput UP key, ESC key, CTRL-U (VOID)
3297:				
3298:23485+10	5166  D1      	A5166:	pop	de
3299:23495+13	5167  3A38F2  		ld	a,(YF238)
3300:23508+4	516A  47      		ld	b,a
3301:23512+13	516B  3A37F2  		ld	a,(YF237)
3302:23525+4	516E  90      		sub	b			; length of the inputline
3303:23529+7+5	516F  2806    		jr	z,A5177			; empty inputline, restart line input
3304:23536+4	5171  47      		ld	b,a
3305:23540+17	5172  CD4F53  	A5172:	call	A534F
3306:23557+8+5	5175  10FB    		djnz	A5172
3307:23565+10	5177  C3E050  	A5177:	jp	A50E0			; restart lineinput
3308:				
3309:				; lineinput CTRL-J
3310:				
3311:23575+4	517A  78      	A517A:	ld	a,b
3312:23579+13	517B  323AF2  		ld	(YF23A),a		; store current linelength (for secret message)
3313:23592+17	517E  CD8351  		call	A5183			; newline
3314:23609+12	5181  1881    	A5181:	jr	A5104
3315:				;
3316:23621+7	5183  3E0D    	A5183:	ld	a,00DH
3317:23628+17	5185  CDA853  		call	A53A8			; console output
3318:23645+7	5188  3E0A    		ld	a,00AH
3319:23652+10	518A  C3A853  		jp	A53A8			; console output
3320:				
3321:				; lineinput CR key
3322:				
3323:23662+10	518D  D1      	A518D:	pop	de
3324:23672+17	518E  CDA853  	A518E:	call	A53A8			; console output
3325:23689+11	5191  D5      		push	de
3326:23700+6	5192  13      		inc	de
3327:23706+4	5193  78      		ld	a,b
3328:23710+7	5194  12      		ld	(de),a
3329:23717+4	5195  B9      		cp	c
3330:23721+11	5196  F5      		push	af
3331:23732+6	5197  13      		inc	de
3332:23738+4	5198  48      		ld	c,b
3333:23742+4	5199  AF      		xor	a
3334:23746+4	519A  47      		ld	b,a
3335:23750+4	519B  B1      		or	c
3336:23754+7+5	519C  2805    		jr	z,A51A3
3337:23761+10	519E  2159F4  		ld	hl,KBUF+58
3338:23771+16+5	51A1  EDB0    		ldir
3339:23787+10	51A3  F1      	A51A3:	pop	af
3340:23797+7+5	51A4  2803    		jr	z,A51A9
3341:23804+7	51A6  3E0D    		ld	a,00DH
3342:23811+7	51A8  12      		ld	(de),a
3343:23818+10	51A9  D1      	A51A9:	pop	de
3344:23828+10	51AA  C9      		ret
3345:				
3346:				; lineinput LEFT key, BS key (BS)
3347:				
3348:23838+13	51AB  3A3AF2  	A51AB:	ld	a,(YF23A)
3349:23851+4	51AE  A0      		and	b
3350:23855+7	51AF  FE7F    		cp	07FH
3351:23862+10	51B1  CA4452  		jp	z,A5244			; secret programmers message
3352:23872+4	51B4  04      		inc	b
3353:23876+4	51B5  05      		dec	b
3354:23880+7+5	51B6  2824    		jr	z,A51DC
3355:23887+4	51B8  05      		dec	b
3356:23891+10	51B9  DD2B    		dec	ix
3357:23901+17	51BB  CD4F53  		call	A534F
3358:23918+4	51BE  04      		inc	b
3359:23922+4	51BF  05      		dec	b
3360:23926+7+5	51C0  280C    		jr	z,A51CE
3361:23933+4	51C2  05      		dec	b
3362:23937+10	51C3  DD2B    		dec	ix
3363:23947+19	51C5  DD7E00  		ld	a,(ix+000H)
3364:23966+4	51C8  3D      		dec	a
3365:23970+7+5	51C9  2811    		jr	z,A51DC
3366:23977+4	51CB  04      		inc	b
3367:23981+10	51CC  DD23    		inc	ix
3368:23991+19	51CE  DD7E00  	A51CE:	ld	a,(ix+000H)
3369:24010+7	51D1  FE20    		cp	020H
3370:24017+7+5	51D3  3007    		jr	nc,A51DC
3371:24024+7	51D5  FE09    		cp	009H
3372:24031+7+5	51D7  2822    		jr	z,A51FB
3373:24038+17	51D9  CD4F53  		call	A534F
3374:24055+13	51DC  3A39F2  	A51DC:	ld	a,(YF239)
3375:24068+4	51DF  B7      		or	a			; insertmode ?
3376:24072+7+5	51E0  209F    		jr	nz,A5181		; yep,
3377:24079+4	51E2  14      		inc	d
3378:24083+4	51E3  15      		dec	d
3379:24087+7+5	51E4  289B    		jr	z,A5181
3380:24094+4	51E6  15      		dec	d
3381:24098+4	51E7  7A      		ld	a,d
3382:24102+4	51E8  BB      		cp	e
3383:24106+7+5	51E9  3096    		jr	nc,A5181
3384:24113+6	51EB  2B      		dec	hl
3385:24119+4	51EC  7A      		ld	a,d
3386:24123+7	51ED  FE01    		cp	001H
3387:24130+7+5	51EF  3890    		jr	c,A5181
3388:24137+6	51F1  2B      		dec	hl
3389:24143+7	51F2  7E      		ld	a,(hl)
3390:24150+4	51F3  3D      		dec	a
3391:24154+6	51F4  23      		inc	hl
3392:24160+7+5	51F5  208A    		jr	nz,A5181
3393:24167+4	51F7  15      		dec	d
3394:24171+6	51F8  2B      		dec	hl
3395:24177+12	51F9  1886    		jr	A5181
3396:				;
3397:24189+11	51FB  E5      	A51FB:	push	hl
3398:24200+11	51FC  C5      		push	bc
3399:24211+13	51FD  3A38F2  		ld	a,(YF238)
3400:24224+4	5200  4F      		ld	c,a			; start of the inputline
3401:24228+4	5201  04      		inc	b
3402:24232+4	5202  05      		dec	b
3403:24236+7+5	5203  2815    		jr	z,A521A
3404:24243+10	5205  2159F4  		ld	hl,KBUF+58
3405:24253+7	5208  7E      	A5208:	ld	a,(hl)
3406:24260+6	5209  23      		inc	hl
3407:24266+7	520A  FE01    		cp	001H
3408:24273+7+5	520C  280A    		jr	z,A5218
3409:24280+4	520E  0C      		inc	c
3410:24284+7	520F  FE20    		cp	020H
3411:24291+7+5	5211  3005    		jr	nc,A5218
3412:24298+7	5213  FE09    		cp	009H
3413:24305+7+5	5215  2813    		jr	z,A522A
3414:24312+4	5217  0C      		inc	c
3415:24316+8+5	5218  10EE    	A5218:	djnz	A5208
3416:24324+13	521A  3A37F2  	A521A:	ld	a,(YF237)		; current console columnpos
3417:24337+4	521D  91      		sub	c
3418:24341+7+5	521E  2806    		jr	z,A5226
3419:24348+4	5220  47      		ld	b,a
3420:24352+17	5221  CD4F53  	A5221:	call	A534F
3421:24369+8+5	5224  10FB    		djnz	A5221
3422:24377+10	5226  C1      	A5226:	pop	bc
3423:24387+10	5227  E1      		pop	hl
3424:24397+12	5228  18B2    		jr	A51DC
3425:				;
3426:24409+4	522A  79      	A522A:	ld	a,c
3427:24413+7	522B  C607    		add	a,007H
3428:24420+7	522D  E6F8    		and	0F8H
3429:24427+4	522F  4F      		ld	c,a
3430:24431+12	5230  18E6    		jr	A5218
3431:				
3432:				; lineinput INS key (INSERT)
3433:				
3434:24443+13	5232  3A39F2  	A5232:	ld	a,(YF239)
3435:24456+7	5235  EE01    		xor	001H
3436:24463+12	5237  1805    		jr	A523E			; toggle insertmode
3437:				
3438:				; unused code
3439:				
3440:24475+4	5239  AF      		xor	a
3441:24479+12	523A  1802    		jr	A523E
3442:				
3443:				; unused code
3444:				
3445:24491+7	523C  3E01    		ld	a,001H
3446:				
3447:24498+13	523E  3239F2  	A523E:	ld	(YF239),a
3448:24511+10	5241  C30451  		jp	A5104
3449:				
3450:				;	  Subroutine display message of programmer (not needed)
3451:				;	     Inputs  
3452:				;	     Outputs
3453:				;         Remark     activated by:
3454:				;                    input 127 or 255 chars, press CTRL-J, press BS or LEFT
3455:				
3456:24521+4	5244  AF      	A5244:	xor	a
3457:24525+13	5245  323AF2  		ld	(YF23A),a
3458:24538+11	5248  C5      		push	bc
3459:24549+7	5249  0610    		ld	b,16
3460:24556+10	524B  117D54  		ld	de,T547D
3461:24566+10	524E  210000  		ld	hl,0
3462:24576+11	5251  E5      	A5251:	push	hl
3463:24587+17	5252  CDD24E  		call	A4ED2			; get decoded characterpair
3464:24604+7	5255  C620    		add	a,020H
3465:24611+17	5257  CDA853  		call	A53A8			; console output
3466:24628+4	525A  7C      		ld	a,h
3467:24632+7	525B  C620    		add	a,020H
3468:24639+17	525D  CDA853  		call	A53A8			; console output
3469:24656+10	5260  E1      		pop	hl
3470:24666+6	5261  23      		inc	hl
3471:24672+8+5	5262  10ED    		djnz	A5251
3472:24680+10	5264  C1      		pop	bc
3473:				
3474:				; lineinput HOME key (NEWLINE)
3475:				
3476:24690+7	5265  3E40    	A5265:	ld	a,040H
3477:24697+10	5267  D1      		pop	de
3478:24707+17	5268  CD8E51  		call	A518E
3479:24724+17	526B  CD8351  		call	A5183			; newline
3480:24741+13	526E  3A38F2  		ld	a,(YF238)
3481:24754+4	5271  B7      		or	a			; start of the inputline at the begin of a line ?
3482:24758+10	5272  CAE050  		jp	z,A50E0			; yep, restart lineinput routine
3483:24768+4	5275  47      		ld	b,a
3484:24772+7	5276  3E20    		ld	a," "
3485:24779+17	5278  CDA853  	A5278:	call	A53A8			; console output
3486:24796+8+5	527B  10FB    		djnz	A5278
3487:24804+10	527D  C3E050  		jp	A50E0			; restart lineinput routine
3488:				
3489:				; lineinput DOWN key (COPYALL)
3490:				
3491:24814+7	5280  3EFF    	A5280:	ld	a,0FFH
3492:24821+12	5282  1831    		jr	A52B5
3493:				
3494:				; lineinput CTRL-L (SKIPUP)
3495:				
3496:24833+17	5284  CDE352  	A5284:	call	A52E3
3497:24850+10	5287  DA0451  		jp	c,A5104
3498:24860+11	528A  C5      		push	bc
3499:24871+4	528B  4F      		ld	c,a
3500:24875+7	528C  0600    		ld	b,000H
3501:24882+11	528E  09      		add	hl,bc
3502:24893+10	528F  C1      		pop	bc
3503:24903+4	5290  82      		add	a,d
3504:24907+4	5291  57      		ld	d,a
3505:24911+10	5292  C30451  		jp	A5104
3506:				
3507:				; lineinput SELECT key (COPYUP)
3508:				
3509:24921+17	5295  CDE352  	A5295:	call	A52E3
3510:24938+10	5298  DA0451  		jp	c,A5104
3511:24948+12	529B  1818    		jr	A52B5
3512:				
3513:				; lineinput DEL key (SKIP1)
3514:				
3515:24960+4	529D  7A      	A529D:	ld	a,d
3516:24964+4	529E  BB      		cp	e
3517:24968+10	529F  D20451  		jp	nc,A5104
3518:24978+4	52A2  14      		inc	d
3519:24982+7	52A3  7E      		ld	a,(hl)
3520:24989+4	52A4  3D      		dec	a
3521:24993+6	52A5  23      		inc	hl
3522:24999+10	52A6  C20451  		jp	nz,A5104
3523:25009+4	52A9  14      		inc	d
3524:25013+6	52AA  23      		inc	hl
3525:25019+10	52AB  C30451  		jp	A5104
3526:				
3527:				; lineinput RIGHT key (COPY1)
3528:				
3529:25029+7	52AE  7E      	A52AE:	ld	a,(hl)
3530:25036+4	52AF  3D      		dec	a
3531:25040+7	52B0  3E01    		ld	a,001H
3532:25047+7+5	52B2  2001    		jr	nz,A52B5
3533:25054+4	52B4  3C      		inc	a
3534:25058+11	52B5  F5      	A52B5:	push	af
3535:25069+4	52B6  AF      		xor	a
3536:25073+13	52B7  3239F2  		ld	(YF239),a		; insertmode off
3537:25086+4	52BA  78      		ld	a,b
3538:25090+4	52BB  B9      		cp	c
3539:25094+7+5	52BC  3021    		jr	nc,A52DF
3540:25101+4	52BE  7A      		ld	a,d
3541:25105+4	52BF  BB      		cp	e
3542:25109+7+5	52C0  301D    		jr	nc,A52DF
3543:25116+7	52C2  7E      		ld	a,(hl)
3544:25123+7	52C3  FE01    		cp	001H
3545:25130+7+5	52C5  2006    		jr	nz,A52CD
3546:25137+4	52C7  78      		ld	a,b
3547:25141+4	52C8  3C      		inc	a
3548:25145+4	52C9  B9      		cp	c
3549:25149+7+5	52CA  3013    		jr	nc,A52DF
3550:25156+7	52CC  7E      		ld	a,(hl)
3551:25163+6	52CD  23      	A52CD:	inc	hl
3552:25169+19	52CE  DD7700  		ld	(ix+000H),a
3553:25188+10	52D1  DD23    		inc	ix
3554:25198+17	52D3  CD5D53  		call	A535D
3555:25215+4	52D6  04      		inc	b
3556:25219+4	52D7  14      		inc	d
3557:25223+10	52D8  F1      		pop	af
3558:25233+4	52D9  3D      		dec	a
3559:25237+7+5	52DA  20D9    		jr	nz,A52B5
3560:25244+10	52DC  C30451  		jp	A5104
3561:				;
3562:25254+10	52DF  F1      	A52DF:	pop	af
3563:25264+10	52E0  C30451  		jp	A5104
3564:				;
3565:25274+17	52E3  CD4E54  	A52E3:	call	A544E			; BDOS 8 (direct input)
3566:25291+7	52E6  FE01    		cp	001H
3567:25298+7+5	52E8  2035    		jr	nz,A531F
3568:25305+17	52EA  CD4E54  		call	A544E			; BDOS 8 (direct input)
3569:25322+7	52ED  FE40    		cp	040H
3570:25329+7+5	52EF  382E    		jr	c,A531F
3571:25336+7	52F1  FE60    		cp	060H
3572:25343+7+5	52F3  302A    		jr	nc,A531F
3573:25350+11	52F5  E5      		push	hl
3574:25361+11	52F6  D5      		push	de
3575:25372+11	52F7  C5      		push	bc
3576:25383+14	52F8  FD210000		ld	iy,00000H
3577:25397+4	52FC  37      	A52FC:	scf
3578:25401+11	52FD  F5      		push	af
3579:25412+7	52FE  3E01    		ld	a,001H
3580:25419+17	5300  CD1F53  		call	A531F
3581:25436+7+5	5303  3815    		jr	c,A531A
3582:25443+4	5305  4F      		ld	c,a
3583:25447+7	5306  0600    		ld	b,000H
3584:25454+11	5308  09      		add	hl,bc
3585:25465+4	5309  82      		add	a,d
3586:25469+4	530A  57      		ld	d,a
3587:25473+15	530B  FDE5    		push	iy
3588:25488+10	530D  F1      		pop	af
3589:25498+4	530E  81      		add	a,c
3590:25502+11	530F  F5      		push	af
3591:25513+14	5310  FDE1    		pop	iy
3592:25527+6	5312  23      		inc	hl
3593:25533+10	5313  F1      		pop	af
3594:25543+7	5314  BE      		cp	(hl)
3595:25550+6	5315  2B      		dec	hl
3596:25556+7+5	5316  20E4    		jr	nz,A52FC
3597:25563+15	5318  FDE5    		push	iy
3598:25578+10	531A  F1      	A531A:	pop	af
3599:25588+10	531B  C1      		pop	bc
3600:25598+10	531C  D1      		pop	de
3601:25608+10	531D  E1      		pop	hl
3602:25618+10	531E  C9      		ret
3603:				;
3604:25628+11	531F  C5      	A531F:	push	bc
3605:25639+11	5320  F5      		push	af
3606:25650+4	5321  7B      		ld	a,e
3607:25654+4	5322  92      		sub	d
3608:25658+7+5	5323  3826    		jr	c,A534B
3609:25665+7+5	5325  2824    		jr	z,A534B
3610:25672+4	5327  3D      		dec	a
3611:25676+7+5	5328  2821    		jr	z,A534B
3612:25683+4	532A  4F      		ld	c,a
3613:25687+7	532B  0600    		ld	b,000H
3614:25694+10	532D  F1      		pop	af
3615:25704+11	532E  E5      		push	hl
3616:25715+11	532F  F5      		push	af
3617:25726+7	5330  7E      		ld	a,(hl)
3618:25733+4	5331  3D      		dec	a
3619:25737+7+5	5332  2002    		jr	nz,A5336
3620:25744+6	5334  23      		inc	hl
3621:25750+4	5335  0D      		dec	c
3622:25754+10	5336  F1      	A5336:	pop	af
3623:25764+4	5337  0C      		inc	c
3624:25768+4	5338  0D      		dec	c
3625:25772+7+5	5339  2004    		jr	nz,A533F
3626:25779+10	533B  E1      		pop	hl
3627:25789+10	533C  C1      		pop	bc
3628:25799+4	533D  37      		scf
3629:25803+10	533E  C9      		ret
3630:				;
3631:25813+6	533F  23      	A533F:	inc	hl
3632:25819+16+5	5340  EDB1    		cpir
3633:25835+10	5342  E1      		pop	hl
3634:25845+7+5	5343  2007    		jr	nz,A534C
3635:25852+4	5345  7B      		ld	a,e
3636:25856+4	5346  92      		sub	d
3637:25860+4	5347  3D      		dec	a
3638:25864+4	5348  91      		sub	c
3639:25868+10	5349  C1      		pop	bc
3640:25878+10	534A  C9      		ret
3641:				;
3642:25888+10	534B  F1      	A534B:	pop	af
3643:25898+10	534C  C1      	A534C:	pop	bc
3644:25908+4	534D  37      		scf
3645:25912+10	534E  C9      		ret
3646:				;
3647:25922+7	534F  3E08    	A534F:	ld	a,008H
3648:25929+17	5351  CDA853  		call	A53A8			; console output
3649:25946+7	5354  3E20    		ld	a,020H
3650:25953+17	5356  CDA853  		call	A53A8			; console output
3651:25970+7	5359  3E08    		ld	a,008H
3652:25977+12	535B  184B    		jr	A53A8			; console output
3653:				;
3654:25989+7	535D  FE20    	A535D:	cp	020H
3655:25996+7+5	535F  3047    		jr	nc,A53A8		; console output
3656:26003+7	5361  FE09    		cp	009H
3657:26010+7+5	5363  2843    		jr	z,A53A8			; console output
3658:26017+7	5365  FE01    		cp	001H
3659:26024+7+5	5367  283F    		jr	z,A53A8			; console output
3660:26031+11	5369  F5      		push	af
3661:26042+7	536A  3E5E    		ld	a,"^"
3662:26049+17	536C  CDA853  		call	A53A8			; console output
3663:26066+10	536F  F1      		pop	af
3664:26076+7	5370  F640    		or	040H
3665:26083+12	5372  1834    		jr	A53A8			; console output
3666:				
3667:				; keytable lineinput
3668:				;
3669:				; first table contains all keycodes, code 8 at the end is a fake one for 'other key', because it is already in the table
3670:				; second table contains all serviceroutines, but in reserve order (so last one belongs to the first keycode)
3671:				
3672:     -	5374  067F080D	T5374:	defb	006H,07FH,008H,00DH,00AH,015H,00BH,00CH
	      0A150B0C
3673:     -	537C  1B12181C		defb	01BH,012H,018H,01CH,01DH,01EH,01FH,001H
	      1D1E1F01
3674:     -	5384  08      		defb	008H
3675:				
3676:     -	5385  3B51    		defw	A513B
3677:     -	5387  1E518052		defw	A511E,A5280,A5166,A51AB,A52AE,A5295,A5232,A5166
	      6651AB51
	      AE529552
	      32526651
3678:     -	5397  84526552		defw	A5284,A5265,A5166,A517A,A518D,A51AB,A529D,A5104
	      66517A51
	      8D51AB51
	      9D520451
3679:				
3680:     -	0011          	NKEYNT	equ	($-T5374)/3
3681:				
3682:				
3683:				;	  Subroutine BDOS 02 (console output)
3684:				;	     Inputs  
3685:				;	     Outputs ________________________ 
3686:				
3687:26095+4	53A7  7B      	A53A7:	ld	a,e
3688:26099+17	53A8  CDAFF2  	A53A8:	call	XF2AF
3689:26116+7	53AB  FE0B    		cp	00BH
3690:26123+7+5	53AD  2839    		jr	z,A53E8
3691:26130+7	53AF  FE0C    		cp	00CH
3692:26137+7+5	53B1  2835    		jr	z,A53E8
3693:26144+7	53B3  FE1C    		cp	01CH
3694:26151+7+5	53B5  281E    		jr	z,A53D5
3695:26158+7	53B7  FE1D    		cp	01DH
3696:26165+7+5	53B9  2835    		jr	z,A53F0
3697:26172+7	53BB  FE0D    		cp	00DH
3698:26179+7+5	53BD  2829    		jr	z,A53E8
3699:26186+7	53BF  FE08    		cp	008H
3700:26193+7+5	53C1  282D    		jr	z,A53F0
3701:26200+7	53C3  FE09    		cp	009H
3702:26207+7+5	53C5  2831    		jr	z,A53F8
3703:26214+7	53C7  FE7F    		cp	07FH
3704:26221+7+5	53C9  2825    		jr	z,A53F0
3705:26228+7	53CB  FE20    		cp	020H
3706:26235+7+5	53CD  3806    		jr	c,A53D5
3707:26242+11	53CF  E5      		push	hl
3708:26253+10	53D0  2137F2  		ld	hl,YF237
3709:26263+11	53D3  34      		inc	(hl)			; increase console columnpos
3710:26274+10	53D4  E1      		pop	hl
3711:26284+11	53D5  C5      	A53D5:	push	bc
3712:26295+4	53D6  47      		ld	b,a
3713:26299+17	53D7  CD1254  		call	A5412
3714:26316+4	53DA  78      		ld	a,b
3715:26320+17	53DB  CD8F40  		call	A408F			; output to screen
3716:26337+13	53DE  3A3BF2  		ld	a,(YF23B)
3717:26350+4	53E1  B7      		or	a			; console output also to printer ?
3718:26354+4	53E2  78      		ld	a,b
3719:26358+10	53E3  C1      		pop	bc
3720:26368+5+6	53E4  C8      		ret	z			; nope, quit
3721:26373+10	53E5  C39B40  		jp	A409B			; output to printer
3722:				;
3723:26383+11	53E8  F5      	A53E8:	push	af
3724:26394+4	53E9  AF      		xor	a
3725:26398+13	53EA  3237F2  		ld	(YF237),a		; console columpos
3726:26411+10	53ED  F1      		pop	af
3727:26421+12	53EE  18E5    		jr	A53D5
3728:				;
3729:26433+11	53F0  E5      	A53F0:	push	hl
3730:26444+10	53F1  2137F2  		ld	hl,YF237
3731:26454+11	53F4  35      		dec	(hl)			; decrease console columnpos
3732:26465+10	53F5  E1      		pop	hl
3733:26475+12	53F6  18DD    		jr	A53D5
3734:				;
3735:26487+7	53F8  3E20    	A53F8:	ld	a," "
3736:26494+17	53FA  CDA853  		call	A53A8			; console output
3737:26511+13	53FD  3A37F2  		ld	a,(YF237)
3738:26524+7	5400  E607    		and	007H
3739:26531+7+5	5402  20F4    		jr	nz,A53F8		; to the next console tabposition
3740:26538+10	5404  C9      		ret
3741:				;
3742:26548+7	5405  FE10    	A5405:	cp	010H			; CTRL-P ?
3743:26555+7+5	5407  2814    		jr	z,A541D			; yep, handle it
3744:26562+7	5409  FE0E    		cp	00EH			; CTRL-N ?
3745:26569+7+5	540B  2810    		jr	z,A541D			; yep, handle it
3746:26576+7	540D  FE03    		cp	003H			; CTRL-C ?
3747:26583+7+5	540F  280C    		jr	z,A541D			; yep, handle it
3748:26590+10	5411  C9      		ret				; nope, quit
3749:				;
3750:26600+17	5412  CD3440  	A5412:	call	A4034			; check if keyboardinput available
3751:26617+5+6	5415  C8      		ret	z			; nope, quit
3752:26622+7	5416  FE13    		cp	013H			; CTRL-S ?
3753:26629+7+5	5418  20EB    		jr	nz,A5405		; nope, check other specials
3754:26636+17	541A  CD7840  		call	A4078			; get keyboardinput (the CTRL-S)
3755:									; next wait for other consoleinput
3756:26653+17	541D  CD7840  	A541D:	call	A4078			; get keyboardinput
3757:26670+7	5420  FE10    		cp	010H
3758:26677+7+5	5422  280D    		jr	z,A5431			; CTRL-P, enable printer output
3759:26684+7	5424  FE0E    		cp	00EH
3760:26691+7+5	5426  280F    		jr	z,A5437			; CTRL-N, disable printer output
3761:26698+7	5428  FE03    		cp	003H			; CTRL-C ?
3762:26705+5+6	542A  C0      		ret	nz			; nope, quit
3763:26710+16	542B  2A25F3  		ld	hl,(YF325)
3764:26726+10	542E  C3E8F1  		jp	XF1E8			; start abort handler in DOS memory
3765:				;
3766:26736+7	5431  3E01    	A5431:	ld	a,1
3767:26743+13	5433  323BF2  		ld	(YF23B),a
3768:26756+10	5436  C9      		ret
3769:				;
3770:26766+4	5437  AF      	A5437:	xor	a
3771:26770+13	5438  323BF2  		ld	(YF23B),a
3772:26783+10	543B  C9      		ret
3773:				
3774:				;	  Subroutine BDOS 0B (console status)
3775:				;	     Inputs  
3776:				;	     Outputs ________________________ 
3777:				
3778:26793+17	543C  CD1254  	A543C:	call	A5412
3779:26810+7	543F  3E00    		ld	a,000H
3780:26817+5+6	5441  C8      		ret	z
3781:26822+7	5442  F6FF    		or	0FFH
3782:26829+10	5444  C9      		ret
3783:				
3784:				;	  Subroutine BDOS 01 (console input)
3785:				;	     Inputs  
3786:				;	     Outputs ________________________ 
3787:				
3788:26839+17	5445  CD4E54  	A5445:	call	A544E			; BDOS 8 (direct input)
3789:26856+11	5448  F5      		push	af
3790:26867+17	5449  CDA853  		call	A53A8			; console output
3791:26884+10	544C  F1      		pop	af
3792:26894+10	544D  C9      		ret
3793:				
3794:				;	  Subroutine BDOS 08 (direct input)
3795:				;	     Inputs  
3796:				;	     Outputs ________________________ 
3797:				
3798:26904+17	544E  CD1D54  	A544E:	call	A541D
3799:26921+7+5	5451  28FB    		jr	z,A544E
3800:26928+10	5453  C9      		ret
3801:				
3802:				;	  Subroutine BDOS 06 (direct console i/o)
3803:				;	     Inputs  A=0FFH for console input, A<>0FFH for console output
3804:				;	     Outputs A=input (console input)
3805:				
3806:26938+4	5454  7B      	A5454:	ld	a,e
3807:26942+7	5455  FEFF    		cp	0FFH			; console input ?
3808:26949+10	5457  C28F40  		jp	nz,A408F		; console output, output to screen and quit
3809:26959+17	545A  CD3440  		call	A4034			; check if keyboardinput available
3810:26976+10	545D  C27840  		jp	nz,A4078		; yep, get keyboardinput and quit
3811:26986+4	5460  AF      		xor	a
3812:26990+10	5461  C9      		ret
3813:				
3814:				;	  Subroutine BDOS 07
3815:				;	     Inputs  
3816:				;	     Outputs ________________________ 
3817:				
3818:27000+10	5462  C37840  	A5462:	jp	A4078			; get keyboardinput
3819:				
3820:				;	  Subroutine BDOS 05 (printer output)
3821:				;	     Inputs  
3822:				;	     Outputs ________________________ 
3823:				
3824:27010+4	5465  7B      	A5465:	ld	a,e
3825:27014+11	5466  F5      	A5466:	push	af
3826:27025+17	5467  CD1254  		call	A5412
3827:27042+10	546A  F1      		pop	af
3828:27052+10	546B  C39B40  		jp	A409B			; output to printer
3829:				
3830:				;	  Subroutine BDOS 03 (auxiliary input)
3831:				;	     Inputs  
3832:				;	     Outputs ________________________ 
3833:				
3834:27062+17	546E  CD1254  	A546E:	call	A5412
3835:27079+10	5471  C371F3  		jp	XF371
3836:				
3837:				;	  Subroutine BDOS 04 (auxiliary output)
3838:				;	     Inputs  
3839:				;	     Outputs ________________________ 
3840:				
3841:27089+4	5474  7B      	A5474:	ld	a,e
3842:27093+11	5475  F5      	A5475:	push	af
3843:27104+17	5476  CD1254  		call	A5412
3844:27121+10	5479  F1      		pop	af
3845:27131+10	547A  C374F3  		jp	XF374
3846:				
3847:				;
3848:				; Programmers message, decoded in FAT entries (not needed)
3849:				;
3850:				; MSXDOS BY T PATERSON J SUZUKI   @
3851:				
3852:     -	547D  ED8C93EF	T547D:	defb	0EDH,08CH,093H,0EFH,00CH,088H,039H,040H
	      0C883940
3853:     -	5485  03704897		defb	003H,070H,048H,097H,0F2H,0FCH,0BAH,080H
	      F2FCBA80
3854:     -	548D  0ACCB55E		defb	00AH,0CCH,0B5H,05EH,0AFH,029H,000H,000H
	      AF290000
3855:				
3856:				; unused code
3857:				
3858:27141+10	5495  C9      		ret
3859:				
3860:				
3861:				
3862:27151+17	5496  CDB2F2  	A5496:	call	XF2B2
3863:27168+17	5499  CDC054  		call	A54C0			; get time and date values
3864:27185+4	549C  79      		ld	a,c
3865:27189+4	549D  87      		add	a,a
3866:27193+4	549E  87      		add	a,a
3867:27197+4	549F  87      		add	a,a
3868:27201+8	54A0  CB10    		rl	b
3869:27209+4	54A2  87      		add	a,a
3870:27213+8	54A3  CB10    		rl	b
3871:27221+4	54A5  87      		add	a,a
3872:27225+8	54A6  CB10    		rl	b
3873:27233+8	54A8  CB3A    		srl	d
3874:27241+4	54AA  B2      		or	d
3875:27245+4	54AB  5F      		ld	e,a
3876:27249+4	54AC  50      		ld	d,b
3877:27253+20	54AD  ED4B49F2		ld	bc,(YF249)
3878:27273+4	54B1  79      		ld	a,c
3879:27277+4	54B2  87      		add	a,a
3880:27281+4	54B3  87      		add	a,a
3881:27285+4	54B4  87      		add	a,a
3882:27289+4	54B5  87      		add	a,a
3883:27293+4	54B6  87      		add	a,a
3884:27297+8	54B7  CB10    		rl	b
3885:27305+4	54B9  4F      		ld	c,a
3886:27309+13	54BA  3A48F2  		ld	a,(YF248)		; current day
3887:27322+4	54BD  B1      		or	c
3888:27326+4	54BE  4F      		ld	c,a
3889:27330+10	54BF  C9      		ret
3890:				;
3891:27340+17	54C0  CD7941  	A54C0:	call	A4179			; get date and time
3892:27357+7+5	54C3  3846    		jr	c,A550B			; from clockchip,
3893:27364+11	54C5  D5      		push	de
3894:27375+11	54C6  E5      		push	hl
3895:27386+20	54C7  ED5B4CF2		ld	de,(YF24C)		; days since 1-1-1980
3896:27406+4	54CB  B7      		or	a
3897:27410+15	54CC  ED52    		sbc	hl,de
3898:27425+10	54CE  E1      		pop	hl
3899:27435+10	54CF  D1      		pop	de
3900:27445+5+6	54D0  C8      		ret	z
3901:27450+16	54D1  224CF2  		ld	(YF24C),hl
3902:27466+11	54D4  C5      		push	bc
3903:27477+11	54D5  D5      		push	de
3904:27488+4	54D6  4D      		ld	c,l
3905:27492+4	54D7  44      		ld	b,h
3906:27496+10	54D8  11B505  		ld	de,4*365+1
3907:27506+17	54DB  CD2F49  		call	A492F
3908:27523+4	54DE  79      		ld	a,c
3909:27527+4	54DF  87      		add	a,a
3910:27531+4	54E0  87      		add	a,a
3911:27535+4	54E1  87      		add	a,a
3912:27539+7	54E2  0600    		ld	b,000H
3913:27546+10	54E4  113455  		ld	de,T5534
3914:27556+17	54E7  CD1555  		call	A5515
3915:27573+8	54EA  CB3F    		srl	a
3916:27581+7+5	54EC  3004    		jr	nc,A54F2
3917:27588+10	54EE  11C800  		ld	de,200
3918:27598+11	54F1  19      		add	hl,de
3919:27609+17	54F2  CD2355  	A54F2:	call	A5523			; setup days in februari
3920:27626+7	54F5  3E01    		ld	a,001H
3921:27633+10	54F7  112BF2  		ld	de,YF22B
3922:27643+17	54FA  CD1555  		call	A5515
3923:27660+13	54FD  3249F2  		ld	(YF249),a
3924:27673+4	5500  2C      		inc	l
3925:27677+4	5501  7D      		ld	a,l
3926:27681+13	5502  3248F2  		ld	(YF248),a		; current day
3927:27694+17	5505  CD8855  	A5505:	call	A5588
3928:27711+10	5508  D1      		pop	de
3929:27721+10	5509  C1      		pop	bc
3930:27731+10	550A  C9      		ret
3931:				;
3932:27741+11	550B  C5      	A550B:	push	bc
3933:27752+11	550C  D5      		push	de
3934:27763+16	550D  2A4AF2  		ld	hl,(YF24A)
3935:27779+17	5510  CD9D55  		call	A559D			; calculate days since 1-1-1980
3936:27796+12	5513  18F0    		jr	A5505
3937:				;
3938:27808+4	5515  EB      	A5515:	ex	de,hl
3939:27812+7	5516  4E      		ld	c,(hl)
3940:27819+6	5517  23      		inc	hl
3941:27825+4	5518  EB      		ex	de,hl
3942:27829+4	5519  B7      		or	a
3943:27833+15	551A  ED42    		sbc	hl,bc
3944:27848+7+5	551C  3803    		jr	c,A5521
3945:27855+4	551E  3C      		inc	a
3946:27859+12	551F  18F4    		jr	A5515
3947:				;
3948:27871+11	5521  09      	A5521:	add	hl,bc
3949:27882+10	5522  C9      		ret
3950:				;
3951:27892+17	5523  CDB5F2  	A5523:	call	XF2B5
3952:27909+13	5526  324AF2  		ld	(YF24A),a		; year (offset)
3953:27922+7	5529  E603    	A5529:	and	003H
3954:27929+7	552B  3E1C    		ld	a,28
3955:27936+7+5	552D  2001    		jr	nz,A5530
3956:27943+4	552F  3C      		inc	a
3957:27947+13	5530  322CF2  	A5530:	ld	(YF22B+1),a
3958:27960+10	5533  C9      		ret
3959:				;
3960:				;
3961:     -	5534  C8A6C8A5	T5534:	defb	200,166,200,165,200,165,200,165
	      C8A5C8A5
3962:				
3963:				;	  Subroutine BDOS 2A (get date)
3964:				;	     Inputs  
3965:				;	     Outputs ________________________ 
3966:				
3967:27970+4	553C  AF      	A553C:	xor	a
3968:27974+13	553D  3206F3  		ld	(YF306),a		; no CP/M call
3969:27987+17	5540  CDC054  		call	A54C0			; get time and date values
3970:28004+16	5543  2A4AF2  		ld	hl,(YF24A)
3971:28020+10	5546  11BC07  		ld	de,1980
3972:28030+11	5549  19      		add	hl,de
3973:28041+20	554A  ED5B48F2		ld	de,(YF248)		; current day and month
3974:28061+13	554E  3A4EF2  		ld	a,(YF24E)
3975:28074+10	5551  C9      		ret
3976:				
3977:				;	  Subroutine BDOS 2B (set date)
3978:				;	     Inputs  
3979:				;	     Outputs ________________________ 
3980:				
3981:28084+10	5552  0144F8  	A5552:	ld	bc,-1980
3982:28094+11	5555  09      		add	hl,bc
3983:28105+7+5	5556  3042    		jr	nc,A559A		; year <1980, error
3984:28112+4	5558  7C      		ld	a,h
3985:28116+4	5559  B7      		or	a
3986:28120+7+5	555A  203E    		jr	nz,A559A		; yearoffset not in 1 byte, error
3987:28127+4	555C  7D      		ld	a,l
3988:28131+7	555D  FE78    		cp	120
3989:28138+7+5	555F  3039    		jr	nc,A559A		; year >2099, error
3990:28145+17	5561  CD2955  		call	A5529			; setup febuari days
3991:28162+4	5564  1C      		inc	e
3992:28166+4	5565  1D      		dec	e
3993:28170+7+5	5566  2832    		jr	z,A559A			; day 0, error
3994:28177+4	5568  7A      		ld	a,d
3995:28181+4	5569  B7      		or	a
3996:28185+7+5	556A  282E    		jr	z,A559A			; month 0, error
3997:28192+7	556C  FE0D    		cp	12+1
3998:28199+7+5	556E  302A    		jr	nc,A559A		; month >12, error
3999:28206+11	5570  E5      		push	hl
4000:28217+10	5571  212AF2  		ld	hl,YF22B-1
4001:28227+4	5574  85      		add	a,l
4002:28231+4	5575  6F      		ld	l,a
4003:28235+7+5	5576  3001    		jr	nc,A5579
4004:28242+4	5578  24      		inc	h
4005:28246+7	5579  7E      	A5579:	ld	a,(hl)			; days in month
4006:28253+10	557A  E1      		pop	hl
4007:28263+4	557B  BB      		cp	e
4008:28267+7+5	557C  381C    		jr	c,A559A			; invalid day, error
4009:28274+20	557E  ED5348F2		ld	(YF248),de		; current day and month
4010:28294+17	5582  CD9D55  		call	A559D			; calculate days since 1-1-1980
4011:28311+17	5585  CD1541  		call	A4115			; store date (clockchip or otherwise)
4012:28328+20	5588  ED4B4CF2	A5588:	ld	bc,(YF24C)		; days since 1-1-1980
4013:28348+10	558C  110700  		ld	de,7
4014:28358+6	558F  03      		inc	bc
4015:28364+6	5590  03      		inc	bc
4016:28370+17	5591  CD2F49  		call	A492F
4017:28387+4	5594  7D      		ld	a,l
4018:28391+13	5595  324EF2  		ld	(YF24E),a
4019:28404+4	5598  AF      		xor	a
4020:28408+10	5599  C9      		ret
4021:				;
4022:28418+7	559A  3EFF    	A559A:	ld	a,0FFH
4023:28425+10	559C  C9      		ret
4024:				;
4025:28435+4	559D  7D      	A559D:	ld	a,l			; year (offset)
4026:28439+17	559E  CD2355  		call	A5523			; setup days in februari
4027:28456+4	55A1  4D      		ld	c,l
4028:28460+8	55A2  CB39    		srl	c
4029:28468+8	55A4  CB39    		srl	c			; /4
4030:28476+7	55A6  0600    		ld	b,0
4031:28483+10	55A8  11B505  		ld	de,4*365+1
4032:28493+17	55AB  CD1649  		call	A4916			; multiply
4033:28510+4	55AE  69      		ld	l,c
4034:28514+4	55AF  60      		ld	h,b
4035:28518+13	55B0  3A4AF2  		ld	a,(YF24A)		; year (offset)
4036:28531+7	55B3  E603    		and	003H
4037:28538+4	55B5  87      		add	a,a
4038:28542+10	55B6  113455  		ld	de,T5534
4039:28552+7	55B9  0600    		ld	b,0
4040:28559+4	55BB  3C      		inc	a
4041:28563+17	55BC  CDD255  		call	A55D2
4042:28580+10	55BF  112BF2  		ld	de,YF22B
4043:28590+13	55C2  3A49F2  		ld	a,(YF249)		; current month
4044:28603+17	55C5  CDD255  		call	A55D2
4045:28620+13	55C8  3A48F2  		ld	a,(YF248)		; current day
4046:28633+4	55CB  3D      		dec	a
4047:28637+4	55CC  4F      		ld	c,a
4048:28641+11	55CD  09      		add	hl,bc
4049:28652+16	55CE  224CF2  		ld	(YF24C),hl		; days since 1-1-1980
4050:28668+10	55D1  C9      		ret
4051:				;
4052:28678+4	55D2  3D      	A55D2:	dec	a
4053:28682+5+6	55D3  C8      		ret	z
4054:28687+4	55D4  EB      		ex	de,hl
4055:28691+7	55D5  4E      		ld	c,(hl)
4056:28698+6	55D6  23      		inc	hl
4057:28704+4	55D7  EB      		ex	de,hl
4058:28708+11	55D8  09      		add	hl,bc
4059:28719+12	55D9  18F7    		jr	A55D2
4060:				
4061:				;	  Subroutine BDOS 2C (get time)
4062:				;	     Inputs  
4063:				;	     Outputs ________________________ 
4064:				
4065:28731+4	55DB  AF      	A55DB:	xor	a
4066:28735+13	55DC  3206F3  		ld	(YF306),a		; no CP/M call
4067:28748+17	55DF  CDC054  		call	A54C0			; get time and date values
4068:28765+4	55E2  60      		ld	h,b
4069:28769+4	55E3  69      		ld	l,c
4070:28773+4	55E4  AF      		xor	a
4071:28777+10	55E5  C9      		ret
4072:				
4073:				;	  Subroutine BDOS 2D (set time)
4074:				;	     Inputs  
4075:				;	     Outputs ________________________ 
4076:				
4077:28787+4	55E6  44      	A55E6:	ld	b,h
4078:28791+4	55E7  4D      		ld	c,l
4079:28795+4	55E8  78      		ld	a,b
4080:28799+7	55E9  FE18    		cp	24
4081:28806+7+5	55EB  30AD    		jr	nc,A559A
4082:28813+7	55ED  3E3B    		ld	a,59
4083:28820+4	55EF  B9      		cp	c
4084:28824+7+5	55F0  38A8    		jr	c,A559A
4085:28831+4	55F2  BA      		cp	d
4086:28835+7+5	55F3  38A5    		jr	c,A559A
4087:28842+4	55F5  7B      		ld	a,e
4088:28846+7	55F6  FE64    		cp	100
4089:28853+7+5	55F8  30A0    		jr	nc,A559A
4090:28860+17	55FA  CD3041  		call	A4130			; store time (clockchip or otherwise)
4091:28877+4	55FD  AF      		xor	a
4092:28881+10	55FE  C9      		ret
4093:				
4094:				;	  Subroutine BDOS 2E (set verify flag)
4095:				;	     Inputs  
4096:				;	     Outputs ________________________ 
4097:				
4098:28891+4	55FF  7B      	A55FF:	ld	a,e
4099:28895+13	5600  320DF3  		ld	(RAWFLG),a
4100:28908+10	5603  C9      		ret
4101:				
4102:				;	  Subroutine Validate FCB filename
4103:				;	     Inputs  HL = adres of FCB+1,DE = destination
4104:				;	     Outputs ________________________ 
4105:				;	     Remark  is copied to 0F1F4H
4106:				
4107:28918+7	5604  7E      	A5604:	ld	a,(hl)
4108:28925+7	5605  FE20    		cp	" "
4109:28932+4	5607  37      		scf
4110:28936+5+6	5608  C8      		ret	z			; filename that start with a space is illegal, quit
4111:28941+10	5609  010208  		ld	bc,00802H		; first do the filename, then the fileextension
4112:28951+7	560C  FEE5    		cp	0E5H
4113:28958+7+5	560E  2012    		jr	nz,A5622		; not the charcode also used as deleted file marker
4114:28965+7	5610  3E05    		ld	a,005H
4115:28972+7	5612  12      		ld	(de),a
4116:28979+6	5613  23      		inc	hl
4117:28985+6	5614  13      		inc	de
4118:28991+4	5615  05      		dec	b			; use replacement charcode 005H, otherwise fileentry looks deleted
4119:28995+7	5616  3EE5    		ld	a,0E5H
4120:29002+17	5618  CD8156  		call	A5681			; is this a double byte 'header' char ?
4121:29019+7+5	561B  3005    		jr	nc,A5622		; nope, no special action
4122:29026+7	561D  7E      		ld	a,(hl)
4123:29033+7	561E  12      		ld	(de),a
4124:29040+6	561F  23      		inc	hl
4125:29046+6	5620  13      		inc	de
4126:29052+4	5621  05      		dec	b			; yep, copy 'follow' char
4127:29056+7	5622  7E      	A5622:	ld	a,(hl)
4128:29063+17	5623  CD8156  		call	A5681			; is this a double byte 'header' char ?
4129:29080+7+5	5626  3009    		jr	nc,A5631		; nope, do upcasing and check
4130:29087+7	5628  12      		ld	(de),a
4131:29094+6	5629  23      		inc	hl
4132:29100+6	562A  13      		inc	de			; copy 'header' char
4133:29106+4	562B  05      		dec	b
4134:29110+4	562C  37      		scf
4135:29114+5+6	562D  C8      		ret	z			; no 'follow' char, quit with error
4136:29119+7	562E  7E      		ld	a,(hl)
4137:29126+12	562F  1836    		jr	A5667			; copy 'follow' char and continue
4138:				;
4139:29138+13	5631  3A0EF3  	A5631:	ld	a,(YF30E)
4140:29151+4	5634  A7      		and	a
4141:29155+7	5635  7E      		ld	a,(hl)
4142:29162+7+5	5636  2814    		jr	z,A564C			; japanese have no accent chars,
4143:29169+7	5638  FE80    		cp	080H
4144:29176+7+5	563A  3810    		jr	c,A564C			; normal ASCII,
4145:29183+7	563C  FEBA    		cp	0BAH
4146:29190+7+5	563E  300C    		jr	nc,A564C
4147:29197+11	5640  E5      		push	hl			; 080H-0B9H accent chars
4148:29208+11	5641  C5      		push	bc
4149:29219+4	5642  4F      		ld	c,a
4150:29223+7	5643  0600    		ld	b,000H
4151:29230+10	5645  211656  		ld	hl,T5696-080H
4152:29240+11	5648  09      		add	hl,bc
4153:29251+7	5649  7E      		ld	a,(hl)			; get the upcase version of the accent char
4154:29258+10	564A  C1      		pop	bc
4155:29268+10	564B  E1      		pop	hl
4156:29278+7	564C  FE61    	A564C:	cp	"a"
4157:29285+7+5	564E  3806    		jr	c,A5656
4158:29292+7	5650  FE7B    		cp	"z"+1
4159:29299+7+5	5652  3002    		jr	nc,A5656
4160:29306+7	5654  D620    		sub	020H			; lowercase char, make upcase
4161:29313+7	5656  FE20    	A5656:	cp	020H
4162:29320+5+6	5658  D8      		ret	c			; control code are illegal, quit with error
4163:29325+11	5659  E5      		push	hl
4164:29336+11	565A  C5      		push	bc
4165:29347+10	565B  217756  		ld	hl,T5677
4166:29357+10	565E  010A00  		ld	bc,0000AH
4167:29367+16+5	5661  EDB1    		cpir				; one of the illegal chars ?
4168:29383+10	5663  C1      		pop	bc
4169:29393+10	5664  E1      		pop	hl
4170:29403+4	5665  37      		scf
4171:29407+5+6	5666  C8      		ret	z			; yep, quit with error
4172:29412+7	5667  12      	A5667:	ld	(de),a			; copy char
4173:29419+6	5668  23      		inc	hl
4174:29425+6	5669  13      		inc	de
4175:29431+8+5	566A  10B6    		djnz	A5622			; next char
4176:29439+7	566C  0603    		ld	b,003H
4177:29446+4	566E  0D      		dec	c
4178:29450+7+5	566F  20B1    		jr	nz,A5622		; now do the fileextension
4179:29457+4	5671  B7      		or	a			; flag no error
4180:29461+7	5672  7E      		ld	a,(hl)
4181:29468+13	5673  320CF3  		ld	(YF30C),a		; save the FCB EX byte
4182:29481+10	5676  C9      		ret
4183:				;
4184:				;
4185:     -	5677  2E222F5B	T5677:	defb	'."/[]:+=;,'
	      5D3A2B3D
	      3B2C
4186:				
4187:				;	  Subroutine check if double byte header char
4188:				;	     Inputs  ________________________
4189:				;	     Outputs ________________________ 
4190:				
4191:29491+11	5681  E5      	A5681:	push	hl
4192:29502+10	5682  210FF3  		ld	hl,YF30F
4193:29512+7	5685  BE      		cp	(hl)
4194:29519+4	5686  3F      		ccf
4195:29523+7+5	5687  300B    		jr	nc,A5694		; below (F30F), quit (not in range)
4196:29530+6	5689  23      		inc	hl
4197:29536+7	568A  BE      		cp	(hl)
4198:29543+7+5	568B  3807    		jr	c,A5694			; below (F310), quit (in range 1)
4199:29550+6	568D  23      		inc	hl
4200:29556+7	568E  BE      		cp	(hl)
4201:29563+4	568F  3F      		ccf
4202:29567+7+5	5690  3002    		jr	nc,A5694		; below (F311), quit (not in range)
4203:29574+6	5692  23      		inc	hl
4204:29580+7	5693  BE      		cp	(hl)
4205:29587+10	5694  E1      	A5694:	pop	hl
4206:29597+10	5695  C9      		ret
4207:				;
4208:				;	defb	" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹"
4209:     -	5696  809A4541	T5696:	defb	"EAAEEEIIIOOUUYAIOU¥¥¦§¨©ª«¬­®¯°°²²´´¶¶¸¸"
	      8E418F80
	      45454549
	      49498E8F
	      9092924F
	      994F5555
	      59999A9B
	      9C9D9E9F
	      41494F55
	      A5A5A6A7
	      A8A9AAAB
	      ACADAEAF
	      B0B0B2B2
	      B4B4B6B6
	      B8B8
4210:				
4211:				;	  Subroutine unsupported CP/M BDOS calls
4212:				;	     Inputs  
4213:				;	     Outputs ________________________ 
4214:				
4215:29607+4	56D0  AF      	A56D0:	xor	a
4216:29611+4	56D1  47      		ld	b,a
4217:29615+10	56D2  C9      		ret
4218:				;
4219:				;
4220:29625+4	56D3  FB      	A56D3:	ei
4221:29629+7	56D4  3E01    		ld	a,1
4222:29636+13	56D6  3206F3  		ld	(YF306),a		; assume CP/M compatible call
4223:29649+4	56D9  79      		ld	a,c
4224:29653+7	56DA  FE31    		cp	031H
4225:29660+7+5	56DC  30F2    		jr	nc,A56D0
4226:29667+7	56DE  D611    		sub	011H
4227:29674+7+5	56E0  2004    		jr	nz,A56E6
4228:29681+20	56E2  ED5307F3		ld	(YF307),de
4229:29701+4	56E6  3D      	A56E6:	dec	a
4230:29705+7+5	56E7  2004    		jr	nz,A56ED
4231:29712+20	56E9  ED5B07F3		ld	de,(YF307)
4232:29732+11	56ED  E5      	A56ED:	push	hl
4233:29743+10	56EE  210057  		ld	hl,T5700
4234:29753+19	56F1  E3      		ex	(sp),hl
4235:29772+11	56F2  E5      		push	hl
4236:29783+10	56F3  210D57  		ld	hl,T570D
4237:29793+7	56F6  0600    		ld	b,000H
4238:29800+11	56F8  09      		add	hl,bc
4239:29811+11	56F9  09      		add	hl,bc
4240:29822+7	56FA  46      		ld	b,(hl)
4241:29829+6	56FB  23      		inc	hl
4242:29835+7	56FC  66      		ld	h,(hl)
4243:29842+4	56FD  68      		ld	l,b
4244:29846+19	56FE  E3      		ex	(sp),hl
4245:29865+10	56FF  C9      		ret
4246:				;
4247:				;
4248:29875+11	5700  F5      	T5700:	push	af
4249:29886+13	5701  3A06F3  		ld	a,(YF306)
4250:29899+4	5704  B7      		or	a			; CP/M compatible call
4251:29903+7+5	5705  2804    		jr	z,A570B			; no, leave HL alone
4252:29910+10	5707  F1      		pop	af
4253:29920+4	5708  6F      		ld	l,a
4254:29924+4	5709  60      		ld	h,b			; CP/M compatible HL
4255:29928+10	570A  C9      		ret
4256:				;
4257:29938+10	570B  F1      	A570B:	pop	af
4258:29948+10	570C  C9      		ret
4259:				;
4260:				;
4261:     -	570D  A7404554	T570D:	defw	A40A7,A5445,A53A7,A546E,A5474,A5465,A5454,A5462
	      A7536E54
	      74546554
	      54546254
4262:     -	571D  4E54C9F1		defw	A544E,XF1C9,A50E0,A543C,A41EF,A509F,A50D5,A4462
	      E0503C54
	      EF419F50
	      D5506244
4263:     -	572D  6F45B84F		defw	A456F,A4FB8,A5006,A436C,A4775,A477D,A461D,A4392
	      06506C43
	      75477D47
	      1D469243
4264:     -	573D  4E50C450		defw	A504E,A50C4,A5058,A505D,A56D0,A56D0,A56D0,A56D0
	      58505D50
	      D056D056
	      D056D056
4265:     -	574D  D0568847		defw	A56D0,A4788,A4793,A501E,A50C8,A56D0,A47BE,A47B2
	      93471E50
	      C850D056
	      BE47B247
4266:     -	575D  D147D056		defw	A47D1,A56D0,A553C,A5552,A55DB,A55E6,A55FF,A46BA
	      3C555255
	      DB55E655
	      FF55BA46
4267:     -	576D  2047    		defw	A4720
4268:				
4269:29958+17	576F  CD1A74  	A576F:	call	INIHRD			; initialize diskhardware
4270:29975+4	5772  F3      		di
4271:29979+13	5773  3A99FD  		ld	a,(DEVICE)
4272:29992+4	5776  A7      		and	a			; abort disksystem init ?
4273:29996+5+6	5777  F8      		ret	m			; yep, quit
4274:30001+10	5778  C20C58  		jp	nz,A580C		; disksystem init already started by an other diskrom, skip init
4275:30011+10	577B  2120FB  		ld	hl,HOKVLD
4276:30021+12	577E  CB46    		bit	0,(hl)			; EXTBIO hook valid ?
4277:30033+7+5	5780  200C    		jr	nz,A578E
4278:30040+15	5782  CBC6    		set	0,(hl)
4279:30055+10	5784  21CAFF  		ld	hl,EXTBIO
4280:30065+7	5787  060F    		ld	b,00FH
4281:30072+10	5789  36C9    	A5789:	ld	(hl),0C9H
4282:30082+6	578B  23      		inc	hl
4283:30088+8+5	578C  10FB    		djnz	A5789			; nop, init EXTBIO,DISINT and ENAINT hooks
4284:30096+16	578E  2A48FC  	A578E:	ld	hl,(BOTTOM)
4285:30112+10	5791  1101C0  		ld	de,0C001H
4286:30122+11	5794  E7      		rst	020H			; at least 16Kb RAM ?
4287:30133+7+5	5795  300C    		jr	nc,A57A3		; nop, abort
4288:30140+7	5797  3E06    		ld	a,006H
4289:30147+17	5799  CD4101  		call	SNSMAT
4290:30164+4	579C  F3      		di
4291:30168+4	579D  0F      		rrca				; SHIFT key pressed ?
4292:30172+7+5	579E  3809    		jr	c,A57A9			; nop, cont
4293:30179+7	57A0  3E07    		ld	a,007H
4294:30186+11	57A2  DF      		rst	018H			; beep
4295:30197+7	57A3  3EFF    	A57A3:	ld	a,0FFH
4296:30204+13	57A5  3299FD  		ld	(DEVICE),a		; flag abort disksystem init
4297:30217+10	57A8  C9      		ret
4298:				;
4299:30227+10	57A9  2181F3  	A57A9:	ld	hl,0F380H+MYSIZE
4300:30237+10	57AC  11C9F1  		ld	de,XF1C9
4301:30247+4	57AF  A7      		and	a
4302:30251+15	57B0  ED52    		sbc	hl,de
4303:30266+10+7	57B2  D4FD5E  		call	nc,A5EE8		; allocate basic disksystem memory
4304:30276+5+6	57B5  D8      		ret	c			; failed, quit
4305:30281+11	57B6  E5      	A57B6:	push	hl
4306:30292+10	57B7  2149FE  		ld	hl,-439
4307:30302+10	57BA  01C9F1  		ld	bc,XF1C9
4308:30312+4	57BD  AF      	A57BD:	xor	a
4309:30316+7	57BE  02      		ld	(bc),a
4310:30323+6	57BF  03      		inc	bc
4311:30329+6	57C0  23      		inc	hl
4312:30335+4	57C1  7D      		ld	a,l
4313:30339+4	57C2  B4      		or	h
4314:30343+7+5	57C3  20F8    		jr	nz,A57BD		; clear memory
4315:30350+16	57C5  22ABF6  		ld	(AUTLIN),hl		; SECLEN sofar zero
4316:30366+7	57C8  0614    		ld	b,014H
4317:30373+10	57CA  2121FB  		ld	hl,YFB21
4318:30383+7	57CD  77      	A57CD:	ld	(hl),a
4319:30390+6	57CE  23      		inc	hl
4320:30396+8+5	57CF  10FC    		djnz	A57CD			; clear DRVTBL, DRVINT
4321:30404+10	57D1  214FF2  		ld	hl,XF24F
4322:30414+7	57D4  0669    		ld	b,069H
4323:30421+10	57D6  36C9    	A57D6:	ld	(hl),0C9H
4324:30431+6	57D8  23      		inc	hl
4325:30437+8+5	57D9  10FB    		djnz	A57D6			; init disksystem hooks
4326:30445+7	57DB  3EDB    		ld	a,0DBH
4327:30452+10	57DD  21A8C9  		ld	hl,0C9A8H
4328:30462+13	57E0  3265F3  		ld	(XF365+0),a
4329:30475+16	57E3  2266F3  		ld	(XF365+1),hl
4330:30491+7	57E6  3E06    		ld	a,006H
4331:30498+17	57E8  CD4101  		call	SNSMAT
4332:30515+7	57EB  E602    		and	002H			; CTRL key pressed
4333:30522+13	57ED  323FF3  		ld	(YF33F),a		; saved for panthom drive
4334:30535+7	57F0  3E07    		ld	a,007H
4335:30542+11	57F2  DF      		rst	018H			; beep
4336:30553+10	57F3  210758  		ld	hl,T5807
4337:30563+10	57F6  11CBFE  		ld	de,H.RUNC
4338:30573+10	57F9  010500  		ld	bc,00005H
4339:30583+16+5	57FC  EDB0    		ldir
4340:30599+17	57FE  CD2D40  		call	A402D
4341:30616+13	5801  32CCFE  		ld	(H.RUNC+1),a		; init RUNC hook, to catch intialize interpeter
4342:30629+10	5804  D1      		pop	de			; base diskdriver workarea
4343:30639+12	5805  181E    		jr	A5825
4344:				;
4345:				;
4346:30651+11	5807  F7      	T5807:	rst	030H
4347:     -	5808  00      		defb	000H
4348:     -	5809  9758    		defw	A5897
4349:30662+10	580B  C9      		ret
4350:				;
4351:30672+10	580C  2121FB  	A580C:	ld	hl,YFB21		; DRVTBL
4352:30682+7	580F  0604    		ld	b,004H			; 4 diskroms
4353:30689+4	5811  AF      		xor	a
4354:30693+7	5812  86      	A5812:	add	a,(hl)
4355:30700+10	5813  DAE15E  		jp	c,A5ECC			; invalid DRVTBL, error
4356:30710+6	5816  23      		inc	hl
4357:30716+6	5817  23      		inc	hl
4358:30722+8+5	5818  10F8    		djnz	A5812
4359:30730+7	581A  FE08    		cp	008H			; 8 or more drives ?
4360:30737+5+6	581C  D0      		ret	nc			; yep, no more drives!
4361:30742+10	581D  210100  		ld	hl,MYSIZE
4362:30752+17	5820  CDFD5E  		call	A5EE8			; allocate diskdriver workarea
4363:30769+5+6	5823  D8      		ret	c			; failed, quit
4364:30774+4	5824  EB      		ex	de,hl
4365:30778+17	5825  CDE25F  	A5825:	call	A5FCD			; get my SLTWRK entry
4366:30795+7	5828  73      		ld	(hl),e
4367:30802+6	5829  23      		inc	hl
4368:30808+7	582A  72      		ld	(hl),d			; save base workarea in SLTWRK
4369:30815+16	582B  2AABF6  		ld	hl,(AUTLIN)
4370:30831+10	582E  110002  		ld	de,SECLEN
4371:30841+11	5831  E7      		rst	020H			; SECLEN sofar big enough ?
4372:30852+7+5	5832  3004    		jr	nc,A5838
4373:30859+20	5834  ED53ABF6		ld	(AUTLIN),de		; nop, adjust
4374:30879+10	5838  1121FB  	A5838:	ld	de,YFB21		; DRVTBL
4375:30889+10	583B  010004  		ld	bc,00400H		; 4 diskroms
4376:30899+7	583E  1A      	A583E:	ld	a,(de)
4377:30906+4	583F  A7      		and	a
4378:30910+7+5	5840  2809    		jr	z,A584B			; free entry, use it
4379:30917+4	5842  81      		add	a,c
4380:30921+4	5843  4F      		ld	c,a
4381:30925+6	5844  13      		inc	de
4382:30931+6	5845  13      		inc	de
4383:30937+8+5	5846  10F6    		djnz	A583E			; next entry
4384:30945+10	5848  C3E15E  		jp	A5ECC			; none free, error
4385:				;
4386:30955+13	584B  3A3FF3  	A584B:	ld	a,(YF33F)
4387:30968+4	584E  A7      		and	a
4388:30972+4	584F  79      		ld	a,c			; phantom flag
4389:30976+17	5850  CD7D74  	A5850:	call	DRIVES			; query no. of drives
4390:30993+4	5853  85      		add	a,l
4391:30997+7	5854  FE09    		cp	009H
4392:31004+4	5856  7D      		ld	a,l			; more as 8 drives ?
4393:31008+7+5	5857  3803    		jr	c,A585C			; nop, ok
4394:31015+7	5859  3E08    		ld	a,008H
4395:31022+4	585B  91      		sub	c			; as much as possible
4396:31026+11	585C  C5      	A585C:	push	bc
4397:31037+7	585D  12      		ld	(de),a			; save drives
4398:31044+6	585E  13      		inc	de
4399:31050+17	585F  CD2D40  		call	A402D
4400:31067+7	5862  12      		ld	(de),a			; save slotid diskrom
4401:31074+10	5863  C1      		pop	bc			; drivenumber
4402:31084+7	5864  0600    		ld	b,000H
4403:31091+10	5866  2155F3  		ld	hl,YF355
4404:31101+11	5869  09      		add	hl,bc
4405:31112+11	586A  09      		add	hl,bc			; DPBTBL
4406:31123+11	586B  E5      		push	hl
4407:31134+6	586C  1B      		dec	de
4408:31140+7	586D  1A      		ld	a,(de)
4409:31147+11	586E  F5      		push	af
4410:31158+4	586F  4F      		ld	c,a			; drives
4411:31162+10	5870  111500  		ld	de,00015H
4412:31172+17	5873  CD1649  		call	A4916			; * size of DPB
4413:31189+4	5876  69      		ld	l,c
4414:31193+4	5877  60      		ld	h,b
4415:31197+17	5878  CDDD5E  		call	A5EC8			; allocate space for DPB's
4416:31214+4	587B  EB      		ex	de,hl
4417:31218+10	587C  F1      		pop	af
4418:31228+10	587D  E1      		pop	hl
4419:31238+7	587E  73      	A587E:	ld	(hl),e
4420:31245+6	587F  23      		inc	hl
4421:31251+7	5880  72      		ld	(hl),d			; save in DPBTBL
4422:31258+6	5881  23      		inc	hl
4423:31264+11	5882  E5      		push	hl
4424:31275+10	5883  215A75  		ld	hl,DEFDPB
4425:31285+10	5886  011500  		ld	bc,00015H
4426:31295+16+5	5889  EDB0    		ldir				; initialize DPB
4427:31311+10	588B  E1      		pop	hl
4428:31321+4	588C  3D      		dec	a
4429:31325+7+5	588D  20EF    		jr	nz,A587E		; next drive
4430:31332+17	588F  CD9C74  		call	INIENV			; initialize driver workarea
4431:31349+10	5892  2199FD  		ld	hl,DEVICE
4432:31359+11	5895  34      		inc	(hl)			; increase diskdriver count
4433:31370+10	5896  C9      		ret
4434:				
4435:				;	  Subroutine H.RUNC interceptor
4436:				;	     Inputs  -
4437:				;	     Outputs -
4438:				;         Remark     Control is passed to this routine when the BASIC interpreter is initialized
4439:				;                    There are two ways: a BASIC program in ROM is started OR at the start of MSX-BASIC
4440:				
4441:31380+10	5897  21CBFE  	A5897:	ld	hl,H.RUNC
4442:31390+7	589A  0605    		ld	b,005H
4443:31397+10	589C  36C9    	A589C:	ld	(hl),0C9H
4444:31407+6	589E  23      		inc	hl
4445:31413+8+5	589F  10FB    		djnz	A589C			; clear RUNC hook
4446:31421+10	58A1  2199FD  		ld	hl,DEVICE
4447:31431+4	58A4  AF      		xor	a
4448:31435+7	58A5  BE      		cp	(hl)
4449:31442+7	58A6  77      		ld	(hl),a			; clear
4450:31449+5+6	58A7  F0      		ret	p			; already cleared, return control
4451:31454+17	58A8  CD4262  	A58A8:	call	A622D			; hook H.LOPD when H.CLEA is hooked (for register system bottom)
4452:31471+13	58AB  3248F3  		ld	(YF348),a		; disksystem diskrom slotid
4453:31484+10	58AE  21AC73  		ld	hl,A7397
4454:31494+10	58B1  11C9F1  		ld	de,XF1C9
4455:31504+10	58B4  016E00  		ld	bc,0006EH
4456:31514+16+5	58B7  EDB0    		ldir
4457:31530+10	58B9  213400  		ld	hl,00034H
4458:31540+10	58BC  110FF3  		ld	de,YF30F
4459:31550+10	58BF  010400  		ld	bc,00004H
4460:31560+16+5	58C2  EDB0    		ldir				; initialize double byte header char table
4461:31576+13	58C4  3A2B00  		ld	a,(IDBYT0)
4462:31589+4	58C7  0F      		rrca
4463:31593+4	58C8  0F      		rrca
4464:31597+4	58C9  0F      		rrca
4465:31601+4	58CA  0F      		rrca
4466:31605+7	58CB  E607    		and	007H
4467:31612+13	58CD  320EF3  		ld	(YF30E),a		; date format
4468:31625+7	58D0  3EFF    		ld	a,0FFH
4469:31632+13	58D2  3241F2  		ld	(YF241),a		; invalid datasector buffer
4470:31645+13	58D5  3246F2  		ld	(YF246),a		; invalid directorysector buffer
4471:31658+13	58D8  324DF2  		ld	(YF24C+1),a		; days since 1-1-1980 is 65280 (0FF00H) (somewhere in the year 2158), this is inpossible, so when no clockchip this is updated!
4472:31671+7	58DB  3E0D    		ld	a,00DH
4473:31678+13	58DD  325BF5  		ld	(KBUF+316),a		; ???
4474:31691+7	58E0  3E07    		ld	a,7
4475:31698+13	58E2  3245F3  		ld	(YF345),a		; max number of FCB´s is 7
4476:31711+10	58E5  21B505  		ld	hl,1461
4477:31721+16	58E8  223BF3  		ld	(YF33B),hl		; default date when no clockchip is 1-1-1984
4478:31737+7	58EB  0608    		ld	b,008H
4479:31744+10	58ED  2168F3  		ld	hl,XF368
4480:31754+10	58F0  36C3    	A58F0:	ld	(hl),0C3H
4481:31764+6	58F2  23      		inc	hl
4482:31770+6	58F3  23      		inc	hl
4483:31776+6	58F4  23      		inc	hl
4484:31782+8+5	58F5  10F9    		djnz	A58F0			; initialize diskvars
4485:31790+16	58F7  2AABF6  		ld	hl,(AUTLIN)
4486:31806+11	58FA  E5      		push	hl
4487:31817+17	58FB  CDDD5E  		call	A5EC8
4488:31834+16	58FE  224DF3  		ld	($SECBUF),hl		; allocate sectorbuffer
4489:31850+10	5901  E1      		pop	hl
4490:31860+11	5902  E5      		push	hl
4491:31871+17	5903  CDDD5E  		call	A5EC8
4492:31888+16	5906  224FF3  		ld	(YF34F),hl		; allocate datasector buffer
4493:31904+10	5909  E1      		pop	hl
4494:31914+17	590A  CDDD5E  		call	A5EC8
4495:31931+16	590D  2251F3  		ld	(YF351),hl		; allocate dirsector buffer
4496:31947+10	5910  2121FB  		ld	hl,YFB21		; DRVTBL
4497:31957+7	5913  0604    		ld	b,004H			; 4 diskroms
4498:31964+4	5915  AF      		xor	a
4499:31968+7	5916  86      	A5916:	add	a,(hl)
4500:31975+10	5917  DAE15E  		jp	c,A5ECC			; invalid, error
4501:31985+6	591A  23      		inc	hl
4502:31991+6	591B  23      		inc	hl
4503:31997+8+5	591C  10F8    		djnz	A5916
4504:32005+7	591E  FE09    		cp	009H			; more as 8 drives ?
4505:32012+10	5920  D2E15E  		jp	nc,A5ECC		; yep, error
4506:32022+13	5923  3247F3  		ld	(YF347),a		; drives in system
4507:32035+4	5926  47      		ld	b,a
4508:32039+7	5927  0E00    		ld	c,000H
4509:32046+10	5929  2155F3  		ld	hl,YF355
4510:32056+7	592C  5E      	A592C:	ld	e,(hl)
4511:32063+6	592D  23      		inc	hl
4512:32069+7	592E  56      		ld	d,(hl)
4513:32076+6	592F  23      		inc	hl
4514:32082+11	5930  E5      		push	hl
4515:32093+11	5931  D5      		push	de
4516:32104+14	5932  DDE1    		pop	ix
4517:32118+19	5934  DD7100  		ld	(ix+000H),c		; set drivenumber in DPB
4518:32137+4	5937  0C      		inc	c
4519:32141+11	5938  C5      		push	bc
4520:32152+19	5939  DD4E02  		ld	c,(ix+002H)
4521:32171+19	593C  DD4603  		ld	b,(ix+003H)		; sectorsize
4522:32190+19	593F  DD5E10  		ld	e,(ix+010H)
4523:32209+7	5942  1600    		ld	d,0			; number of sectors per FAT
4524:32216+17	5944  CD1649  		call	A4916			; * FAT size
4525:32233+6	5947  03      		inc	bc			; and a FAT flag
4526:32239+4	5948  69      		ld	l,c
4527:32243+4	5949  60      		ld	h,b
4528:32247+17	594A  CDDD5E  		call	A5EC8			; allocate FAT buffer
4529:32264+16	594D  2249F3  		ld	(YF349),hl		; base system bottom sofar
4530:32280+10	5950  36FF    		ld	(hl),0FFH		; flag invalid FAT buffer
4531:32290+6	5952  23      		inc	hl
4532:32296+19	5953  DD7513  		ld	(ix+013H),l
4533:32315+19	5956  DD7414  		ld	(ix+014H),h		; pointer to FAT buffer
4534:32334+10	5959  C1      		pop	bc
4535:32344+10	595A  E1      		pop	hl
4536:32354+8+5	595B  10CF    		djnz	A592C			; next drive
4537:32362+10	595D  2127F3  		ld	hl,XF327
4538:32372+10	5960  363E    		ld	(hl),03EH
4539:32382+6	5962  23      		inc	hl
4540:32388+10	5963  361A    		ld	(hl),01AH
4541:32398+7	5965  0608    		ld	b,008H
4542:32405+6	5967  23      	A5967:	inc	hl
4543:32411+10	5968  36C9    		ld	(hl),0C9H
4544:32421+8+5	596A  10FB    		djnz	A5967
4545:32429+10	596C  2127F3  		ld	hl,XF327
4546:32439+16	596F  2272F3  		ld	(XF371+1),hl
4547:32455+10	5972  212CF3  		ld	hl,XF32C
4548:32465+16	5975  2275F3  		ld	(XF374+1),hl
4549:32481+10	5978  2131F3  		ld	hl,XF331
4550:32491+16	597B  227EF3  		ld	(XF37D+1),hl
4551:32507+10	597E  212F7D  		ld	hl,BASSCR
4552:32517+13	5981  3AC1FC  		ld	a,(EXPTBL+0)
4553:32530+17	5984  CD0C00  		call	RDSLT
4554:32547+11	5987  F5      		push	af
4555:32558+6	5988  23      		inc	hl
4556:32564+13	5989  3AC1FC  		ld	a,(EXPTBL+0)
4557:32577+17	598C  CD0C00  		call	RDSLT
4558:32594+10	598F  D1      		pop	de
4559:32604+4	5990  67      		ld	h,a
4560:32608+4	5991  6A      		ld	l,d
4561:32612+11	5992  E5      		push	hl
4562:32623+14	5993  DDE1    		pop	ix
4563:32637+20	5995  FD2AC0FC		ld	iy,(EXPTBL-1+0)
4564:32657+17	5999  CD1C00  		call	CALSLT			; setup startup screen
4565:32674+17	599C  CDB840  		call	A40B8			; check for and initialize clockchip
4566:32691+17	599F  CD835C  		call	A5C6E			; initialize hooks
4567:32708+13	59A2  3AC1FC  		ld	a,(EXPTBL+0)
4568:32721+13	59A5  3241F3  		ld	(RAMAD0),a
4569:32734+13	59A8  3242F3  		ld	(RAMAD1),a		; assume no ram available for page 0 and 1
4570:32747+17	59AB  CDAD5F  		call	A5F98
4571:32764+13	59AE  3243F3  		ld	(RAMAD2),a		; slotid of current page 2
4572:32777+17	59B1  CDAA5F  		call	A5F95
4573:32794+13	59B4  3244F3  		ld	(RAMAD3),a		; slotid of current page 3
4574:32807+7	59B7  0E00    		ld	c,000H
4575:32814+17	59B9  CD675E  		call	A5E52			; search ram in page 0
4576:32831+7+5	59BC  3803    		jr	c,A59C1
4577:32838+13	59BE  3241F3  		ld	(RAMAD0),a		; found, set ram slotid page 0
4578:32851+7	59C1  0E40    	A59C1:	ld	c,040H
4579:32858+17	59C3  CD675E  		call	A5E52			; search ram in page 1
4580:32875+7+5	59C6  3803    		jr	c,A59CB
4581:32882+13	59C8  3242F3  		ld	(RAMAD1),a		; found, set ram slotid page 1
4582:32895+10	59CB  3100C2  	A59CB:	ld	sp,0C200H		; stack just above temp startbuffer
4583:32905+13	59CE  3ADAFE  		ld	a,(H.STKE+0)
4584:32918+7	59D1  FEC9    		cp	0C9H			; STKE hook set ?
4585:32925+7+5	59D3  2806    		jr	z,A59DB			; nop, cont
4586:32932+14	59D5  DD21177D		ld	ix,SKPROM
4587:32946+12	59D9  1812    		jr	A59ED			; skip BASIC extension ROMs and transfer control
4588:				;
4589:32958+10	59DB  21C9FC  	A59DB:	ld	hl,SLTATR
4590:32968+7	59DE  0640    		ld	b,040H
4591:32975+7	59E0  7E      	A59E0:	ld	a,(hl)
4592:32982+4	59E1  87      		add	a,a			; TEXT extension ?
4593:32986+7+5	59E2  3805    		jr	c,A59E9			; yep, start it
4594:32993+6	59E4  23      		inc	hl
4595:32999+8+5	59E5  10F9    		djnz	A59E0
4596:33007+12	59E7  180A    		jr	A59F3			; no TEXT extension ROM found,
4597:				;
4598:33019+14	59E9  DD21147E	A59E9:	ld	ix,RSTCLR		; start BASIC program in ROM
4599:33033+17	59ED  CD2B5C  	A59ED:	call	A5C16			; initialize diskbasic
4600:33050+10	59F0  C35901  		jp	CALBAS
4601:				;
4602:33060+10	59F3  213A5B  	A59F3:	ld	hl,A5B3A
4603:33070+11	59F6  E5      		push	hl			; if quit anywhere start diskbasic
4604:33081+17	59F7  CD0365  		call	ABOOT			; NEW: READ BOOTSECTOR FROM ANY DRIVE
4605:33098+5+6	59FA  D8      		ret	c			; failed, start diskbasic
4606:33103+17	59FB  CD7E5A  		call	A5ADB			; start bootcode with Cx reset (some disk can take control from here)
4607:33120+16	59FE  2A48FC  		ld	hl,(BOTTOM)
4608:33136+10	5A01  110080  		ld	de,08000H
4609:33146+11	5A04  E7      		rst	020H			; check if ram on both page 3 and 2
4610:33157+5+6	5A05  C0      		ret	nz			; nope, start diskbasic
4611:33162+10	5A06  2141F3  		ld	hl,RAMAD0
4612:33172+13	5A09  3AC1FC  		ld	a,(EXPTBL+0)
4613:33185+7	5A0C  BE      		cp	(hl)
4614:33192+5+6	5A0D  C8      		ret	z			; no ram available on page 0, start diskbasic
4615:33197+6	5A0E  23      		inc	hl
4616:33203+7	5A0F  BE      		cp	(hl)
4617:33210+5+6	5A10  C8      		ret	z			; no ram available on page 1, start diskbasic
4618:				;
4619:				; MSXDOS requirement are met, try starting it
4620:				;
4621:				; CHANGED TO CREATE ROOM FOR NEW CODE
4622:				; Init procedure simplified, but code is compatible
4623:				;
4624:     -	5A11          	A5A11:
4625:				
4626:				; start of orginal code
4627:				
4628:				
4629:				
4630:				
4631:				; start of updated code
4632:				
4633:33215+13	5A11  3A47F2  		ld	a,(YF247)		; NEW: _SYSTEM FROM DEFAULT DRIVE
4634:33228+17	5A14  CDAF60  		call	A609A			; mark FAT buffer of default drive as invalid
4635:33245+16	5A17  2A49F3  		ld	hl,(YF349)
4636:33261+16	5A1A  224BF3  		ld	(YF34B),hl		; set MSXDOS system bottom to base system bottom
4637:33277+17	5A1D  CDA75A  		call	A5AE7			; read bootsector from the default drive
4638:33294+10	5A20  DA3A5B  		jp	c,A5B3A			; error reading bootsector or bootsector non-bootable
4639:33304+13	5A23  3246F3  		ld	(YF346),a		; bootable disk, flag CALL SYSTEM is valid
4640:33317+13	5A26  3A41F3  		ld	a,(RAMAD0)
4641:33330+7	5A29  2600    		ld	h,000H
4642:33337+17	5A2B  CD3664  		call	A649C			; enable ram on page 0 (649C works because RAM is in one slot!)
4643:33354+4	5A2E  AF      		xor	a
4644:33358+4	5A2F  6F      		ld	l,a
4645:33362+4	5A30  67      		ld	h,a
4646:33366+7	5A31  77      	A5A36:	ld	(hl),a
4647:33373+4	5A32  2C      		inc	l
4648:33377+7+5	5A33  20FC    		jr	nz,A5A36		; clear 0000H-00FFH
4649:33384+10	5A35  21E964  		ld	hl,A655C
4650:33394+10	5A38  113B00  		ld	de,X003B
4651:33404+10	5A3B  011A00  		ld	bc,0001AH
4652:33414+16+5	5A3E  EDB0    		ldir				; copy slotswitching code at 003BH
4653:33430+10	5A40  019C01  		ld	bc,LDOSR		; total count
4654:33440+17	5A43  CDC25E  		call	A5EAD			; allocate MSXDOS memory
4655:33457+11	5A46  E5      		push	hl
4656:33468+4	5A47  EB      		ex	de,hl
4657:33472+10	5A48  214D63  		ld	hl,A6336		; routines in ROM
4658:33482+11	5A4B  E5      		push	hl
4659:33493+16+5	5A4C  EDB0    		ldir				; copy interrupt/slotswitching routines
4660:33509+10	5A4E  C1      		pop	bc
4661:33519+10	5A4F  E1      		pop	hl
4662:33529+11	5A50  E5      		push	hl
4663:33540+4	5A51  B7      		or	a
4664:33544+15	5A52  ED42    		sbc	hl,bc
4665:33559+10	5A54  113963  		ld	de,T632E		; relocate info
4666:33569+17	5A57  CD1B63  		call	A6306			; relocate code
4667:33586+10	5A5A  218A5A  		ld	hl,T5B0F		; jumptable
4668:33596+7	5A5D  5E      	A5A84:	ld	e,(hl)
4669:33603+6	5A5E  23      		inc	hl
4670:33609+7	5A5F  56      		ld	d,(hl)			; adres jumpentry
4671:33616+6	5A60  23      		inc	hl
4672:33622+4	5A61  7B      		ld	a,e
4673:33626+4	5A62  B2      		or	d
4674:33630+7+5	5A63  2811    		jr	z,A5A98			; end of table
4675:33637+7	5A65  4E      		ld	c,(hl)
4676:33644+6	5A66  23      		inc	hl
4677:33650+7	5A67  0600    		ld	b,0			; offset
4678:33657+19	5A69  E3      		ex	(sp),hl			; previous routine adres
4679:33676+11	5A6A  09      		add	hl,bc
4680:33687+4	5A6B  EB      		ex	de,hl
4681:33691+10	5A6C  36C3    		ld	(hl),0C3h
4682:33701+6	5A6E  23      		inc	hl
4683:33707+7	5A6F  73      		ld	(hl),e
4684:33714+6	5A70  23      		inc	hl
4685:33720+7	5A71  72      		ld	(hl),d
4686:33727+4	5A72  EB      		ex	de,hl			; make jumpentry
4687:33731+19	5A73  E3      		ex	(sp),hl
4688:33750+12	5A74  18E7    		jr	A5A84			; next entry
4689:33762+10	5A76  E1      	A5A98:	pop	hl
4690:33772+10	5A77  01A000  		ld	bc,000A0H		; temporary stackspace for KEYINT
4691:33782+17	5A7A  CDC25E  		call	A5EAD			; allocate MSXDOS memory
4692:33799+4	5A7D  37      		scf				; start bootcode with Cx set
4693:33803+10	5A7E  2123F3  	A5ADB:	ld	hl,YF323		; adres diskerror handler pointer
4694:33813+10	5A81  1168F3  		ld	de,XF368
4695:33823+13	5A84  3A40F3  		ld	a,(YF340)		; cold boot flag
4696:33836+10	5A87  C31EC0  		jp	YC000+01EH		; start bootsector code
4697:				
4698:     -	5A8A  3800    	T5B0F:	defw	KEYINT
4699:     -	5A8C  00      		defb	A6336-A6336
4700:     -	5A8D  0C00    		defw	RDSLT
4701:     -	5A8F  45      		defb	A63F4-A6336
4702:     -	5A90  1400    		defw	WRSLT
4703:     -	5A92  1B      		defb	A6415-A63F4
4704:     -	5A93  3000    		defw	CALLF
4705:     -	5A95  2F      		defb	A6443-A6415
4706:     -	5A96  1C00    		defw	CALSLT
4707:     -	5A98  12      		defb	A6455-A6443
4708:     -	5A99  2400    		defw	ENASLT
4709:     -	5A9B  48      		defb	A649C-A6455
4710:     -	5A9C  68F3    		defw	XF368
4711:     -	5A9E  76      		defb	A63A1-A649C
4712:     -	5A9F  6BF3    		defw	XF36B
4713:     -	5AA1  06      		defb	A63A3-A63A1
4714:     -	5AA2  6EF3    		defw	XFER
4715:     -	5AA4  11      		defb	A637B-A63A3
4716:     -	5AA5  0000    		defw	0
4717:				;
4718:				; CHANGED: READ BOOTSECTOR FROM DEFAULT DRIVE
4719:				;
4720:33846+13	5AA7  3A47F2  	A5AE7:	ld	a,(YF247)
4721:33859+4	5AAA  B7      		or	a
4722:33863+11	5AAB  F5      		push	af
4723:33874+4	5AAC  87      		add	a,a
4724:33878+4	5AAD  5F      		ld	e,a
4725:33882+7	5AAE  1600    		ld	d,0
4726:33889+10	5AB0  2155F3  		ld	hl,YF355
4727:33899+11	5AB3  19      		add	hl,de
4728:33910+7	5AB4  7E      		ld	a,(hl)
4729:33917+6	5AB5  23      		inc	hl
4730:33923+7	5AB6  66      		ld	h,(hl)
4731:33930+4	5AB7  6F      		ld	l,a			; pointer to DPB
4732:33934+10	5AB8  F1      		pop	af
4733:33944+6	5AB9  23      		inc	hl
4734:33950+7	5ABA  4E      		ld	c,(hl)
4735:33957+7	5ABB  0601    		ld	b,001H
4736:33964+16	5ABD  2A51F3  		ld	hl,(YF351)		; temporary use dirsector buffer
4737:33980+11	5AC0  E5      		push	hl
4738:33991+10	5AC1  110000  		ld	de,0
4739:34001+17	5AC4  CD4401  		call	PHYDIO
4740:34018+7	5AC7  3EFF    		ld	a,0FFH
4741:34025+13	5AC9  3246F2  		ld	(YF246),a		; invalid dirsector buffer
4742:34038+10	5ACC  E1      		pop	hl
4743:34048+5+6	5ACD  D8      		ret	c
4744:34053+7	5ACE  7E      		ld	a,(hl)
4745:34060+10	5ACF  1100C0  		ld	de,YC000
4746:34070+10	5AD2  010001  		ld	bc,00100H
4747:34080+16+5	5AD5  EDB0    		ldir
4748:34096+7	5AD7  FEEB    		cp	0EBH
4749:34103+5+6	5AD9  C8      		ret	z
4750:34108+7	5ADA  FEE9    		cp	0E9H
4751:34115+5+6	5ADC  C8      		ret	z
4752:34120+4	5ADD  37      		scf
4753:34124+10	5ADE  C9      		ret
4754:				;
4755:				; ROOM CREATED BY CHANGE IS FILLED WITH NOPS
4756:				; TO KEEP FOLLOWING CODE AT SAME ADDRESSES
4757:				;
4758:     -	5ADF .. 5B19 00		defs	05B1AH-05A11H-($-A5A11),0
4759:				;
4760:				; END OF CHANGE
4761:				;
4762:				
4763:     -	5B1A  00415554	T5B1A:	defb	0,"AUTOEXECBAS",0
	      4F455845
	      43424153
	      00
4764:				
4765:     -	5B27  52554E22	T5B27:	defb	'RUN"AUTOEXEC.BAS',0
	      4155544F
	      45584543
	      2E424153
	      00
4766:				
4767:     -	5B38  925B    	T5B38:	defw	A5B92
4768:				
4769:				; Start diskbasic
4770:				;
4771:				;
4772:				
4773:34134+17	5B3A  CD755C  	A5B3A:	call	A5C60			; disable XFER,ENARAM,ENAKRN routines
4774:34151+10	5B3D  21275B  		ld	hl,T5B27
4775:34161+10	5B40  1168F5  		ld	de,BUF+10
4776:34171+10	5B43  011100  		ld	bc,00011H
4777:34181+16+5	5B46  EDB0    		ldir
4778:34197+10	5B48  2140F3  		ld	hl,YF340
4779:34207+7	5B4B  7E      		ld	a,(hl)
4780:34214+4	5B4C  A7      		and	a
4781:34218+7	5B4D  74      		ld	(hl),h			; next boot is a warm boot
4782:34225+7+5	5B4E  201E    		jr	nz,A5B6E		; this was a warm boot, no need to start autoexec.bas
4783:34232+13	5B50  3246F3  		ld	(YF346),a		; this was a cold boot, flag CALL SYSTEM invalid
4784:34245+10	5B53  21385B  		ld	hl,T5B38
4785:34255+16	5B56  2223F3  		ld	(YF323),hl		; setup disk errorhandler
4786:34271+10	5B59  211A5B  		ld	hl,T5B1A
4787:34281+10	5B5C  1179F5  		ld	de,BUF+27
4788:34291+10	5B5F  012500  		ld	bc,00025H
4789:34301+11	5B62  D5      		push	de
4790:34312+16+5	5B63  EDB0    		ldir				; setup FCB for autoexec.bas
4791:34328+10	5B65  D1      		pop	de
4792:34338+17	5B66  CD6244  		call	A4462			; open FCB
4793:34355+4	5B69  3C      		inc	a
4794:34359+7+5	5B6A  2826    		jr	z,A5B92			; error,
4795:34366+12	5B6C  1832    		jr	A5BA0
4796:				;
4797:34378+13	5B6E  3A0000  	A5B6E:	ld	a,(WBOOT)
4798:34391+7	5B71  FEC3    		cp	0C3H
4799:34398+7+5	5B73  2027    		jr	nz,A5B9C		; diskbasic not started from MSXDOS, just start diskbasic
4800:34405+10	5B75  218000  		ld	hl,00080H
4801:34415+7	5B78  46      		ld	b,(hl)
4802:34422+4	5B79  04      		inc	b
4803:34426+4	5B7A  05      		dec	b
4804:34430+7+5	5B7B  281F    		jr	z,A5B9C			; no parameter specified (after the BASIC command), just start diskbasic
4805:34437+6	5B7D  23      	A5B7D:	inc	hl
4806:34443+7	5B7E  7E      		ld	a,(hl)
4807:34450+7	5B7F  FE20    		cp	" "
4808:34457+7+5	5B81  2004    		jr	nz,A5B87
4809:34464+8+5	5B83  10F8    		djnz	A5B7D			; remove spaces in front
4810:34472+12	5B85  1815    		jr	A5B9C			; no parameter specified, just start diskbasic
4811:				;
4812:34484+4	5B87  AF      	A5B87:	xor	a
4813:34488+4	5B88  48      		ld	c,b
4814:34492+4	5B89  47      		ld	b,a
4815:34496+10	5B8A  116CF5  		ld	de,BUF+14
4816:34506+16+5	5B8D  EDB0    		ldir				; copy file name after the RUN" at BUF+10
4817:34522+7	5B8F  12      		ld	(de),a			; and a end of line marker
4818:34529+12	5B90  180E    		jr	A5BA0
4819:				;
4820:34541+10	5B92  3100C2  	A5B92:	ld	sp,0C200H
4821:34551+13	5B95  3A38F3  		ld	a,(YF338)
4822:34564+4	5B98  A7      		and	a
4823:34568+10+7	5B99  CC545D  		call	z,A5D3F			; no clockchip, ask the date
4824:34578+4	5B9C  AF      	A5B9C:	xor	a
4825:34582+13	5B9D  326BF5  		ld	(BUF+13),a		; make it a ordinary RUN at BUF+10
4826:34595+10	5BA0  3100C2  	A5BA0:	ld	sp,0C200H
4827:34605+13	5BA3  3A43F3  		ld	a,(RAMAD2)
4828:34618+7	5BA6  2680    		ld	h,080H
4829:34625+17	5BA8  CD2400  		call	ENASLT			; ram on page 2
4830:34642+13	5BAB  3AC1FC  		ld	a,(EXPTBL+0)
4831:34655+7	5BAE  2600    		ld	h,000H
4832:34662+17	5BB0  CD2400  		call	ENASLT			; rom-bios on page 0
4833:34679+16	5BB3  2A48FC  		ld	hl,(BOTTOM)
4834:34695+4	5BB6  AF      		xor	a
4835:34699+7	5BB7  77      		ld	(hl),a			; before the program always a end of line marker
4836:34706+6	5BB8  23      		inc	hl
4837:34712+16	5BB9  2276F6  		ld	(TXTTAB),hl		; start of basictext space
4838:34728+7	5BBC  77      		ld	(hl),a
4839:34735+6	5BBD  23      		inc	hl
4840:34741+7	5BBE  77      		ld	(hl),a			; end of program marker
4841:34748+6	5BBF  23      		inc	hl
4842:34754+16	5BC0  22C2F6  		ld	(VARTAB),hl		; start of the variablespace
4843:34770+10	5BC3  21FFFF  		ld	hl,0FFFFH
4844:34780+16	5BC6  221CF4  		ld	(CURLIN),hl		; interpeter in direct mode
4845:34796+17	5BC9  CD2B5C  		call	A5C16			; initialize diskbasic
4846:34813+20	5BCC  ED7B74F6		ld	sp,(STKTOP)
4847:34833+7	5BD0  3EFF    		ld	a,0FFH
4848:34840+13	5BD2  32DEF3  		ld	(CNSDFG),a		; enable function keys
4849:34853+7	5BD5  3E0C    		ld	a,00CH
4850:34860+11	5BD7  DF      		rst	018H			; clear screen
4851:34871+14	5BD8  DD21317D		ld	ix,TXTINI
4852:34885+17	5BDC  CD5901  		call	CALBAS			; setup basic startup screen
4853:34902+17	5BDF  CD9B5F  		call	A5F86
4854:     -	5BE2  0D0A    		defb	13,10
4855:     -	5BE4  4469736B	    defb    "Disk BASIC version 1.0",13,10
	      20424153
	      49432076
	      65727369
	      6F6E2031
	      2E300D0A
4856:     -	5BFC  4D535850	    defb    "MSXPi Driver v0.8.1",13,10,0
	      69204472
	      69766572
	      2076302E
	      382E310D
	      0A00
4857:34919+10	5C12  217341  		ld	hl,M.4173
4858:34929+11	5C15  E5      		push	hl			; after the RUN command completes
4859:34940+10	5C16  2167F5  		ld	hl,BUF+9
4860:34950+11	5C19  E5      		push	hl
4861:34961+10	5C1A  219EF5  		ld	hl,BUF+64
4862:34971+11	5C1D  E5      		push	hl
4863:34982+10	5C1E  36E1    		ld	(hl),0E1H
4864:34992+6	5C20  23      		inc	hl
4865:34998+10	5C21  36C9    		ld	(hl),0C9H		; pop the basicpointer when returning
4866:35008+13	5C23  3AC1FC  		ld	a,(EXPTBL+0)
4867:35021+7	5C26  2640    		ld	h,040H
4868:35028+10	5C28  C32400  		jp	ENASLT			; enable basic-rom on page 1
4869:				
4870:35038+10	5C2B  21C372  	A5C16:	ld	hl,T72AE
4871:35048+16	5C2E  2223F3  		ld	(YF323),hl		; setup diskerror handler
4872:35064+10	5C31  21815C  		ld	hl,T5C6C
4873:35074+16	5C34  2225F3  		ld	(YF325),hl		; setup abort handler
4874:35090+16	5C37  2A49F3  		ld	hl,(YF349)
4875:35106+16	5C3A  224AFC  		ld	(HIMEM),hl
4876:35122+13	5C3D  3A45F3  		ld	a,(YF345)
4877:35135+4	5C40  4F      		ld	c,a
4878:35139+7	5C41  0600    		ld	b,000H			; number of FCB´s
4879:35146+10	5C43  112500  		ld	de,37
4880:35156+17	5C46  CD1649  		call	A4916			; * 37
4881:35173+17	5C49  CDCD5E  		call	A5EB8			; allocate basic memory
4882:35190+16	5C4C  2253F3  		ld	(YF353),hl
4883:35206+10	5C4F  011900  		ld	bc,25
4884:35216+17	5C52  CDCD5E  		call	A5EB8			; allocate basic memory
4885:35233+16	5C55  2278F3  		ld	(XF377+1),hl
4886:35249+4	5C58  EB      		ex	de,hl
4887:35253+10	5C59  210263  		ld	hl,T62ED
4888:35263+16+5	5C5C  EDB0    		ldir				; copy bsave/bload patch code
4889:35279+10	5C5E  21F5FF  		ld	hl,0FFF5H
4890:35289+11	5C61  19      		add	hl,de
4891:35300+16	5C62  227BF3  		ld	(XF37A+1),hl
4892:35316+13	5C65  3A48F3  		ld	a,(YF348)
4893:35329+10	5C68  11F9FF  		ld	de,0FFF9H
4894:35339+11	5C6B  19      		add	hl,de
4895:35350+7	5C6C  77      		ld	(hl),a
4896:35357+10	5C6D  110E00  		ld	de,0000EH
4897:35367+11	5C70  19      		add	hl,de
4898:35378+7	5C71  77      		ld	(hl),a
4899:35385+17	5C72  CD745F  		call	A5F5F			; setup io channels
4900:									; disable XFER..
4901:35402+7	5C75  3EC9    	A5C60:	ld	a,0C9H
4902:35409+13	5C77  3268F3  	A5C62:	ld	(XF368+0),a
4903:35422+13	5C7A  326BF3  		ld	(XF36B+0),a
4904:35435+13	5C7D  326EF3  		ld	(XFER+0),a
4905:35448+10	5C80  C9      		ret
4906:				;
4907:				;
4908:     -	5C81  A740    	T5C6C:	defw	A40A7
4909:				
4910:35458+10	5C83  21FD62  	A5C6E:	ld	hl,T62E8
4911:35468+10	5C86  11BCFE  		ld	de,H.POSD
4912:35478+10	5C89  010500  		ld	bc,00005H
4913:35488+16+5	5C8C  EDB0    		ldir
4914:35504+10	5C8E  21AB5C  		ld	hl,T5C96
4915:35514+7	5C91  5E      	A5C7C:	ld	e,(hl)
4916:35521+6	5C92  23      		inc	hl
4917:35527+7	5C93  56      		ld	d,(hl)
4918:35534+6	5C94  23      		inc	hl
4919:35540+4	5C95  7B      		ld	a,e
4920:35544+4	5C96  B2      		or	d
4921:35548+5+6	5C97  C8      		ret	z
4922:35553+4	5C98  EB      		ex	de,hl
4923:35557+10	5C99  36F7    		ld	(hl),0F7H
4924:35567+6	5C9B  23      		inc	hl
4925:35573+13	5C9C  3A48F3  		ld	a,(YF348)
4926:35586+7	5C9F  77      		ld	(hl),a
4927:35593+6	5CA0  23      		inc	hl
4928:35599+4	5CA1  EB      		ex	de,hl
4929:35603+16	5CA2  EDA0    		ldi
4930:35619+16	5CA4  EDA0    		ldi
4931:35635+7	5CA6  3EC9    		ld	a,0C9H
4932:35642+7	5CA8  12      		ld	(de),a
4933:35649+12	5CA9  18E6    		jr	A5C7C
4934:				;
4935:				;
4936:     -	5CAB  EFFDAB6B	T5C96:	defw	H.DSKO,A6B96
4937:     -	5CAF  17FE8A6B		defw	H.DSKI,A6B75
4938:     -	5CB3  F9FD356F		defw	H.NAME,A6F20
4939:     -	5CB7  FEFD156F		defw	H.KILL,A6F00
4940:     -	5CBB  08FE9070		defw	H.COPY,A707B
4941:     -	5CBF  12FE7670		defw	H.DSKF,A7061
4942:     -	5CC3  21FEEC6C		defw	H.LSET,A6CD7
4943:     -	5CC7  26FEEB6C		defw	H.RSET,A6CD6
4944:     -	5CCB  2BFE5E6C		defw	H.FIEL,A6C49
4945:     -	5CCF  30FEC46D		defw	H.MKI$,A6DAF
4946:     -	5CD3  35FEC76D		defw	H.MKS$,A6DB2
4947:     -	5CD7  3AFECA6D		defw	H.MKD$,A6DB5
4948:     -	5CDB  3FFEEC6D		defw	H.CVI,A6DD7
4949:     -	5CDF  44FEEF6D		defw	H.CVS,A6DDA
4950:     -	5CE3  49FEF26D		defw	H.CVD,A6DDD
4951:     -	5CE7  4EFEB966		defw	H.GETP,A66A4
4952:     -	5CEB  58FEC866		defw	H.NOFO,A66B3
4953:     -	5CEF  5DFE1167		defw	H.NULO,A66FC
4954:     -	5CF3  62FEE568		defw	H.NTFL,A68D0
4955:     -	5CF7  71FE2369		defw	H.BINS,A690E
4956:     -	5CFB  76FE4E69		defw	H.BINL,A6939
4957:     -	5CFF  7BFE9D6E		defw	H.FILE,A6E88
4958:     -	5D03  80FEEF6B		defw	H.DGET,A6BDA
4959:     -	5D07  85FEA368		defw	H.FILO,A688E
4960:     -	5D0B  8AFE2E68		defw	H.INDS,A6819
4961:     -	5D0F  99FE2270		defw	H.LOC,A700D
4962:     -	5D13  9EFE1E70		defw	H.LOF,A7009
4963:     -	5D17  A3FE856E		defw	H.EOF,A6E70
4964:     -	5D1B  ADFE8A68		defw	H.BAKU,A6875
4965:     -	5D1F  B2FE3873		defw	H.PARD,A7323
4966:     -	5D23  B7FE9173		defw	H.NODE,A737C
4967:     -	5D27  FDFEE871		defw	H.ERRP,A71D3
4968:     -	5D2B  A7FF6A60		defw	H.PHYD,A6055
4969:     -	5D2F  ACFFC560		defw	H.FORM,A60B0
4970:     -	5D33  31F3D356		defw	XF331,A56D3
4971:     -	5D37  0000    		defw	0
4972:				
4973:     -	5D39  01482D01	T5D24:	defb	1,048H,"-",1,041H,"-",1,047H,"):",0
	      412D0147
	      293A00
4974:     -	5D44  4D2D442D	T5D2F:	defb	"M-D-Y):",0
	      59293A00
4975:     -	5D4C  442D4D2D	T5D37:	defb	"D-M-Y):",0
	      59293A00
4976:				
4977:35661+20	5D54  ED73C0F5	A5D3F:	ld	(BUF+98),sp
4978:35681+7	5D58  3E14    		ld	a,20
4979:35688+13	5D5A  32C2F5  		ld	(BUF+100),a		; size of lineinput buffer
4980:35701+17	5D5D  CD9B5F  	A5D48:	call	A5F86
4981:     -	5D60  0D0A456E		defb	13,10,"Enter date (",0
	      74657220
	      64617465
	      202800
4982:35718+4	5D6F  00      		nop
4983:35722+4	5D70  00      		nop
4984:35726+4	5D71  00      		nop
4985:35730+4	5D72  00      		nop				; room for expansion ??
4986:35734+4	5D73  00      		nop				; extra 5 bytes
4987:35738+13	5D74  3A0EF3  		ld	a,(YF30E)
4988:35751+7	5D77  FE01    		cp	1
4989:35758+10	5D79  21395D  		ld	hl,T5D24
4990:35768+7+5	5D7C  3808    		jr	c,A5D71			; japanese Y-M-D
4991:35775+10	5D7E  21445D  		ld	hl,T5D2F
4992:35785+7+5	5D81  2803    		jr	z,A5D71			; european D-M-Y
4993:35792+10	5D83  214C5D  		ld	hl,T5D37		; american M-D-Y
4994:35802+17	5D86  CDA15F  	A5D71:	call	A5F8C			; print string
4995:35819+10	5D89  21605E  		ld	hl,T5E4B
4996:35829+16	5D8C  2225F3  		ld	(YF325),hl		; setup abort handler
4997:35845+10	5D8F  11C2F5  		ld	de,BUF+100
4998:35855+17	5D92  CDE050  		call	A50E0			; BDOS 0A (buffered console input)
4999:35872+10	5D95  21C4F5  		ld	hl,BUF+100+2
5000:35882+7	5D98  7E      		ld	a,(hl)
5001:35889+7	5D99  FE0D    		cp	00DH
5002:35896+5+6	5D9B  C8      		ret	z			; empty input, do not set date, quit
5003:35901+13	5D9C  3A0EF3  		ld	a,(YF30E)
5004:35914+4	5D9F  A7      		and	a
5005:35918+7+5	5DA0  2012    		jr	nz,A5D9F		; no japanese
5006:35925+17	5DA2  CD225E  		call	A5E0D			; get date year
5007:35942+17	5DA5  CDFE5D  		call	A5DE9			; check for seperator and get date number (month)
5008:35959+4	5DA8  51      		ld	d,c
5009:35963+7	5DA9  7E      		ld	a,(hl)
5010:35970+6	5DAA  23      		inc	hl
5011:35976+4	5DAB  B8      		cp	b			; check if same seperator as the first one
5012:35980+7+5	5DAC  2032    		jr	nz,A5DCB		; nope, error
5013:35987+17	5DAE  CD0D5E  		call	A5DF8			; get date number (day)
5014:36004+4	5DB1  59      		ld	e,c
5015:36008+12	5DB2  181A    		jr	A5DB9
5016:				;
5017:36020+17	5DB4  CD0D5E  	A5D9F:	call	A5DF8			; get date number (day european, month american)
5018:36037+4	5DB7  51      		ld	d,c
5019:36041+17	5DB8  CDFE5D  		call	A5DE9			; check for seperator and get date number (month european, day american)
5020:36058+4	5DBB  59      		ld	e,c
5021:36062+7	5DBC  7E      		ld	a,(hl)
5022:36069+6	5DBD  23      		inc	hl
5023:36075+4	5DBE  B8      		cp	b			; check if same seperator as the first one
5024:36079+7+5	5DBF  2005    		jr	nz,A5DB1		; nope, error
5025:36086+17	5DC1  CD225E  		call	A5E0D			; get date year
5026:36103+12	5DC4  1808    		jr	A5DB9
5027:				;
5028:36115+11	5DC6  D5      	A5DB1:	push	de
5029:36126+17	5DC7  CD3C55  		call	A553C			; get date
5030:36143+11	5DCA  E5      		push	hl
5031:36154+14	5DCB  DDE1    		pop	ix
5032:36168+10	5DCD  D1      	A5DB8:	pop	de
5033:36178+13	5DCE  3A0EF3  	A5DB9:	ld	a,(YF30E)
5034:36191+7	5DD1  FE02    		cp	002H
5035:36198+7+5	5DD3  3803    		jr	c,A5DC3			; european or japanese, month already in register D
5036:36205+4	5DD5  7B      		ld	a,e
5037:36209+4	5DD6  5A      		ld	e,d
5038:36213+4	5DD7  57      		ld	d,a			; month in register D, day in register E
5039:36217+15	5DD8  DDE5    	A5DC3:	push	ix
5040:36232+10	5DDA  E1      		pop	hl
5041:36242+17	5DDB  CD5255  		call	A5552			; set date
5042:36259+4	5DDE  B7      		or	a
5043:36263+5+6	5DDF  C8      		ret	z			; no error, quit
5044:36268+20	5DE0  ED7BC0F5	A5DCB:	ld	sp,(BUF+98)
5045:36288+17	5DE4  CD9B5F  		call	A5F86
5046:     -	5DE7  0D0A496E		defb	13,10,"Invalid date",0
	      76616C69
	      64206461
	      746500
5047:36305+4	5DF6  00      		nop
5048:36309+4	5DF7  00      		nop
5049:36313+4	5DF8  00      		nop
5050:36317+4	5DF9  00      		nop				; room for expansion ??
5051:36321+4	5DFA  00      		nop				; extra 5 bytes
5052:36325+10	5DFB  C35D5D  		jp	A5D48			; try again
5053:				;
5054:36335+7	5DFE  7E      	A5DE9:	ld	a,(hl)
5055:36342+6	5DFF  23      		inc	hl
5056:36348+4	5E00  47      		ld	b,a
5057:36352+7	5E01  FE2F    		cp	"/"
5058:36359+7+5	5E03  2808    		jr	z,A5DF8
5059:36366+7	5E05  FE2E    		cp	"."
5060:36373+7+5	5E07  2804    		jr	z,A5DF8
5061:36380+7	5E09  FE2D    		cp	"-"
5062:36387+7+5	5E0B  20D3    		jr	nz,A5DCB
5063:				
5064:36394+17	5E0D  CD565E  	A5DF8:	call	A5E41			; is digit ?
5065:36411+7+5	5E10  38CE    		jr	c,A5DCB			; nope, error
5066:36418+4	5E12  4F      		ld	c,a			; save digit
5067:36422+17	5E13  CD565E  		call	A5E41			; is digit ?
5068:36439+5+6	5E16  D8      		ret	c			; nope, quit
5069:36444+11	5E17  F5      		push	af
5070:36455+4	5E18  79      		ld	a,c
5071:36459+4	5E19  87      		add	a,a
5072:36463+4	5E1A  87      		add	a,a
5073:36467+4	5E1B  81      		add	a,c
5074:36471+4	5E1C  87      		add	a,a
5075:36475+4	5E1D  4F      		ld	c,a			; first digit *10
5076:36479+10	5E1E  F1      		pop	af
5077:36489+4	5E1F  81      		add	a,c
5078:36493+4	5E20  4F      		ld	c,a			; + second digit
5079:36497+10	5E21  C9      		ret
5080:				;
5081:36507+17	5E22  CD0D5E  	A5E0D:	call	A5DF8			; get date number
5082:36524+4	5E25  41      		ld	b,c
5083:36528+17	5E26  CD565E  		call	A5E41			; is digit (is year more as 2 digit number) ?
5084:36545+7+5	5E29  3816    		jr	c,A5E2C			; nope, make it a 4 digit number
5085:36552+6	5E2B  2B      		dec	hl
5086:36558+17	5E2C  CD0D5E  		call	A5DF8			; get date number
5087:36575+11	5E2F  E5      		push	hl
5088:36586+11	5E30  C5      		push	bc
5089:36597+4	5E31  48      		ld	c,b
5090:36601+7	5E32  0600    		ld	b,000H
5091:36608+11	5E34  D5      		push	de
5092:36619+10	5E35  116400  		ld	de,100
5093:36629+17	5E38  CD1649  		call	A4916			; * 100
5094:36646+10	5E3B  D1      		pop	de
5095:36656+10	5E3C  E1      		pop	hl
5096:36666+7	5E3D  2600    		ld	h,000H
5097:36673+12	5E3F  180F    		jr	A5E3B
5098:				;
5099:36685+11	5E41  E5      	A5E2C:	push	hl
5100:36696+4	5E42  48      		ld	c,b
5101:36700+7	5E43  0600    		ld	b,0
5102:36707+10	5E45  216C07  		ld	hl,1900
5103:36717+4	5E48  79      		ld	a,c
5104:36721+7	5E49  FE50    		cp	80
5105:36728+7+5	5E4B  3003    		jr	nc,A5E3B		; >= 80 means 19xx
5106:36735+10	5E4D  21D007  		ld	hl,2000			; >80 means 20xx
5107:36745+11	5E50  09      	A5E3B:	add	hl,bc
5108:36756+11	5E51  E5      		push	hl
5109:36767+14	5E52  DDE1    		pop	ix
5110:36781+10	5E54  E1      		pop	hl
5111:36791+10	5E55  C9      		ret
5112:				;
5113:36801+7	5E56  7E      	A5E41:	ld	a,(hl)
5114:36808+7	5E57  D630    		sub	030H
5115:36815+5+6	5E59  D8      		ret	c
5116:36820+7	5E5A  FE0A    		cp	00AH
5117:36827+4	5E5C  3F      		ccf
5118:36831+5+6	5E5D  D8      		ret	c
5119:36836+6	5E5E  23      		inc	hl
5120:36842+10	5E5F  C9      		ret
5121:				;
5122:     -	5E60  625E    	T5E4B:	defw	A5E4D
5123:				
5124:36852+20	5E62  ED7BC0F5	A5E4D:	ld	sp,(BUF+98)
5125:36872+10	5E66  C9      		ret
5126:				;
5127:				; CHANGED, TO CREATE ROOM FOR OTHER ROUTINES
5128:				; ONLY 64 KB RAM'S ARE ALLOWED AS RAM!!
5129:				;
5130:36882+4	5E67  61      	A5E52:	ld	h,c
5131:36886+7	5E68  2E10    	A5E5E:	ld	l,010H
5132:36893+17	5E6A  CD9A5E  	A5E60:	call	ARDSL
5133:36910+4	5E6D  2F      		cpl
5134:36914+4	5E6E  5F      		ld	e,a
5135:36918+11	5E6F  D5      		push	de
5136:36929+17	5E70  CDA05E  		call	AWRSL
5137:36946+17	5E73  CD9A5E  		call	ARDSL
5138:36963+10	5E76  C1      		pop	bc
5139:36973+4	5E77  47      		ld	b,a
5140:36977+4	5E78  79      		ld	a,c
5141:36981+4	5E79  2F      		cpl
5142:36985+4	5E7A  5F      		ld	e,a
5143:36989+11	5E7B  C5      		push	bc
5144:37000+17	5E7C  CDA05E  		call	AWRSL
5145:37017+10	5E7F  C1      		pop	bc
5146:37027+4	5E80  79      		ld	a,c
5147:37031+4	5E81  B8      		cp	b
5148:37035+7+5	5E82  2014    		jr	nz,A5E9A
5149:37042+4	5E84  2D      		dec	l
5150:37046+7+5	5E85  20E3    		jr	nz,A5E60
5151:37053+4	5E87  24      		inc	h
5152:37057+4	5E88  24      		inc	h
5153:37061+4	5E89  24      		inc	h
5154:37065+4	5E8A  24      		inc	h
5155:37069+4	5E8B  7C      		ld	a,h
5156:37073+7	5E8C  FE40    		cp	040H
5157:37080+7+5	5E8E  2804    		jr	z,A5E96
5158:37087+7	5E90  FE80    		cp	080H
5159:37094+7+5	5E92  20D4    		jr	nz,A5E5E
5160:37101+13	5E94  3A44F3  	A5E96:	ld	a,(RAMAD3)
5161:37114+10	5E97  C9      		ret
5162:				;
5163:37124+4	5E98  37      	A5E9A:	scf
5164:37128+10	5E99  C9      		ret
5165:				
5166:37138+13	5E9A  3A44F3  	ARDSL:	ld	a,(RAMAD3)
5167:37151+10	5E9D  C30C00  		jp	RDSLT
5168:				
5169:37161+13	5EA0  3A44F3  	AWRSL:	ld	a,(RAMAD3)
5170:37174+10	5EA3  C31400  		jp	WRSLT
5171:				;
5172:				; END OF CHANGE, BUT KEEP FOLLOWING ROUTINES AT SAME ADDRESSES!
5173:				;
5174:     -	5EA6 .. 5EC1 00		defs	05EADH-05E52H-($-A5E52),0
5175:				
5176:				
5177:37184+16	5EC2  2A4BF3  	A5EAD:	ld	hl,(YF34B)
5178:37200+4	5EC5  A7      		and	a
5179:37204+15	5EC6  ED42    		sbc	hl,bc
5180:37219+16	5EC8  224BF3  		ld	(YF34B),hl
5181:37235+12	5ECB  1809    		jr	A5EC1
5182:				;
5183:37247+16	5ECD  2A4AFC  	A5EB8:	ld	hl,(HIMEM)
5184:37263+4	5ED0  A7      		and	a
5185:37267+15	5ED1  ED42    		sbc	hl,bc
5186:37282+16	5ED3  224AFC  		ld	(HIMEM),hl
5187:37298+7+5	5ED6  3809    	A5EC1:	jr	c,A5ECC
5188:37305+4	5ED8  7C      		ld	a,h
5189:37309+7	5ED9  FEC2    		cp	0C2H
5190:37316+12	5EDB  1803    		jr	A5ECB
5191:				;
5192:37328+17	5EDD  CDFD5E  	A5EC8:	call	A5EE8
5193:37345+5+6	5EE0  D0      	A5ECB:	ret	nc
5194:37350+17	5EE1  CD9B5F  	A5ECC:	call	A5F86
5195:     -	5EE4  0C      		defb	12
5196:     -	5EE5  4E6F2065	T5ED0:	defb	"No enough memory",0
	      6E6F7567
	      68206D65
	      6D6F7279
	      00
5197:37367+4	5EF6  00      		nop
5198:37371+4	5EF7  00      		nop
5199:37375+4	5EF8  00      		nop
5200:37379+4	5EF9  00      		nop				; room for expansion ??
5201:37383+4	5EFA  00      		nop				; extra 5 bytes
5202:37387+4	5EFB  F3      		di
5203:37391+4	5EFC  76      		halt
5204:37395+4	5EFD  7D      	A5EE8:	ld	a,l
5205:37399+4	5EFE  B4      		or	h
5206:37403+5+6	5EFF  C8      		ret	z
5207:37408+4	5F00  AF      		xor	a
5208:37412+4	5F01  95      		sub	l
5209:37416+4	5F02  6F      		ld	l,a
5210:37420+7	5F03  3E00    		ld	a,000H
5211:37427+4	5F05  9C      		sbc	a,h
5212:37431+4	5F06  67      		ld	h,a
5213:37435+4	5F07  4D      		ld	c,l
5214:37439+4	5F08  44      		ld	b,h
5215:37443+11	5F09  39      		add	hl,sp
5216:37454+4	5F0A  3F      		ccf
5217:37458+5+6	5F0B  D8      		ret	c
5218:37463+20	5F0C  ED5B48FC		ld	de,(BOTTOM)
5219:37483+15	5F10  ED52    		sbc	hl,de
5220:37498+5+6	5F12  D8      		ret	c
5221:37503+4	5F13  7C      		ld	a,h
5222:37507+7	5F14  FE02    		cp	002H
5223:37514+5+6	5F16  D8      		ret	c
5224:37519+11	5F17  C5      		push	bc
5225:37530+10	5F18  210000  		ld	hl,00000H
5226:37540+11	5F1B  39      		add	hl,sp
5227:37551+4	5F1C  5D      		ld	e,l
5228:37555+4	5F1D  54      		ld	d,h
5229:37559+11	5F1E  09      		add	hl,bc
5230:37570+11	5F1F  E5      		push	hl
5231:37581+16	5F20  2A74F6  		ld	hl,(STKTOP)
5232:37597+4	5F23  A7      		and	a
5233:37601+15	5F24  ED52    		sbc	hl,de
5234:37616+4	5F26  4D      		ld	c,l
5235:37620+4	5F27  44      		ld	b,h
5236:37624+6	5F28  03      		inc	bc
5237:37630+10	5F29  E1      		pop	hl
5238:37640+6	5F2A  F9      		ld	sp,hl
5239:37646+4	5F2B  EB      		ex	de,hl
5240:37650+16+5	5F2C  EDB0    		ldir
5241:37666+10	5F2E  C1      		pop	bc
5242:37676+16	5F2F  2A4AFC  		ld	hl,(HIMEM)
5243:37692+11	5F32  09      		add	hl,bc
5244:37703+16	5F33  224AFC  		ld	(HIMEM),hl
5245:37719+10	5F36  11EAFD  		ld	de,0FDEAH
5246:37729+11	5F39  19      		add	hl,de
5247:37740+16	5F3A  2260F8  		ld	(FILTAB),hl
5248:37756+4	5F3D  EB      		ex	de,hl
5249:37760+16	5F3E  2A72F6  		ld	hl,(MEMSIZ)
5250:37776+11	5F41  09      		add	hl,bc
5251:37787+16	5F42  2272F6  		ld	(MEMSIZ),hl
5252:37803+16	5F45  2A62F8  		ld	hl,(NULBUF)
5253:37819+11	5F48  09      		add	hl,bc
5254:37830+16	5F49  2262F8  		ld	(NULBUF),hl
5255:37846+16	5F4C  2A74F6  		ld	hl,(STKTOP)
5256:37862+11	5F4F  09      		add	hl,bc
5257:37873+16	5F50  2274F6  	A5F3B:	ld	(STKTOP),hl
5258:37889+6	5F53  2B      		dec	hl
5259:37895+6	5F54  2B      		dec	hl
5260:37901+16	5F55  22B1F6  		ld	(SAVSTK),hl
5261:37917+4	5F58  6B      		ld	l,e
5262:37921+4	5F59  62      		ld	h,d
5263:37925+6	5F5A  23      		inc	hl
5264:37931+6	5F5B  23      		inc	hl
5265:37937+6	5F5C  23      		inc	hl
5266:37943+6	5F5D  23      	A5F48:	inc	hl
5267:37949+7	5F5E  3E02    		ld	a,002H
5268:37956+4	5F60  EB      	A5F4B:	ex	de,hl
5269:37960+7	5F61  73      		ld	(hl),e
5270:37967+6	5F62  23      		inc	hl
5271:37973+7	5F63  72      		ld	(hl),d
5272:37980+6	5F64  23      		inc	hl
5273:37986+4	5F65  EB      		ex	de,hl
5274:37990+10	5F66  010700  		ld	bc,00007H
5275:38000+7	5F69  70      		ld	(hl),b
5276:38007+11	5F6A  09      		add	hl,bc
5277:38018+7	5F6B  70      		ld	(hl),b
5278:38025+10	5F6C  010201  		ld	bc,00102H
5279:38035+11	5F6F  09      		add	hl,bc
5280:38046+4	5F70  3D      		dec	a
5281:38050+7+5	5F71  20ED    		jr	nz,A5F4B
5282:38057+10	5F73  C9      		ret
5283:				;
5284:38067+7	5F74  3E01    	A5F5F:	ld	a,001H
5285:38074+13	5F76  325FF8  		ld	(MAXFIL),a
5286:38087+16	5F79  2A4AFC  		ld	hl,(HIMEM)
5287:38103+10	5F7C  11EAFD  		ld	de,0FDEAH
5288:38113+11	5F7F  19      		add	hl,de
5289:38124+16	5F80  2260F8  		ld	(FILTAB),hl
5290:38140+4	5F83  5D      		ld	e,l
5291:38144+4	5F84  54      		ld	d,h
5292:38148+6	5F85  2B      		dec	hl
5293:38154+6	5F86  2B      		dec	hl
5294:38160+16	5F87  2272F6  		ld	(MEMSIZ),hl
5295:38176+10	5F8A  01C800  		ld	bc,000C8H
5296:38186+4	5F8D  A7      		and	a
5297:38190+15	5F8E  ED42    		sbc	hl,bc
5298:38205+11	5F90  E5      		push	hl
5299:38216+10	5F91  210D00  		ld	hl,0000DH
5300:38226+11	5F94  19      		add	hl,de
5301:38237+16	5F95  2262F8  		ld	(NULBUF),hl
5302:38253+10	5F98  E1      		pop	hl
5303:38263+12	5F99  18B5    		jr	A5F3B
5304:				;
5305:38275+19	5F9B  E3      	A5F86:	ex	(sp),hl
5306:38294+17	5F9C  CDA15F  		call	A5F8C			; print string
5307:38311+19	5F9F  E3      		ex	(sp),hl
5308:38330+10	5FA0  C9      		ret
5309:				;
5310:38340+7	5FA1  7E      	A5F8C:	ld	a,(hl)
5311:38347+6	5FA2  23      		inc	hl
5312:38353+4	5FA3  A7      		and	a
5313:38357+5+6	5FA4  C8      		ret	z
5314:38362+17	5FA5  CD8F40  		call	A408F			; output to screen
5315:38379+12	5FA8  18F7    		jr	A5F8C
5316:				
5317:				;	  Subroutine get slotid of page 3
5318:				;	     Inputs  -
5319:				;	     Outputs A = slotid
5320:				
5321:38391+7	5FAA  0606    	A5F95:	ld	b,6
5322:     -	5FAC  21      		defb	021H			; LD HL,xxxx (skips next instruction)
5323:				
5324:				;	  Subroutine get slotid of page 2
5325:				;	     Inputs  -
5326:				;	     Outputs A = slotid
5327:				
5328:38398+7	5FAD  0604    	A5F98:	ld	b,4
5329:38405+17	5FAF  CD65F3  		call	XF365
5330:38422+11	5FB2  C5      		push	bc
5331:38433+4	5FB3  0F      	A5F9E:	rrca
5332:38437+8+5	5FB4  10FD    		djnz	A5F9E
5333:38445+17	5FB6  CD0160  		call	A5FEC
5334:38462+10	5FB9  C1      		pop	bc
5335:38472+7	5FBA  B6      		or	(hl)
5336:38479+4	5FBB  4F      		ld	c,a
5337:38483+6	5FBC  23      		inc	hl
5338:38489+6	5FBD  23      		inc	hl
5339:38495+6	5FBE  23      		inc	hl
5340:38501+6	5FBF  23      		inc	hl
5341:38507+7	5FC0  7E      		ld	a,(hl)
5342:38514+4	5FC1  05      		dec	b
5343:38518+4	5FC2  05      		dec	b
5344:38522+4	5FC3  0F      	A5FAE:	rrca
5345:38526+8+5	5FC4  10FD    		djnz	A5FAE
5346:38534+12	5FC6  180B    		jr	A5FBE
5347:				
5348:				;	  Subroutine get my slotid
5349:				;	     Inputs  -
5350:				;	     Outputs A = slotid
5351:				
5352:     -	5FC8          	GETSLT:
5353:38546+17	5FC8  CDFC5F  	A5FB3:	call	A5FE7
5354:38563+7	5FCB  B6      		or	(hl)
5355:38570+5+6	5FCC  F0      		ret	p			; non expanded slot, quit
5356:38575+4	5FCD  4F      		ld	c,a
5357:38579+6	5FCE  23      		inc	hl
5358:38585+6	5FCF  23      		inc	hl
5359:38591+6	5FD0  23      		inc	hl
5360:38597+6	5FD1  23      		inc	hl
5361:38603+7	5FD2  7E      		ld	a,(hl)
5362:38610+7	5FD3  E60C    	A5FBE:	and	00CH
5363:38617+4	5FD5  B1      		or	c
5364:38621+10	5FD6  C9      		ret
5365:				
5366:				;	  Subroutine get my diskdriver workarea
5367:				;	     Inputs  -
5368:				;	     Outputs HL = IX = pointer to workarea
5369:				;	  Remark     used by the diskdriver
5370:				
5371:     -	5FD7          	GETWRK:
5372:38631+17	5FD7  CDE25F  	A5FC2:	call	A5FCD			; get my SLTWRK entry
5373:38648+7	5FDA  7E      		ld	a,(hl)
5374:38655+6	5FDB  23      		inc	hl
5375:38661+7	5FDC  66      		ld	h,(hl)
5376:38668+4	5FDD  6F      		ld	l,a			; pointer to workarea
5377:38672+11	5FDE  E5      		push	hl
5378:38683+14	5FDF  DDE1    		pop	ix
5379:38697+10	5FE1  C9      		ret
5380:				
5381:				;	  Subroutine get my SLTWRK entry
5382:				;	     Inputs  -
5383:				;	     Outputs HL = pointer to SLTWRK entry
5384:				
5385:38707+17	5FE2  CDFC5F  	A5FCD:	call	A5FE7			; get my primairy slot
5386:38724+4	5FE5  87      		add	a,a
5387:38728+4	5FE6  87      		add	a,a
5388:38732+4	5FE7  87      		add	a,a
5389:38736+4	5FE8  37      		scf
5390:38740+4	5FE9  8F      		adc	a,a			; primary slot*4 + 1
5391:38744+4	5FEA  4F      		ld	c,a
5392:38748+7	5FEB  7E      		ld	a,(hl)
5393:38755+4	5FEC  87      		add	a,a
5394:38759+4	5FED  9F      		sbc	a,a
5395:38763+7	5FEE  E60C    		and	00CH			; 0 for non expanded, 0CH for expanded
5396:38770+6	5FF0  23      		inc	hl
5397:38776+6	5FF1  23      		inc	hl
5398:38782+6	5FF2  23      		inc	hl
5399:38788+6	5FF3  23      		inc	hl
5400:38794+7	5FF4  A6      		and	(hl)
5401:38801+4	5FF5  B1      		or	c
5402:38805+4	5FF6  87      		add	a,a			; word entries
5403:38809+10	5FF7  2109FD  		ld	hl,SLTWRK
5404:38819+12	5FFA  180C    		jr	A5FF3
5405:				
5406:				;	  Subroutine get my EXPTBL entry
5407:				;	     Inputs  -
5408:				;	     Outputs HL = pointer to SLTWRK entry
5409:				
5410:38831+17	5FFC  CD65F3  	A5FE7:	call	XF365
5411:38848+4	5FFF  0F      		rrca
5412:38852+4	6000  0F      		rrca
5413:38856+7	6001  E603    	A5FEC:	and	003H
5414:38863+10	6003  21C1FC  		ld	hl,EXPTBL
5415:38873+7	6006  0600    	A5FF1:	ld	b,000H
5416:38880+4	6008  4F      	A5FF3:	ld	c,a
5417:38884+11	6009  09      		add	hl,bc
5418:38895+10	600A  C9      		ret
5419:				
5420:				;	  Subroutine install my diskdriver interrupt handler
5421:				;	     Inputs  HL = pointer to interrupt handler
5422:				;	     Outputs -
5423:				;	  Remark     used by the diskdriver
5424:				
5425:     -	600B          	SETINT:
5426:38905+13	600B  3A9FFD  	A5FF6:	ld	a,(H.TIMI+0)
5427:38918+7	600E  FEC9    		cp	0C9H
5428:38925+7+5	6010  2815    		jr	z,A6012			; H.TIMI not hooked, skip saving H.TIMI
5429:38932+11	6012  E5      		push	hl
5430:38943+13	6013  3A99FD  		ld	a,(DEVICE)		; this diskdriver number
5431:38956+10	6016  2129FB  		ld	hl,YFB29
5432:38966+17	6019  CD0660  		call	A5FF1
5433:38983+11	601C  09      		add	hl,bc
5434:38994+11	601D  09      		add	hl,bc			; get DRVINT pointer
5435:39005+4	601E  EB      		ex	de,hl
5436:39009+10	601F  21A0FD  		ld	hl,H.TIMI+1
5437:39019+7	6022  0E03    		ld	c,003H
5438:39026+16+5	6024  EDB0    		ldir				; save slotid and adres (assumes that is hooked by a CALLF!)
5439:39042+10	6026  E1      		pop	hl
5440:39052+4	6027  F3      	A6012:	di
5441:39056+7	6028  3EF7    		ld	a,0F7H
5442:39063+13	602A  329FFD  		ld	(H.TIMI+0),a
5443:39076+16	602D  22A1FD  		ld	(H.TIMI+2),hl		; diskdriver interrupt handler
5444:39092+7	6030  3EC9    		ld	a,0C9H
5445:39099+13	6032  32A3FD  		ld	(H.TIMI+4),a
5446:39112+17	6035  CD2D40  		call	A402D
5447:39129+13	6038  32A0FD  		ld	(H.TIMI+1),a		; slotid of this diskdriver
5448:39142+10	603B  C9      		ret
5449:				
5450:				;	  Subroutine call orginal interrupt handler
5451:				;	     Inputs  -
5452:				;	     Outputs -
5453:				;	  Remark     used by the diskdriver
5454:				
5455:     -	603C          	PRVINT:
5456:39152+11	603C  F5      	A6027:	push	af
5457:39163+17	603D  CD2D40  		call	A402D			; slotid of this diskdriver
5458:39180+7	6040  0604    		ld	b,4
5459:39187+10	6042  1129FB  		ld	de,YFB29
5460:39197+10	6045  2122FB  		ld	hl,YFB21+1
5461:39207+7	6048  BE      	A6033:	cp	(hl)			; is this my DRVTBL entry ?
5462:39214+7+5	6049  2809    		jr	z,A603F			; yep, get the saved interrupt handler and jump to it
5463:39221+6	604B  13      		inc	de
5464:39227+6	604C  13      		inc	de
5465:39233+6	604D  13      		inc	de
5466:39239+6	604E  23      		inc	hl
5467:39245+6	604F  23      		inc	hl
5468:39251+8+5	6050  10F6    		djnz	A6033			; next DRVTBL and DRVINT entry
5469:39259+10	6052  F1      	A603D:	pop	af
5470:39269+10	6053  C9      		ret				; quit
5471:				;
5472:39279+4	6054  EB      	A603F:	ex	de,hl
5473:39283+7	6055  7E      		ld	a,(hl)
5474:39290+4	6056  A7      		and	a
5475:39294+7+5	6057  28F9    		jr	z,A603D			; DRVINT entry not used, quit
5476:39301+11	6059  F5      		push	af
5477:39312+14	605A  FDE1    		pop	iy			; slotid
5478:39326+6	605C  23      		inc	hl
5479:39332+7	605D  4E      		ld	c,(hl)
5480:39339+6	605E  23      		inc	hl
5481:39345+7	605F  46      		ld	b,(hl)
5482:39352+11	6060  C5      		push	bc
5483:39363+14	6061  DDE1    		pop	ix			; adres
5484:39377+10	6063  F1      		pop	af
5485:39387+10	6064  C31C00  		jp	CALSLT
5486:				
5487:				;	  Subroutine read disksector
5488:				;	     Inputs  A = driveid, B = number of sectors, C = mediadescriptor, DE = start sector, HL = transferadres
5489:				;	     Outputs -
5490:				
5491:39397+4	6067  A7      	A6052:	and	a
5492:     -	6068  38      		defb	038H			; JR C,xx (skips next instruction)
5493:				
5494:				;	  Subroutine write disksector
5495:				;	     Inputs  A = driveid, B = number of sectors, C = mediadescriptor, DE = start sector, HL = transferadres
5496:				;	     Outputs -
5497:				
5498:39401+4	6069  37      	A6054:	scf
5499:				
5500:				;	  Subroutine PHYDIO BIOS call
5501:				;	     Inputs  A = driveid, B = number of sectors, C = mediadescriptor, DE = start sector, HL = transferadres
5502:				;	     Outputs -
5503:				
5504:39405+15	606A  DDE5    	A6055:	push	ix
5505:39420+15	606C  FDE5    		push	iy
5506:39435+11	606E  E5      		push	hl
5507:39446+11	606F  F5      		push	af
5508:39457+17	6070  CD9B60  		call	A6086			; get diskdriverparameters
5509:39474+4	6073  6F      		ld	l,a
5510:39478+10	6074  F1      		pop	af			; restore flags (Cx)
5511:39488+4	6075  7D      		ld	a,l
5512:39492+14	6076  DD211040		ld	ix,T4010
5513:39506+12	607A  1814    		jr	A607B
5514:				;
5515:39518+15	607C  DDE5    	A6067:	push	ix
5516:39533+14	607E  DD211340		ld	ix,T4013
5517:39547+12	6082  1806    		jr	A6075
5518:				;
5519:39559+15	6084  DDE5    	A606F:	push	ix
5520:39574+14	6086  DD211640		ld	ix,T4016
5521:39588+15	608A  FDE5    	A6075:	push	iy
5522:39603+11	608C  E5      		push	hl
5523:39614+17	608D  CD9B60  		call	A6086			; get diskdriverparameters
5524:39631+10	6090  E1      	A607B:	pop	hl
5525:39641+11	6091  E5      		push	hl
5526:39652+17	6092  CD1C00  		call	CALSLT
5527:39669+10	6095  C38563  		jp	A636E
5528:				
5529:				; Unused code
5530:				;
5531:				; looks like the previous jump is a patch, may be the ´ei´ instruction at the end of the patch was forgotten ??
5532:				; patch code does not fit here, 1 byte too less
5533:				
5534:39679+4	6098  00      		nop
5535:39683+4	6099  00      		nop
5536:39687+4	609A  00      		nop
5537:				
5538:				;	  Subroutine get diskdriverparameters
5539:				;	     Inputs  A=driveid
5540:				;	     Outputs IYH=slotid diskdriver, H=slotid diskdriver, A=local driveid diskdriver
5541:				
5542:39691+13	609B  323FF3  	A6086:	ld	(YF33F),a		; save driveid (for PROMPT)
5543:39704+10	609E  2121FB  		ld	hl,YFB21		; diskdriver table
5544:39714+7	60A1  96      	A608C:	sub	(hl)
5545:39721+7+5	60A2  3804    		jr	c,A6093
5546:39728+6	60A4  23      		inc	hl
5547:39734+6	60A5  23      		inc	hl
5548:39740+12	60A6  18F9    		jr	A608C
5549:				;
5550:39752+7	60A8  86      	A6093:	add	a,(hl)			; driveid driver
5551:39759+6	60A9  23      		inc	hl
5552:39765+7	60AA  66      		ld	h,(hl)			; slotid driver
5553:39772+11	60AB  E5      		push	hl
5554:39783+14	60AC  FDE1    		pop	iy
5555:39797+10	60AE  C9      		ret
5556:				
5557:				;	  Subroutine mark FAT buffer as invalid
5558:				;	     Inputs  A=driveid
5559:				;	     Outputs ________________________ 
5560:				
5561:39807+10	60AF  2155F3  	A609A:	ld	hl,YF355
5562:39817+17	60B2  CD0660  		call	A5FF1
5563:39834+11	60B5  09      		add	hl,bc
5564:39845+7	60B6  5E      		ld	e,(hl)
5565:39852+6	60B7  23      		inc	hl
5566:39858+7	60B8  56      		ld	d,(hl)			; pointer to DPB
5567:39865+10	60B9  211300  		ld	hl,00013H
5568:39875+11	60BC  19      		add	hl,de
5569:39886+7	60BD  5E      		ld	e,(hl)
5570:39893+6	60BE  23      		inc	hl
5571:39899+7	60BF  56      		ld	d,(hl)
5572:39906+6	60C0  1B      		dec	de
5573:39912+4	60C1  EB      		ex	de,hl
5574:39916+10	60C2  36FF    		ld	(hl),0FFH
5575:39926+10	60C4  C9      		ret
5576:				
5577:				;	  Subroutine FORMAT BIOS call
5578:				;	     Inputs  
5579:				;	     Outputs ________________________ 
5580:				
5581:39936+4	60C5  A7      	A60B0:	and	a			; use free BASIC memory as formatbuffer
5582:				
5583:				;	  Subroutine format disk
5584:				;	     Inputs  Cx reset = use free BASIC memory as formatbuffer, Cx set = use specified buffer, HL = start of buffer, BC = size of buffer
5585:				;	     Outputs ________________________ 
5586:				
5587:39940+20	60C6  ED7339F3	A60B1:	ld	(YF339),sp		; save stackpointer for abort
5588:39960+10+7	60CA  D4EB62  		call	nc,A62D6		; get formatbuffer in free BASIC memory
5589:39970+11	60CD  E5      		push	hl
5590:39981+11	60CE  C5      		push	bc
5591:39992+13	60CF  3A47F3  		ld	a,(YF347)
5592:40005+4	60D2  3D      		dec	a			; only 1 diskdrive ?
5593:40009+7+5	60D3  2841    		jr	z,A6101			; yep, skip drivename input and use driveid 0
5594:40016+17	60D5  CD9B5F  	A60C0:	call	A5F86
5595:     -	60D8  44726976		defb	"Drive name? (",0
	      65206E61
	      6D653F20
	      2800
5596:40033+4	60E6  00      		nop
5597:40037+4	60E7  00      		nop
5598:40041+4	60E8  00      		nop
5599:40045+4	60E9  00      		nop				; room for expansion ??
5600:40049+4	60EA  00      		nop				; extra 5 bytes
5601:40053+13	60EB  3A47F3  		ld	a,(YF347)
5602:40066+4	60EE  47      		ld	b,a			; number of diskdrives
5603:40070+7	60EF  3E41    		ld	a,"A"			; starts with "A" drive
5604:40077+12	60F1  1807    		jr	A60E5
5605:				;
5606:40089+11	60F3  F5      	A60DE:	push	af
5607:40100+7	60F4  3E2C    		ld	a,","
5608:40107+17	60F6  CD8F40  		call	A408F			; output to screen
5609:40124+10	60F9  F1      		pop	af
5610:40134+17	60FA  CD8F40  	A60E5:	call	A408F			; output to screen
5611:40151+4	60FD  3C      		inc	a
5612:40155+8+5	60FE  10F3    		djnz	A60DE			; next drive
5613:40163+17	6100  CD9B5F  		call	A5F86
5614:     -	6103  292000  		defb	") ",0
5615:40180+17	6106  CDAA61  		call	A6195			; get fresh consoleinput (CTRL-C aborts)
5616:40197+17	6109  CDDB62  		call	A62C6			; print input and CR/LF
5617:40214+7	610C  E6DF    		and	0DFH			; upcase
5618:40221+7	610E  D641    		sub	"A"
5619:40228+10	6110  2147F3  		ld	hl,YF347
5620:40238+7	6113  BE      		cp	(hl)			; driveletter valid ?
5621:40245+7+5	6114  30BF    		jr	nc,A60C0		; nope, ask again
5622:40252+17	6116  CDAF60  	A6101:	call	A609A			; mark FAT buffer as invalid
5623:40269+17	6119  CD9B60  		call	A6086			; get diskdriverparameters
5624:40286+15	611C  FDE5    		push	iy
5625:40301+11	611E  F5      		push	af
5626:40312+15	611F  FDE5    		push	iy
5627:40327+14	6121  DD211940		ld	ix,T4019
5628:40341+17	6125  CD1C00  		call	CALSLT			; call CHOICE diskdriver
5629:40358+4	6128  7D      		ld	a,l
5630:40362+4	6129  B4      		or	h			; choice string ?
5631:40366+7+5	612A  2827    		jr	z,A613E			; nope, skip choice input and use choice 0 (default format)
5632:40373+10	612C  F1      		pop	af
5633:40383+11	612D  F5      	A6118:	push	af
5634:40394+17	612E  CD0C00  		call	RDSLT
5635:40411+4	6131  A7      		and	a
5636:40415+7+5	6132  2807    		jr	z,A6126
5637:40422+17	6134  CD8F40  		call	A408F			; output to screen
5638:40439+6	6137  23      		inc	hl
5639:40445+10	6138  F1      		pop	af
5640:40455+12	6139  18F2    		jr	A6118			; print choice string
5641:				;
5642:40467+10	613B  F1      	A6126:	pop	af
5643:40477+17	613C  CD9B5F  		call	A5F86
5644:     -	613F  3F2000  		defb	"? ",0
5645:40494+17	6142  CDAA61  	A612D:	call	A6195			; get fresh consoleinput (CTRL-C aborts)
5646:40511+7	6145  D631    		sub	"1"
5647:40518+7	6147  FE09    		cp	009H			; input "1"-"9" ?
5648:40525+7+5	6149  30F7    		jr	nc,A612D		; nope, ask again
5649:40532+7	614B  C631    		add	a,"1"
5650:40539+17	614D  CDDB62  	A6138:	call	A62C6			; print input and CR/LF
5651:40556+7	6150  D630    		sub	"0"			; choice 1-9
5652:40563+11	6152  F5      		push	af
5653:40574+17	6153  CD8961  	A613E:	call	A6174			; prompt and get fresh consoleinput (CTRL-C aborts)
5654:40591+10	6156  F1      		pop	af
5655:40601+10	6157  D1      		pop	de
5656:40611+14	6158  FDE1    		pop	iy
5657:40625+10	615A  C1      		pop	bc
5658:40635+10	615B  E1      		pop	hl
5659:40645+14	615C  DD211C40		ld	ix,T401C
5660:40659+17	6160  CD1C00  		call	CALSLT			; call DSKFMT diskdriver
5661:40676+10	6163  21F561  		ld	hl,T61E0
5662:40686+7+5	6166  300A    		jr	nc,A615D		; no error, print "format complete" and quit
5663:40693+10	6168  215D62  		ld	hl,T6248
5664:40703+17	616B  CD0660  		call	A5FF1			; get errorstring entry
5665:40720+7	616E  7E      		ld	a,(hl)
5666:40727+6	616F  23      		inc	hl
5667:40733+7	6170  66      		ld	h,(hl)
5668:40740+4	6171  6F      		ld	l,a			; pointer to errorstring
5669:40744+17	6172  CDDE62  	A615D:	call	A62C9			; print CR/LF
5670:40761+17	6175  CDA15F  		call	A5F8C			; print string
5671:40778+10	6178  C3DE62  		jp	A62C9			; print CR/LF
5672:				
5673:				;	  Subroutine get fresh keyboardinput
5674:				;	     Inputs  
5675:				;	     Outputs ________________________ 
5676:				
5677:40788+4	617B  AF      	A6166:	xor	a
5678:40792+13	617C  3236F3  		ld	(YF336),a		; no saved input
5679:40805+14	617F  DD215601		ld	ix,KILBUF
5680:40819+17	6183  CDAB40  		call	A40AB			; KILBUF BIOS call
5681:40836+10	6186  C37840  		jp	A4078			; get keyboardinput
5682:				;
5683:40846+17	6189  CD9B5F  	A6174:	call	A5F86
5684:     -	618C  53747269		defb	"Strike a key when ready ",0
	      6B652061
	      206B6579
	      20776865
	      6E207265
	      61647920
	      00
5685:40863+4	61A5  00      		nop
5686:40867+4	61A6  00      		nop
5687:40871+4	61A7  00      		nop
5688:40875+4	61A8  00      		nop				; room for expansion ??
5689:40879+4	61A9  00      		nop				; extra 5 bytes
5690:40883+17	61AA  CD7B61  	A6195:	call	A6166			; get fresh keyboardinput
5691:40900+7	61AD  FE03    		cp	003H
5692:40907+5+6	61AF  C0      		ret	nz
5693:40912+20	61B0  ED7B39F3		ld	sp,(YF339)
5694:40932+17	61B4  CD9B5F  		call	A5F86
5695:     -	61B7  0D0A4162		defb	13,10,"Aborted",0
	      6F727465
	      6400
5696:40949+10	61C1  C9      		ret
5697:				;
5698:				;
5699:     -	61C2  57726974	T61AD:	defb	"Write protected",0
	      65207072
	      6F746563
	      74656400
5700:     -	61D2  4E6F7420	T61BD:	defb	"Not ready",0
	      72656164
	      7900
5701:     -	61DC  4469736B	T61C7:	defb	"Disk error",0
	      20657272
	      6F7200
5702:     -	61E7  42616420	T61D2:	defb	"Bad parameter",0
	      70617261
	      6D657465
	      7200
5703:     -	61F5  466F726D	T61E0:	defb	"Format complete",0
	      61742063
	      6F6D706C
	      65746500
5704:				
5705:				; unused code ??
5706:				;
5707:40959+4	6205  00      		nop
5708:				;
5709:				;
5710:40963+10	6206  1198F6  	A61F1:	ld	de,TEMPST+30
5711:40973+16	6209  2A78F6  		ld	hl,(TEMPPT)
5712:40989+16	620C  22F8F7  		ld	(DAC+2),hl
5713:41005+7	620F  3E03    		ld	a,003H
5714:41012+13	6211  3263F6  	A61FC:	ld	(VALTYP),a
5715:41025+17	6214  CDF32E  		call	VMOVE
5716:41042+10	6217  119BF6  		ld	de,TEMPST+30+3
5717:41052+11	621A  E7      		rst	020H
5718:41063+16	621B  2278F6  		ld	(TEMPPT),hl
5719:41079+5+6	621E  C0      		ret	nz
5720:41084+10	621F  C30C73  		jp	A72F7
5721:				;
5722:41094+10	6222  2121FB  	A620D:	ld	hl,YFB21
5723:41104+7	6225  0604    		ld	b,004H
5724:41111+6	6227  23      	A6212:	inc	hl
5725:41117+7	6228  7E      		ld	a,(hl)
5726:41124+11	6229  F5      		push	af
5727:41135+14	622A  FDE1    		pop	iy
5728:41149+6	622C  23      		inc	hl
5729:41155+11	622D  E5      		push	hl
5730:41166+11	622E  C5      		push	bc
5731:41177+10	622F  211F40  		ld	hl,T401F
5732:41187+11	6232  E5      		push	hl
5733:41198+14	6233  DDE1    		pop	ix
5734:41212+4	6235  A7      		and	a
5735:41216+10+7	6236  C40C00  		call	nz,RDSLT
5736:41226+4	6239  A7      	A6224:	and	a
5737:41230+10+7	623A  C41C00  		call	nz,CALSLT
5738:41240+10	623D  C1      		pop	bc
5739:41250+10	623E  E1      		pop	hl
5740:41260+8+5	623F  10E6    		djnz	A6212
5741:41268+10	6241  C9      		ret
5742:				;
5743:41278+13	6242  3AD0FE  	A622D:	ld	a,(H.CLEA+0)
5744:41291+7	6245  FEC9    		cp	0C9H
5745:41298+7+5	6247  2811    	A6232:	jr	z,A6245
5746:41305+10	6249  210773  	A6234:	ld	hl,T72F2
5747:41315+10	624C  11D5FE  		ld	de,H.LOPD
5748:41325+10	624F  010500  		ld	bc,00005H
5749:41335+16+5	6252  EDB0    		ldir
5750:41351+17	6254  CD2D40  		call	A402D
5751:41368+13	6257  32D6FE  		ld	(H.LOPD+1),a
5752:41381+10	625A  C32D40  	A6245:	jp	A402D
5753:				;
5754:				;
5755:     -	625D  C261    	T6248:	defw	T61AD		; dskfmt error 0
5756:     -	625F  D261    		defw	T61BD		; dskfmt error 2
5757:     -	6261  DC61    		defw	T61C7		; dskfmt error 4
5758:     -	6263  DC61    		defw	T61C7		; dskfmt error 6
5759:     -	6265  DC61    		defw	T61C7		; dskfmt error 8
5760:     -	6267  DC61    		defw	T61C7		; dskfmt error 10
5761:     -	6269  E761    		defw	T61D2		; dskfmt error 12
5762:     -	626B  E55E    		defw	T5ED0		; dskfmt error 14
5763:     -	626D  DC61    		defw	T61C7		; dskfmt error 16
5764:				
5765:     -	626F          	PROMPT:
5766:41391+13	626F  3A3FF3  	L625A:	ld	a,(YF33F)		; driveid
5767:41404+7	6272  C641    		add	a,"A"
5768:41411+17	6274  CD4FF2  		call	XF24F			; PROMPT hook
5769:41428+11	6277  F5      		push	af
5770:41439+17	6278  CD9B5F  		call	A5F86
5771:     -	627B  0D0A496E		defb	13,10,"Insert diskette for drive ",0
	      73657274
	      20646973
	      6B657474
	      6520666F
	      72206472
	      69766520
	      00
5772:41456+4	6298  00      		nop
5773:41460+4	6299  00      		nop
5774:41464+4	629A  00      		nop
5775:41468+4	629B  00      		nop
5776:41472+4	629C  00      		nop
5777:41476+4	629D  00      		nop
5778:41480+4	629E  00      		nop
5779:41484+4	629F  00      		nop
5780:41488+4	62A0  00      		nop				; room for expansion
5781:41492+4	62A1  00      		nop				; extra 10 bytes
5782:41496+10	62A2  F1      		pop	af
5783:41506+17	62A3  CD8F40  		call	A408F			; output to screen
5784:41523+17	62A6  CD9B5F  		call	A5F86
5785:     -	62A9  3A0D0A61		defb	":",13,10,"and strike a key when ready",0
	      6E642073
	      7472696B
	      65206120
	      6B657920
	      7768656E
	      20726561
	      647900
5786:41540+4	62C8  00      		nop
5787:41544+4	62C9  00      		nop
5788:41548+4	62CA  00      		nop
5789:41552+4	62CB  00      		nop
5790:41556+4	62CC  00      		nop
5791:41560+4	62CD  00      		nop
5792:41564+4	62CE  00      		nop
5793:41568+4	62CF  00      		nop
5794:41572+4	62D0  00      		nop				; room for expansion
5795:41576+4	62D1  00      		nop				; extra 10 bytes
5796:41580+17	62D2  CD7B61  	A62BD:	call	A6166			; get fresh keyboardinput
5797:41597+7	62D5  FE03    		cp	003H
5798:41604+7+5	62D7  28F9    		jr	z,A62BD
5799:41611+12	62D9  1803    		jr	A62C9			; print CR/LF
5800:				;
5801:41623+17	62DB  CD8F40  	A62C6:	call	A408F			; output to screen
5802:41640+11	62DE  F5      	A62C9:	push	af
5803:41651+7	62DF  3E0D    		ld	a,00DH
5804:41658+17	62E1  CD8F40  		call	A408F			; output to screen
5805:41675+7	62E4  3E0A    		ld	a,00AH
5806:41682+17	62E6  CD8F40  		call	A408F			; output to screen
5807:41699+10	62E9  F1      	A62D4:	pop	af
5808:41709+10	62EA  C9      		ret
5809:				;
5810:41719+10	62EB  2100FF  	A62D6:	ld	hl,0FF00H
5811:41729+11	62EE  39      		add	hl,sp			; leave room for the stack
5812:41740+20	62EF  ED5BC6F6		ld	de,(STREND)		; end of used BASIC memory
5813:41760+4	62F3  AF      		xor	a
5814:41764+15	62F4  ED52    		sbc	hl,de
5815:41779+4	62F6  4D      		ld	c,l
5816:41783+4	62F7  44      		ld	b,h			; size of buffer
5817:41787+4	62F8  EB      		ex	de,hl			; start of buffer
5818:41791+5+6	62F9  D0      		ret	nc
5819:41796+4	62FA  4F      		ld	c,a
5820:41800+4	62FB  47      		ld	b,a			; not enough room, size=0
5821:41804+10	62FC  C9      		ret
5822:				;
5823:				;
5824:41814+6	62FD  33      	T62E8:	inc	sp
5825:41820+6	62FE  33      		inc	sp
5826:41826+10	62FF  C31D6F  		jp	SKPCHK
5827:				;
5828:				;
5829:41836+4	6302  7A      	T62ED:	ld	a,d
5830:41840+7	6303  FE09    		cp	009H
5831:41847+10	6305  D2C96E  		jp	nc,CALBLD+3
5832:41857+11	6308  F7      		rst	030H
5833:     -	6309  00      		defb	000H
5834:     -	630A  BC6A    		defw	A6AA7
5835:41868+11	630C  E5      		push	hl
5836:41879+10	630D  C3F46E  		jp	EXEBLD
5837:				;
5838:				;
5839:41889+4	6310  7A      		ld	a,d
5840:41893+7	6311  FE09    		cp	009H
5841:41900+10	6313  D2956E  		jp	nc,CALBSV+3
5842:41910+11	6316  F7      		rst	030H
5843:     -	6317  00      		defb	000H
5844:     -	6318  FC69    		defw	A69E7
5845:41921+10	631A  C9      		ret
5846:				;
5847:				; CHANGED TO CREATE ROOM FOR FUTURE EXPANDING CODE
5848:				; routine functions have compatible code
5849:				;
5850:41931+7	631B  1A      	A6306:	ld	a,(de)
5851:41938+6	631C  13      		inc	de
5852:41944+4	631D  B7      		or	a
5853:41948+5+6	631E  C8      		ret	z
5854:41953+20	631F  DD2A4BF3		ld	ix,(YF34B)
5855:41973+7	6323  0600    		ld	b,0
5856:41980+4	6325  4F      		ld	c,a
5857:41984+15	6326  DD09    		add	ix,bc
5858:41999+19	6328  DD4E00  		ld	c,(ix+0)
5859:42018+19	632B  DD4601  		ld	b,(ix+1)
5860:42037+11	632E  09      		add	hl,bc
5861:42048+19	632F  DD7500  		ld	(ix+0),l
5862:42067+19	6332  DD7401  		ld	(ix+1),h
5863:42086+15	6335  ED42    		sbc	hl,bc
5864:42101+12	6337  18E2    		jr	A6306
5865:				
5866:				; relocate data
5867:				;
5868:     -	6339  0D      	T632E:	defb	R0000+1-A6336
5869:     -	633A  1F      		defb	R0001+2-A6336
5870:     -	633B  22      		defb	R0002+1-A6336
5871:     -	633C  30      		defb	R0003+1-A6336
5872:     -	633D  46      		defb	R0100+1-A6336
5873:     -	633E  49      		defb	R0101+1-A6336
5874:     -	633F  57      		defb	R0102+1-A6336
5875:     -	6340  5C      		defb	R0103+1-A6336
5876:     -	6341  62      		defb	R0200+1-A6336
5877:     -	6342  65      		defb	R0201+1-A6336
5878:     -	6343  73      		defb	R0202+1-A6336
5879:     -	6344  79      		defb	R0203+1-A6336
5880:     -	6345  AA      		defb	R0300+1-A6336
5881:     -	6346  AD      		defb	R0301+1-A6336
5882:     -	6347  B9      		defb	R0302+1-A6336
5883:     -	6348  CF      		defb	R0303+1-A6336
5884:     -	6349  EA      		defb	R0400+1-A6336
5885:     -	634A  ED      		defb	R0401+1-A6336
5886:     -	634B  F8      		defb	R0402+1-A6336
5887:     -	634C  00      		defb	0
5888:				
5889:				;
5890:				; DOS KEYINT routine
5891:				;
5892:				
5893:42113+15	634D  DDE5    	A6336:	push	ix
5894:42128+15	634F  FDE5    		push	iy
5895:42143+11	6351  E5      		push	hl
5896:42154+11	6352  D5      		push	de
5897:42165+11	6353  C5      		push	bc
5898:42176+11	6354  F5      		push	af
5899:42187+4	6355  D9      		exx
5900:42191+4	6356  08      		ex	af,af'
5901:42195+11	6357  F5      		push	af
5902:42206+11	6358  E5      		push	hl
5903:42217+16	6359  2A7663  	R0000:	ld	hl,(D635E+1)
5904:42233+4	635C  7D      		ld	a,l
5905:42237+4	635D  B4      		or	h			; already in KEYINT ?
5906:42241+10	635E  E1      		pop	hl
5907:42251+14	635F  DD213800		ld	ix,KEYINT
5908:42265+20	6363  FD2AC0FC		ld	iy,(EXPTBL-1+0)
5909:42285+7+5	6367  2023    		jr	nz,A6375		; yep, start BIOS KEYINT
5910:42292+10	6369  F1      		pop	af
5911:42302+20	636A  ED737663	R0001:	ld	(D635E+1),sp		; save current stackpointer
5912:42322+10	636E  314D63  	R0002:	ld	sp,A6336		; switch to special KEYINT stack (because stackpointer in DOS could be in page 0)
5913:42332+17	6371  CD1C00  		call	CALSLT			; start BIOS KEYINT
5914:42349+4	6374  F3      		di
5915:42353+10	6375  310000  	D635E:	ld	sp,00000H		; restore orginal stackpointer
5916:42363+11	6378  E5      		push	hl
5917:42374+10	6379  210000  		ld	hl,0
5918:42384+16	637C  227663  	R0003:	ld	(D635E+1),hl		; flag not in KEYINT
5919:42400+10	637F  E1      		pop	hl
5920:42410+4	6380  08      	A6369:	ex	af,af'
5921:42414+4	6381  D9      		exx
5922:42418+10	6382  F1      		pop	af
5923:42428+10	6383  C1      		pop	bc
5924:42438+10	6384  D1      		pop	de
5925:42448+10	6385  E1      	A636E:	pop	hl
5926:42458+14	6386  FDE1    		pop	iy
5927:42472+14	6388  DDE1    		pop	ix
5928:42486+4	638A  FB      		ei
5929:42490+10	638B  C9      		ret
5930:				;
5931:42500+10	638C  F1      	A6375:	pop	af
5932:42510+17	638D  CD1C00  		call	CALSLT
5933:42527+12	6390  18EE    		jr	A6369
5934:				
5935:				; DOS RDSLT routine
5936:				
5937:     -	6392          	A63F4:
5938:42539+17	6392  CD5664  	R0100:	call	A64C2			; calculate masks
5939:42556+10	6395  FAA263  	R0101:	jp	m,A6404			; expanded slot specified,
5940:42566+11	6398  DBA8    		in	a,(0A8H)
5941:42577+4	639A  57      		ld	d,a			; save primary slotregister
5942:42581+4	639B  A1      		and	c
5943:42585+4	639C  B0      		or	b			; change slot of specified page
5944:42589+17	639D  CD80F3  		call	RDPRIM			; change primary slotregister, read memory and restore primary slotregister
5945:42606+4	63A0  7B      		ld	a,e
5946:42610+10	63A1  C9      		ret
5947:				;
5948:42620+11	63A2  E5      	A6404:	push	hl
5949:42631+17	63A3  CD7964  	R0102:	call	A64E7			; setup secundairy slotregister
5950:42648+19	63A6  E3      		ex	(sp),hl
5951:42667+11	63A7  C5      		push	bc
5952:42678+17	63A8  CD9263  	R0103:	call	A63F4			; RDSLT, but now only with primary slot
5953:42695+12	63AB  181B    		jr	A6436			; restore secundairy slotregister
5954:				
5955:				; DOS WRSLT routine
5956:				;
5957:42707+11	63AD  D5      	A6415:	push	de
5958:42718+17	63AE  CD5664  	R0200:	call	A64C2			; calculate masks
5959:42735+10	63B1  FABD63  	R0201:	jp	m,A6425			; expanded slot specified,
5960:42745+10	63B4  D1      		pop	de
5961:42755+11	63B5  DBA8    		in	a,(0A8H)
5962:42766+4	63B7  57      		ld	d,a			; save primary slotregister
5963:42770+4	63B8  A1      		and	c
5964:42774+4	63B9  B0      		or	b			; change slot of specified page
5965:42778+10	63BA  C385F3  		jp	WRPRIM			; change primairy slotregister, write memory and restore primary slotregister
5966:				;
5967:42788+19	63BD  E3      	A6425:	ex	(sp),hl
5968:42807+11	63BE  E5      		push	hl
5969:42818+17	63BF  CD7964  	R0202:	call	A64E7			; setup secundairy slotregister
5970:42835+10	63C2  D1      		pop	de
5971:42845+19	63C3  E3      		ex	(sp),hl
5972:42864+11	63C4  C5      		push	bc
5973:42875+17	63C5  CDAD63  	R0203:	call	A6415			; WRSLT, but now only with primary slot
5974:42892+10	63C8  C1      	A6436:	pop	bc
5975:42902+19	63C9  E3      		ex	(sp),hl
5976:42921+11	63CA  F5      		push	af
5977:42932+4	63CB  78      		ld	a,b
5978:42936+7	63CC  E63F    		and	03FH
5979:42943+4	63CE  B1      		or	c
5980:42947+4	63CF  B8      		cp	b			; restore secundairy slotregister currently in page 3 ?
5981:42951+7+5	63D0  2004    		jr	nz,ARDWR		; nope, use helper routine in page 0
5982:42958+4	63D2  7D      		ld	a,l
5983:42962+13	63D3  32FFFF  		ld	(0FFFFH),a		; yep, restore secundairy slotregister directly to avoid crash for page 0 addresses
5984:42975+10+7	63D6  C44600  	ARDWR:	call	nz,X0046		; restore secundairy slotregister
5985:42985+10	63D9  F1      		pop	af
5986:42995+10	63DA  E1      		pop	hl
5987:43005+10	63DB  C9      		ret
5988:				
5989:				; DOS CALLF routine
5990:				;
5991:43015+19	63DC  E3      	A6443:	ex	(sp),hl
5992:43034+11	63DD  F5      		push	af
5993:43045+11	63DE  D5      		push	de
5994:43056+7	63DF  7E      		ld	a,(hl)
5995:43063+11	63E0  F5      		push	af
5996:43074+14	63E1  FDE1    		pop	iy
5997:43088+6	63E3  23      		inc	hl
5998:43094+7	63E4  5E      		ld	e,(hl)
5999:43101+6	63E5  23      		inc	hl
6000:43107+7	63E6  56      		ld	d,(hl)
6001:43114+6	63E7  23      		inc	hl
6002:43120+11	63E8  D5      		push	de
6003:43131+14	63E9  DDE1    		pop	ix
6004:43145+10	63EB  D1      		pop	de
6005:43155+10	63EC  F1      		pop	af
6006:43165+19	63ED  E3      		ex	(sp),hl
6007:				
6008:				; DOS CALSLT routine
6009:				;
6010:43184+4	63EE  D9      	A6455:	exx
6011:43188+4	63EF  08      		ex	af,af'
6012:43192+15	63F0  FDE5    		push	iy
6013:43207+10	63F2  F1      		pop	af
6014:43217+15	63F3  DDE5    		push	ix
6015:43232+10	63F5  E1      		pop	hl
6016:43242+17	63F6  CD5664  	R0300:	call	A64C2			; calculate masks
6017:43259+10	63F9  FA0564  	R0301:	jp	m,A646C			; expanded slot specified,
6018:43269+11	63FC  DBA8    		in	a,(0A8H)
6019:43280+11	63FE  F5      		push	af			; save primary slotregister
6020:43291+4	63FF  A1      		and	c
6021:43295+4	6400  B0      		or	b			; change slot of specified page
6022:43299+4	6401  D9      		exx
6023:43303+10	6402  C38CF3  		jp	CLPRIM			; change primary slotregister, execute routine and restore primary slotregister
6024:				;
6025:     -	6405          	A646C:
6026:43313+17	6405  CD7964  	R0302:	call	A64E7			; setup secundairy slotregister
6027:43330+11	6408  F5      		push	af
6028:43341+14	6409  FDE1    		pop	iy
6029:43355+11	640B  E5      		push	hl
6030:43366+11	640C  C5      		push	bc
6031:43377+4	640D  4F      		ld	c,a
6032:43381+7	640E  0600    		ld	b,000H
6033:43388+4	6410  7D      		ld	a,l
6034:43392+4	6411  A4      		and	h
6035:43396+4	6412  B2      		or	d
6036:43400+10	6413  21C5FC  		ld	hl,SLTTBL
6037:43410+11	6416  09      		add	hl,bc
6038:43421+7	6417  77      		ld	(hl),a			; update SLTTBL to reflect the change of the secundairy slotregister
6039:43428+11	6418  E5      		push	hl
6040:43439+4	6419  08      		ex	af,af'
6041:43443+4	641A  D9      		exx
6042:43447+17	641B  CDEE63  	R0303:	call	A6455			; CALSLT, but now only with primary slot
6043:43464+4	641E  D9      		exx
6044:43468+4	641F  08      		ex	af,af'
6045:43472+10	6420  E1      		pop	hl
6046:43482+10	6421  C1      		pop	bc
6047:43492+10	6422  D1      		pop	de
6048:43502+4	6423  78      		ld	a,b
6049:43506+7	6424  E63F    		and	03FH
6050:43513+4	6426  B1      		or	c
6051:43517+4	6427  F3      		di
6052:43521+4	6428  B8      		cp	b			; same primairy slot ?
6053:43525+7+5	6429  2004    		jr	nz,ACALL		; nope, use the helper routine in page 0
6054:43532+4	642B  7B      		ld	a,e
6055:43536+13	642C  32FFFF  		ld	(0FFFFH),a		; yep, setup secudairy slotregister directly to avoid crash for page 0 addresses
6056:43549+10+7	642F  C44B00  	ACALL:	call	nz,X004B		; nope, setup secundairy slotregister
6057:43559+7	6432  73      		ld	(hl),e
6058:43566+4	6433  08      		ex	af,af'
6059:43570+4	6434  D9      		exx
6060:43574+10	6435  C9      		ret
6061:				
6062:				; DOS ENASLT routine
6063:				;
6064:     -	6436          	A649C:
6065:43584+17	6436  CD5664  	R0400:	call	A64C2			; calculate masks
6066:43601+10	6439  FA4364  	R0401:	jp	m,A64A9			; expanded slot specified,
6067:43611+11	643C  DBA8    	A64A2:	in	a,(0A8H)
6068:43622+4	643E  A1      		and	c
6069:43626+4	643F  B0      		or	b
6070:43630+11	6440  D3A8    		out	(0A8H),a		; change slot of specified page
6071:43641+10	6442  C9      		ret
6072:				;
6073:     -	6443          	A64A9:
6074:43651+11	6443  E5      	A64AF:	push	hl
6075:43662+17	6444  CD7964  	R0402:	call	A64E7			; setup secundairy slotregister
6076:43679+4	6447  4F      		ld	c,a
6077:43683+7	6448  0600    		ld	b,000H
6078:43690+4	644A  7D      		ld	a,l
6079:43694+4	644B  A4      		and	h
6080:43698+4	644C  B2      		or	d
6081:43702+10	644D  21C5FC  		ld	hl,SLTTBL
6082:43712+11	6450  09      		add	hl,bc
6083:43723+7	6451  77      		ld	(hl),a			; update SLTTBL to reflect the change of the secundairy slotregister
6084:43730+10	6452  E1      		pop	hl
6085:43740+4	6453  79      		ld	a,c
6086:43744+12	6454  18E0    		jr	A649C			; ENASLT, but now only with primary slot
6087:				;
6088:43756+4	6456  F3      	A64C2:	di
6089:43760+11	6457  F5      		push	af
6090:43771+7	6458  E603    		and	003H
6091:43778+4	645A  47      		ld	b,a
6092:43782+4	645B  04      		inc	b
6093:43786+7	645C  3EAB    		ld	a,0ABH
6094:43793+7	645E  C655    	A64DD:	add	a,055H
6095:43800+8+5	6460  10FC    		djnz	A64DD
6096:43808+4	6462  57      		ld	d,a			; primary slot mask (PP PP PP PP)
6097:43812+4	6463  7C      		ld	a,h
6098:43816+4	6464  07      		rlca
6099:43820+4	6465  07      		rlca
6100:43824+7	6466  E603    		and	003H
6101:43831+4	6468  47      		ld	b,a
6102:43835+4	6469  04      		inc	b
6103:43839+7	646A  3EC0    		ld	a,0C0H
6104:43846+4	646C  07      	A64CD:	rlca
6105:43850+4	646D  07      		rlca
6106:43854+8+5	646E  10FC    		djnz	A64CD
6107:43862+4	6470  5F      		ld	e,a			; select page mask
6108:43866+4	6471  2F      		cpl
6109:43870+4	6472  4F      		ld	c,a			; clear page mask
6110:43874+4	6473  7A      		ld	a,d
6111:43878+4	6474  A3      		and	e
6112:43882+4	6475  47      		ld	b,a			; set primary slot mask
6113:43886+10	6476  F1      		pop	af
6114:43896+4	6477  A7      		and	a			; sign flag set if expanded slot
6115:43900+10	6478  C9      		ret
6116:				
6117:43910+11	6479  F5      	A64E7:	push	af
6118:43921+7	647A  E60C    		and	00CH
6119:43928+4	647C  0F      		rrca
6120:43932+4	647D  0F      		rrca				; requested secundairy slot in b1-b0
6121:43936+4	647E  47      		ld	b,a
6122:43940+4	647F  04      		inc	b
6123:43944+7	6480  3EAB    		ld	a,0ABH
6124:43951+7	6482  C655    	A64FF:	add	a,055H
6125:43958+8+5	6484  10FC    		djnz	A64FF
6126:43966+4	6486  A3      		and	e
6127:43970+4	6487  57      		ld	d,a
6128:43974+4	6488  7B      		ld	a,e
6129:43978+4	6489  2F      		cpl
6130:43982+4	648A  67      		ld	h,a
6131:43986+10	648B  F1      		pop	af
6132:43996+7	648C  E603    		and	003H			; requested primary slot in b1-b0
6133:44003+11	648E  F5      		push	af
6134:44014+4	648F  0F      		rrca
6135:44018+4	6490  0F      		rrca
6136:44022+4	6491  4F      		ld	c,a			; OR mask for selecting primary slot in page 3
6137:44026+11	6492  DBA8    		in	a,(0A8H)
6138:44037+4	6494  47      		ld	b,a			; current primary slotregister
6139:44041+7	6495  E63F    		and	03FH
6140:44048+4	6497  B1      		or	c
6141:44052+4	6498  B8      		cp	b			; change secundairy slotregister currently in page 3 ?
6142:44056+7+5	6499  200C    		jr	nz,ASSEC		; no, use helper routine in page 0
6143:44063+13	649B  3AFFFF  		ld	a,(0FFFFH)
6144:44076+4	649E  2F      		cpl
6145:44080+4	649F  6F      		ld	l,a
6146:44084+4	64A0  A4      		and	h
6147:44088+4	64A1  B2      		or	d
6148:44092+13	64A2  32FFFF  		ld	(0FFFFH),a		; yep adjust secundairy slotregister directly to avoid crash for page 0 addresses
6149:44105+10	64A5  F1      		pop	af
6150:44115+10	64A6  C9      		ret
6151:44125+17	64A7  CD3B00  	ASSEC:	call	X003B			; save and change secundairy slotregister
6152:44142+10	64AA  F1      		pop	af
6153:44152+10	64AB  C9      		ret
6154:				
6155:				; DOS ENAKRN routine
6156:				;
6157:44162+11	64AC  F5      	A63A1:	push	af
6158:44173+13	64AD  3A48F3  		ld	a,(YF348)		; slotid kernel ROM
6159:44186+12	64B0  1804    		jr	A63AD
6160:				
6161:				; DOS ENARAM routine
6162:				;
6163:44198+11	64B2  F5      	A63A3:	push	af
6164:44209+13	64B3  3A42F3  		ld	a,(RAMAD1)		; slotid TPA (RAM) page 1
6165:44222+11	64B6  E5      	A63AD:	push	hl
6166:44233+11	64B7  D5      		push	de
6167:44244+11	64B8  C5      		push	bc
6168:44255+7	64B9  2640    		ld	h,040H
6169:44262+17	64BB  CD2400  		call	ENASLT
6170:44279+10	64BE  C1      		pop	bc
6171:44289+10	64BF  D1      		pop	de
6172:44299+10	64C0  E1      		pop	hl
6173:44309+10	64C1  F1      		pop	af
6174:44319+10	64C2  C9      		ret
6175:				
6176:				; DOS XFER routine
6177:				;
6178:44329+11	64C3  F5      	A637B:	push	af
6179:44340+11	64C4  E5      		push	hl
6180:44351+11	64C5  D5      		push	de
6181:44362+11	64C6  C5      		push	bc
6182:44373+17	64C7  CD2D40  		call	A402D
6183:44390+11	64CA  F5      		push	af			; save slotid currently on page 1 (the diskdriver ROM)
6184:44401+7	64CB  2640    		ld	h,040H
6185:44408+13	64CD  3A42F3  		ld	a,(RAMAD1)
6186:44421+17	64D0  CD2400  		call	ENASLT			; enable TPA (RAM) on page 1
6187:44438+10	64D3  F1      		pop	af
6188:44448+10	64D4  C1      		pop	bc
6189:44458+10	64D5  D1      		pop	de
6190:44468+10	64D6  E1      		pop	hl
6191:44478+16+5	64D7  EDB0    		ldir				; transfer to/from TPA
6192:44494+11	64D9  E5      		push	hl
6193:44505+11	64DA  D5      		push	de
6194:44516+11	64DB  C5      		push	bc
6195:44527+17	64DC  CD68F3  		call	XF368			; enable kernel ROM on page 1
6196:44544+7	64DF  2640    		ld	h,040H
6197:44551+17	64E1  CD2400  		call	ENASLT			; restore diskdriver ROM on page 1
6198:44568+10	64E4  C1      		pop	bc
6199:44578+10	64E5  D1      		pop	de
6200:44588+10	64E6  E1      		pop	hl
6201:44598+10	64E7  F1      		pop	af
6202:44608+10	64E8  C9      		ret
6203:				
6204:				
6205:     -	019C          	LDOSR	equ	$-A6336
6206:				;
6207:     -	64E9          	A655C:
6208:				
6209:				; change secundairy slotregister (copied to 003BH)
6210:				
6211:44618+11	64E9  D3A8    		out	(0A8H),a
6212:44629+13	64EB  3AFFFF  		ld	a,(YFFFF)
6213:44642+4	64EE  2F      		cpl
6214:44646+4	64EF  6F      		ld	l,a
6215:44650+4	64F0  A4      		and	h
6216:44654+4	64F1  B2      		or	d
6217:44658+12	64F2  1808    		jr	A656F
6218:				
6219:				; restore secundairy slotregister (copied to 0046H)
6220:				
6221:44670+11	64F4  D3A8    		out	(0A8H),a
6222:44681+4	64F6  7D      		ld	a,l
6223:44685+12	64F7  1803    		jr	A656F
6224:				
6225:				; setup secundairy slotregister (copied to 004BH)
6226:				
6227:44697+11	64F9  D3A8    		out	(0A8H),a
6228:44708+4	64FB  7B      		ld	a,e
6229:44712+13	64FC  32FFFF  	A656F:	ld	(YFFFF),a
6230:44725+4	64FF  78      		ld	a,b
6231:44729+11	6500  D3A8    		out	(0A8H),a
6232:44740+10	6502  C9      		ret
6233:				;
6234:				; NEW ROUTINE: READ BOOTSECTOR FROM ANY PHYSICAL DRIVE
6235:				;
6236:44750+10	6503  215F65  	ABOOT:	ld	hl,AINCP
6237:44760+10	6506  1168F5  		ld	de,BUF+10
6238:44770+10	6509  010800  		ld	bc,LINCP
6239:44780+16+5	650C  EDB0    		ldir
6240:44796+13	650E  3A47F3  		ld	a,(YF347)
6241:44809+4	6511  47      		ld	b,a			; try all drives
6242:44813+7	6512  0E00    		ld	c,0			; begin with A:
6243:44820+4	6514  79      	ANXBT:	ld	a,c
6244:44824+13	6515  3247F2  		ld	(YF247),a		; set default drive
6245:44837+17	6518  CD4765  		call	ADPTH			; hook PROMPT
6246:44854+11	651B  C5      		push	bc
6247:44865+17	651C  CDA75A  		call	A5AE7			; read bootsector from the default drive
6248:44882+10	651F  C1      		pop	bc
6249:44892+4	6520  9F      		sbc	a,a
6250:44896+4	6521  5F      		ld	e,a			; validflag
6251:44900+13	6522  3A4FF2  		ld	a,(XF24F)
6252:44913+7	6525  FEC3    		cp	0C3H			; used PROMPT (panthom drive)
6253:44920+7+5	6527  280F    		jr	z,ANPTH			; nop,
6254:44927+17	6529  CD4765  		call	ADPTH			; hook PROMPT
6255:44944+4	652C  79      		ld	a,c
6256:44948+4	652D  3D      		dec	a
6257:44952+13	652E  3247F2  		ld	(YF247),a		; physical drive panthomed is now default
6258:44965+11	6531  C5      		push	bc
6259:44976+17	6532  CDA75A  		call	A5AE7			; read bootsector from the default drive (just restoring panthom status)
6260:44993+10	6535  C1      		pop	bc
6261:45003+7	6536  1EFF    		ld	e,0FFH			; invalid
6262:45010+17	6538  CD5365  	ANPTH:	call	AEPTH			; clear hook PROMPT
6263:45027+4	653B  AF      		xor	a
6264:45031+4	653C  93      		sub	e
6265:45035+5+6	653D  D0      		ret	nc			; valid bootsector, quit
6266:45040+4	653E  0C      		inc	c
6267:45044+8+5	653F  10D3    		djnz	ANXBT			; next drive
6268:45052+4	6541  AF      		xor	a
6269:45056+13	6542  3247F2  		ld	(YF247),a
6270:45069+4	6545  37      		scf				; none found, restore A: as default drive
6271:45073+10	6546  C9      		ret
6272:				
6273:45083+10	6547  214FF2  	ADPTH:	ld	hl,XF24F
6274:45093+10	654A  36C3    		ld	(hl),0C3H
6275:45103+6	654C  23      		inc	hl
6276:45109+10	654D  3668    		ld	(hl),LOW (BUF+10)
6277:45119+6	654F  23      		inc	hl
6278:45125+10	6550  36F5    		ld	(hl),HIGH (BUF+10)
6279:45135+10	6552  C9      		ret
6280:				
6281:45145+10	6553  214FF2  	AEPTH:	ld	hl,XF24F
6282:45155+10	6556  36C9    		ld	(hl),0C9H
6283:45165+6	6558  23      		inc	hl
6284:45171+10	6559  36C9    		ld	(hl),0C9H
6285:45181+6	655B  23      		inc	hl
6286:45187+10	655C  36C9    		ld	(hl),0C9H
6287:45197+10	655E  C9      		ret
6288:				
6289:45207+19	655F  E3      	AINCP:	ex	(sp),hl
6290:45226+10	6560  214FF2  		ld	hl,XF24F
6291:45236+10	6563  36C9    		ld	(hl),0C9H
6292:45246+10	6565  E1      		pop	hl
6293:45256+10	6566  C9      		ret
6294:				
6295:     -	0008          	LINCP	equ	$-AINCP
6296:				;
6297:				; UNUSED SPACE IS FILLED WITH NOPS, TO KEEP FOLLOWING CODE AT
6298:				; THE SAME ADDRESSES FOR MAXIUM COMPATIBLITY
6299:				;
6300:     -	6567 .. 658A 00		defs	06576H-06306H-($-A6306),0
6301:				;
6302:				; END OF CHANGE
6303:				;
6304:45266+13	658B  3A4EFE  	A6576:	ld	a,(H.GETP+0)
6305:45279+7	658E  FEC9    		cp	0C9H
6306:45286+4	6590  37      		scf
6307:45290+5+6	6591  C8      		ret	z
6308:45295+11	6592  E5      		push	hl
6309:45306+17	6593  CD2D40  		call	A402D
6310:45323+10	6596  2148F3  		ld	hl,YF348
6311:45333+7	6599  BE      		cp	(hl)
6312:45340+7+5	659A  2026    		jr	nz,A65AD
6313:45347+10	659C  21C665  		ld	hl,T65B1
6314:45357+10	659F  1189FD  	A658A:	ld	de,PROCNM
6315:45367+7	65A2  1A      	A658D:	ld	a,(de)
6316:45374+7	65A3  BE      		cp	(hl)
6317:45381+6	65A4  13      		inc	de
6318:45387+6	65A5  23      		inc	hl
6319:45393+7+5	65A6  2010    		jr	nz,A65A3
6320:45400+4	65A8  A7      		and	a
6321:45404+7+5	65A9  20F7    		jr	nz,A658D
6322:45411+7	65AB  7E      		ld	a,(hl)
6323:45418+6	65AC  23      		inc	hl
6324:45424+7	65AD  66      		ld	h,(hl)
6325:45431+4	65AE  6F      		ld	l,a
6326:45435+19	65AF  E3      		ex	(sp),hl
6327:45454+17	65B0  CDEF72  		call	A72DA
6328:45471+4	65B3  37      		scf
6329:45475+4	65B4  3F      		ccf
6330:45479+10	65B5  C9      		ret
6331:				;
6332:45489+6	65B6  23      	A65A1:	inc	hl
6333:45495+7	65B7  7E      		ld	a,(hl)
6334:45502+4	65B8  A7      	A65A3:	and	a
6335:45506+7+5	65B9  20FB    		jr	nz,A65A1
6336:45513+6	65BB  23      		inc	hl
6337:45519+6	65BC  23      		inc	hl
6338:45525+6	65BD  23      		inc	hl
6339:45531+7	65BE  7E      		ld	a,(hl)
6340:45538+4	65BF  A7      		and	a
6341:45542+7+5	65C0  20DD    		jr	nz,A658A
6342:45549+10	65C2  E1      	A65AD:	pop	hl
6343:45559+10	65C3  C3C475  		jp	OEMSTA
6344:				;
6345:				;
6346:     -	65C6  53595354	T65B1:	defb	"SYSTEM",0
	      454D00
6347:     -	65CD  D965    		defw	A65C4
6348:     -	65CF  464F524D		defb	"FORMAT",0
	      415400
6349:     -	65D6  F165    		defw	A65DC
6350:     -	65D8  00      		defb	0
6351:				
6352:45569+5+6	65D9  C0      	A65C4:	ret	nz
6353:45574+13	65DA  3A46F3  		ld	a,(YF346)
6354:45587+4	65DD  A7      		and	a
6355:45591+10	65DE  CA2A73  		jp	z,A7315
6356:45601+14	65E1  DD211C6C		ld	ix,ACLOSE
6357:45615+17	65E5  CD3373  		call	A731E
6358:45632+17	65E8  CDD200  		call	TOTEXT
6359:45649+17	65EB  CDCC00  		call	ERAFNK
6360:45666+10	65EE  C3115A  		jp	A5A11			; start MSXDOS
6361:				;
6362:45676+11	65F1  E5      	A65DC:	push	hl
6363:45687+10+7	65F2  CCC660  		call	z,A60B1
6364:45697+10	65F5  E1      		pop	hl
6365:45707+4	65F6  A7      		and	a
6366:45711+10	65F7  C9      		ret
6367:				;
6368:45721+4	65F8  7A      	A65E3:	ld	a,d
6369:45725+4	65F9  3D      	A65E4:	dec	a
6370:45729+5+6	65FA  F0      		ret	p
6371:45734+13	65FB  3A47F2  		ld	a,(YF247)
6372:45747+10	65FE  C9      		ret
6373:				;
6374:45757+11	65FF  E5      	A65EA:	push	hl
6375:45768+11	6600  D5      		push	de
6376:45779+11	6601  C5      		push	bc
6377:45790+17	6602  CDF865  		call	A65E3			; convert to driveid
6378:45807+4	6605  4F      		ld	c,a
6379:45811+16	6606  2A60F8  		ld	hl,(FILTAB)		; I/O channel pointer table
6380:45827+13	6609  3A5FF8  		ld	a,(MAXFIL)		; number of I/O channels
6381:45840+11	660C  F5      	A65F7:	push	af
6382:45851+7	660D  5E      		ld	e,(hl)
6383:45858+6	660E  23      		inc	hl
6384:45864+7	660F  56      		ld	d,(hl)
6385:45871+6	6610  23      		inc	hl
6386:45877+11	6611  E5      		push	hl
6387:45888+4	6612  EB      		ex	de,hl			; pointer to I/O channel
6388:45892+7	6613  7E      		ld	a,(hl)
6389:45899+4	6614  A7      		and	a			; channel in use ?
6390:45903+7+5	6615  282C    		jr	z,A662E			; nope, check next
6391:45910+6	6617  23      		inc	hl
6392:45916+6	6618  23      		inc	hl
6393:45922+6	6619  23      		inc	hl
6394:45928+6	661A  23      		inc	hl
6395:45934+7	661B  7E      		ld	a,(hl)
6396:45941+7	661C  FE09    		cp	009H			; channel in use by a disk device ?
6397:45948+7+5	661E  3023    		jr	nc,A662E		; nope, check next
6398:45955+6	6620  2B      		dec	hl
6399:45961+6	6621  2B      		dec	hl
6400:45967+7	6622  56      		ld	d,(hl)
6401:45974+6	6623  2B      		dec	hl
6402:45980+7	6624  5E      		ld	e,(hl)			; pointer to FCB
6403:45987+7	6625  1A      		ld	a,(de)			; DR byte of FCB
6404:45994+17	6626  CDF965  		call	A65E4			; convert to driveid
6405:46011+4	6629  B9      		cp	c			; same as the requested one ?
6406:46015+7+5	662A  2017    		jr	nz,A662E		; nope, check next
6407:46022+6	662C  13      		inc	de
6408:46028+4	662D  EB      		ex	de,hl
6409:46032+10	662E  1166F8  		ld	de,FILNAM
6410:46042+7	6631  060B    		ld	b,11
6411:46049+7	6633  1A      	A661E:	ld	a,(de)
6412:46056+7	6634  FE3F    		cp	"?"
6413:46063+7+5	6636  2803    		jr	z,A6626			; wildcard, treat as equal
6414:46070+7	6638  BE      		cp	(hl)
6415:46077+7+5	6639  2008    		jr	nz,A662E		; filename not equal, check next
6416:46084+6	663B  13      	A6626:	inc	de
6417:46090+6	663C  23      		inc	hl
6418:46096+8+5	663D  10F4    		djnz	A661E			; next char
6419:46104+10	663F  E1      		pop	hl
6420:46114+10	6640  E1      		pop	hl
6421:46124+12	6641  1872    		jr	A66A0			; quit with Zx set (file open)
6422:				;
6423:46136+10	6643  E1      	A662E:	pop	hl
6424:46146+10	6644  F1      		pop	af
6425:46156+4	6645  3D      		dec	a
6426:46160+10	6646  F20C66  		jp	p,A65F7			; next channel
6427:46170+12	6649  186A    		jr	A66A0			; quit with Zx reset (file not open)
6428:				;
6429:46182+11	664B  E5      	A6636:	push	hl
6430:46193+11	664C  D5      		push	de
6431:46204+11	664D  C5      		push	bc
6432:46215+4	664E  7A      		ld	a,d
6433:46219+13	664F  3268F5  		ld	(BUF+10),a
6434:46232+17	6652  CD6C66  		call	A6657			; copy FILNAM to FCB
6435:46249+17	6655  CD5A66  		call	A6645			; search file
6436:46266+12	6658  185B    		jr	A66A0
6437:				;
6438:46278+10	665A  21B2F5  	A6645:	ld	hl,BUF+84
6439:46288+16	665D  223DF2  		ld	(YF23D),hl		; transferadres in BUF
6440:46304+10	6660  1168F5  		ld	de,BUF+10
6441:46314+4	6663  AF      		xor	a
6442:46318+13	6664  3274F5  		ld	(BUF+10+12),a		; clear EX byte of FCB
6443:46331+17	6667  CDB84F  	D6652:	call	A4FB8			; search for first
6444:46348+4	666A  3C      		inc	a
6445:46352+10	666B  C9      		ret
6446:				;
6447:46362+10	666C  1169F5  	A6657:	ld	de,BUF+10+1
6448:46372+10	666F  2166F8  	A665A:	ld	hl,FILNAM
6449:46382+10	6672  010B00  		ld	bc,11
6450:46392+16+5	6675  EDB0    		ldir
6451:46408+10	6677  C9      		ret
6452:				;
6453:46418+4	6678  FB      	A6663:	ei
6454:46422+11	6679  E5      		push	hl
6455:46433+11	667A  D5      		push	de
6456:46444+11	667B  C5      		push	bc
6457:46455+11	667C  F5      		push	af
6458:46466+13	667D  3A48F3  		ld	a,(YF348)
6459:46479+4	6680  87      		add	a,a
6460:46483+10	6681  211000  		ld	hl,16
6461:46493+7+5	6684  3002    		jr	nc,A6673
6462:46500+7	6686  2E18    		ld	l,16+8
6463:46507+11	6688  39      	A6673:	add	hl,sp
6464:46518+15	6689  DDE5    		push	ix
6465:46533+10	668B  C1      		pop	bc
6466:46543+7	668C  71      		ld	(hl),c
6467:46550+6	668D  23      		inc	hl
6468:46556+7	668E  70      		ld	(hl),b
6469:46563+10	668F  210A00  		ld	hl,10
6470:46573+11	6692  39      		add	hl,sp
6471:46584+4	6693  EB      		ex	de,hl
6472:46588+12	6694  180C    		jr	A668D
6473:				;
6474:46600+15	6696  FDE5    	A6681:	push	iy
6475:46615+10	6698  C1      		pop	bc
6476:46625+7	6699  4E      	A6684:	ld	c,(hl)
6477:46632+7	669A  1A      		ld	a,(de)
6478:46639+7	669B  77      		ld	(hl),a
6479:46646+4	669C  79      		ld	a,c
6480:46650+7	669D  12      		ld	(de),a
6481:46657+6	669E  23      		inc	hl
6482:46663+6	669F  13      		inc	de
6483:46669+8+5	66A0  10F7    		djnz	A6684
6484:46677+13	66A2  3A48F3  	A668D:	ld	a,(YF348)
6485:46690+4	66A5  87      		add	a,a
6486:46694+10	66A6  211200  		ld	hl,00012H
6487:46704+7+5	66A9  3002    		jr	nc,A6698
6488:46711+7	66AB  2E1A    		ld	l,01AH
6489:46718+11	66AD  39      	A6698:	add	hl,sp
6490:46729+4	66AE  7B      		ld	a,e
6491:46733+4	66AF  95      		sub	l
6492:46737+4	66B0  7A      		ld	a,d
6493:46741+4	66B1  9C      		sbc	a,h
6494:46745+7+5	66B2  38E2    		jr	c,A6681
6495:46752+10	66B4  F1      	A669F:	pop	af
6496:46762+10	66B5  C1      	A66A0:	pop	bc
6497:46772+10	66B6  D1      		pop	de
6498:46782+10	66B7  E1      		pop	hl
6499:46792+10	66B8  C9      		ret
6500:				
6501:				;	  Subroutine  (H.GETP)
6502:				;	     Inputs  
6503:				;	     Outputs ________________________ 
6504:				
6505:46802+14	66B9  DD218BF3	A66A4:	ld	ix,RETRTN
6506:46816+14	66BD  FD210002		ld	iy,00200H
6507:46830+17	66C1  CD7866  		call	A6663			; take control from caller
6508:46847+10	66C4  E1      		pop	hl
6509:46857+7	66C5  7E      		ld	a,(hl)
6510:46864+4	66C6  A7      		and	a
6511:46868+10	66C7  C9      		ret
6512:				
6513:				;	  Subroutine OPEN statement expander (H.NOFO)
6514:				;	     Inputs  
6515:				;	     Outputs ________________________ 
6516:				
6517:46878+4	66C8  FB      	A66B3:	ei
6518:46882+10	66C9  010001  		ld	bc,256
6519:46892+20	66CC  ED433DF3		ld	(YF33D),bc		; default recordsize 256
6520:46912+17	66D0  CDEF72  		call	A72DA			; already end of statement ?
6521:46929+4	66D3  7B      		ld	a,e
6522:46933+5+6	66D4  C8      		ret	z			; yes, quit
6523:46938+11	66D5  F5      		push	af
6524:46949+11	66D6  E5      		push	hl
6525:46960+13	66D7  3A48F3  		ld	a,(YF348)
6526:46973+4	66DA  87      		add	a,a
6527:46977+10	66DB  210C00  		ld	hl,0000CH
6528:46987+7+5	66DE  3002    		jr	nc,A66CD
6529:46994+7	66E0  2E14    		ld	l,014H
6530:47001+11	66E2  39      	A66CD:	add	hl,sp
6531:47012+7	66E3  7E      		ld	a,(hl)
6532:47019+7	66E4  FE04    		cp	004H			; random mode ?
6533:47026+10	66E6  C22D73  		jp	nz,A7318		; nope,
6534:47036+6	66E9  23      		inc	hl
6535:47042+7	66EA  7E      		ld	a,(hl)
6536:47049+7	66EB  FE09    		cp	009H			; disk device ?
6537:47056+10	66ED  D22D73  		jp	nc,A7318		; nope,
6538:47066+10	66F0  E1      		pop	hl
6539:47076+17	66F1  CDE572  		call	A72D0
6540:     -	66F4  FF      		defb	0FFH
6541:47093+17	66F5  CDE572  		call	A72D0
6542:     -	66F8  92      		defb	092H
6543:47110+17	66F9  CDE572  		call	A72D0
6544:     -	66FC  EF      		defb	0EFH			; check for LEN=
6545:47127+14	66FD  DD215647		ld	ix,EVWORD
6546:47141+17	6701  CD3373  		call	A731E			; evaluate word operand
6547:47158+6	6704  1B      		dec	de
6548:47164+4	6705  14      		inc	d
6549:47168+4	6706  15      		dec	d			; should be 1-256
6550:47172+10	6707  C22A73  		jp	nz,A7315		; nope,
6551:47182+6	670A  13      		inc	de
6552:47188+20	670B  ED533DF3		ld	(YF33D),de		; recordsize
6553:47208+10	670F  F1      		pop	af
6554:47218+10	6710  C9      		ret
6555:				
6556:				;	  Subroutine OPEN statement  (H.NULO)
6557:				;	     Inputs  
6558:				;	     Outputs ________________________ 
6559:				
6560:47228+4	6711  FB      	A66FC:	ei
6561:47232+5+6	6712  D0      		ret	nc			; not for a disk device, return control
6562:47237+14	6713  DD218BF3		ld	ix,RETRTN
6563:47251+14	6717  FD210004		ld	iy,00400H
6564:47265+17	671B  CD7866  		call	A6663			; take control from caller
6565:47282+17	671E  CDBE6F  		call	A6FA9			; validate filename
6566:47299+17	6721  CDFF65  		call	A65EA			; is file already open in one of the I/O channels ?
6567:47316+10	6724  CA1E73  		jp	z,A7309			; yep, error
6568:47326+16	6727  2264F8  		ld	(PTRFIL),hl
6569:47342+4	672A  7B      		ld	a,e
6570:47346+7	672B  FE04    		cp	004H
6571:47353+7+5	672D  2807    		jr	z,A6721			; random mode, recordsize already set
6572:47360+10	672F  010100  		ld	bc,1
6573:47370+20	6732  ED433DF3		ld	(YF33D),bc		; all others use recordsize 1
6574:47390+10	6736  F1      	A6721:	pop	af
6575:47400+11	6737  F5      		push	af			; I/O channel number
6576:47411+11	6738  E5      		push	hl
6577:47422+11	6739  D5      		push	de
6578:47433+10	673A  2145F3  		ld	hl,YF345
6579:47443+7	673D  BE      		cp	(hl)			; do I have a FCB for this channel ?
6580:47450+10	673E  D22173  		jp	nc,A730C		; nope,
6581:47460+10	6741  012500  		ld	bc,37
6582:47470+4	6744  5F      		ld	e,a
6583:47474+4	6745  50      		ld	d,b
6584:47478+16	6746  2A53F3  		ld	hl,(YF353)		; base of the FCB's
6585:47494+17	6749  CD1C49  		call	A491C			; base + 37 * channelnumber
6586:47511+4	674C  AF      		xor	a
6587:47515+10	674D  210C00  		ld	hl,0000CH
6588:47525+11	6750  09      		add	hl,bc
6589:47536+7	6751  77      		ld	(hl),a			; reset EX byte of FCB
6590:47543+10	6752  D1      		pop	de
6591:47553+10	6753  E1      		pop	hl
6592:47563+6	6754  23      		inc	hl
6593:47569+7	6755  71      		ld	(hl),c
6594:47576+6	6756  23      		inc	hl
6595:47582+7	6757  70      		ld	(hl),b			; pointer to FCB
6596:47589+6	6758  23      		inc	hl
6597:47595+7	6759  77      		ld	(hl),a			; no backup char
6598:47602+6	675A  23      		inc	hl
6599:47608+7	675B  72      		ld	(hl),d			; devicenumber
6600:47615+6	675C  23      		inc	hl
6601:47621+6	675D  23      		inc	hl
6602:47627+7	675E  77      		ld	(hl),a			; current bufferoffset = 0
6603:47634+17	675F  CD4B66  		call	A6636			; search file
6604:47651+11	6762  C5      		push	bc
6605:47662+11	6763  D5      		push	de
6606:47673+4	6764  7A      		ld	a,d
6607:47677+7	6765  02      		ld	(bc),a			; devicenumber
6608:47684+4	6766  59      		ld	e,c
6609:47688+4	6767  50      		ld	d,b
6610:47692+6	6768  13      		inc	de
6611:47698+17	6769  CD6F66  		call	A665A			; copy FILNAM to FCB
6612:47715+10	676C  D1      		pop	de
6613:47725+10	676D  C1      		pop	bc
6614:47735+4	676E  7B      		ld	a,e
6615:47739+7+5	676F  201C    		jr	nz,A6778		; file exists,
6616:47746+7	6771  E686    		and	086H			; file not exists and not binsav, random or output mode ?
6617:47753+10	6773  CA2773  		jp	z,A7312			; yep, error
6618:47763+11	6776  D5      	A6761:	push	de
6619:47774+11	6777  C5      		push	bc
6620:47785+4	6778  59      		ld	e,c
6621:47789+4	6779  50      		ld	d,b
6622:47793+17	677A  CD1D46  		call	A461D			; create file
6623:47810+4	677D  A7      		and	a
6624:47814+10	677E  C2C071  		jp	nz,A71AB		; failed, error
6625:47824+10	6781  E1      		pop	hl
6626:47834+17	6782  CD1368  		call	A67FE			; setup FCB fields
6627:47851+10	6785  D1      		pop	de
6628:47861+16	6786  2A64F8  		ld	hl,(PTRFIL)
6629:47877+7	6789  73      		ld	(hl),e			; filemode, I/O channel open
6630:47884+10	678A  F1      	A6775:	pop	af
6631:47894+10	678B  E1      		pop	hl
6632:47904+10	678C  C9      		ret
6633:				;
6634:47914+7	678D  FE08    	A6778:	cp	008H
6635:47921+7+5	678F  2845    		jr	z,A67C1			; append mode,
6636:47928+7	6791  FE02    		cp	002H
6637:47935+7+5	6793  28E1    		jr	z,A6761			; output mode, create file (overwrites!)
6638:47942+7	6795  FE80    		cp	080H
6639:47949+7+5	6797  28DD    		jr	z,A6761			; binsav mode, create file (overwrites!)
6640:47956+11	6799  D5      		push	de
6641:47967+11	679A  C5      		push	bc
6642:47978+4	679B  59      		ld	e,c
6643:47982+4	679C  50      		ld	d,b
6644:47986+17	679D  CD6244  		call	A4462			; open fcb
6645:48003+10	67A0  E1      		pop	hl
6646:48013+17	67A1  CD1368  		call	A67FE			; setup FCB fields
6647:48030+10	67A4  D1      		pop	de
6648:48040+16	67A5  2A64F8  		ld	hl,(PTRFIL)
6649:48056+7	67A8  73      		ld	(hl),e			; filemode, I/O channel open
6650:48063+4	67A9  7B      		ld	a,e
6651:48067+7	67AA  FE04    		cp	004H			; random mode ?
6652:48074+7+5	67AC  28DC    		jr	z,A6775			; yep, quit
6653:48081+11	67AE  E5      		push	hl
6654:48092+10	67AF  21AEFC  		ld	hl,FLBMEM
6655:48102+4	67B2  AF      		xor	a
6656:48106+7	67B3  BE      		cp	(hl)
6657:48113+7	67B4  77      		ld	(hl),a
6658:48120+10	67B5  E1      		pop	hl
6659:48130+7+5	67B6  20D2    		jr	nz,A6775		; yep, quit
6660:48137+10	67B8  010600  		ld	bc,00006H
6661:48147+11	67BB  09      		add	hl,bc
6662:48158+11	67BC  E5      		push	hl
6663:48169+10	67BD  36FF    		ld	(hl),0FFH		; position 255, so next get char fills buffer
6664:48179+16	67BF  2A64F8  		ld	hl,(PTRFIL)
6665:48195+17	67C2  CD3F68  		call	A682A			; get char from I/O channel
6666:48212+10	67C5  E1      		pop	hl
6667:48222+6	67C6  2B      		dec	hl
6668:48228+6	67C7  2B      		dec	hl
6669:48234+6	67C8  2B      		dec	hl
6670:48240+7	67C9  77      		ld	(hl),a
6671:48247+7	67CA  FEFF    		cp	0FFH
6672:48254+7+5	67CC  20BC    		jr	nz,A6775		; yep, quit
6673:48261+6	67CE  23      		inc	hl
6674:48267+6	67CF  23      		inc	hl
6675:48273+6	67D0  23      		inc	hl
6676:48279+6	67D1  23      		inc	hl
6677:48285+10	67D2  3680    		ld	(hl),080H
6678:48295+12	67D4  18B4    	A67BF:	jr	A6775			; quit
6679:				;
6680:48307+11	67D6  C5      	A67C1:	push	bc
6681:48318+4	67D7  59      		ld	e,c
6682:48322+4	67D8  50      		ld	d,b
6683:48326+17	67D9  CD6244  		call	A4462			; open fcb
6684:48343+10	67DC  E1      		pop	hl
6685:48353+11	67DD  E5      		push	hl
6686:48364+17	67DE  CD1368  		call	A67FE			; setup FCB fields
6687:48381+16	67E1  2A64F8  		ld	hl,(PTRFIL)
6688:48397+10	67E4  3601    		ld	(hl),001H		; first in input mode
6689:48407+10	67E6  010600  		ld	bc,00006H
6690:48417+11	67E9  09      		add	hl,bc
6691:48428+10	67EA  36FF    		ld	(hl),0FFH
6692:48438+16	67EC  2A64F8  		ld	hl,(PTRFIL)
6693:48454+11	67EF  E5      	A67DA:	push	hl
6694:48465+17	67F0  CD3F68  		call	A682A			; get char from I/O channel
6695:48482+10	67F3  E1      		pop	hl
6696:48492+7+5	67F4  30F9    		jr	nc,A67DA		; not at the end of file, continue
6697:48499+10	67F6  3602    		ld	(hl),002H		; continue in output mode
6698:48509+10	67F8  E1      		pop	hl
6699:48519+10	67F9  012100  		ld	bc,00021H
6700:48529+11	67FC  09      		add	hl,bc			; to the Rx field
6701:48540+7	67FD  0E04    		ld	c,004H
6702:48547+11	67FF  E5      		push	hl
6703:48558+4	6800  37      		scf
6704:48562+7	6801  7E      	A67EC:	ld	a,(hl)
6705:48569+4	6802  98      		sbc	a,b
6706:48573+7	6803  77      		ld	(hl),a
6707:48580+6	6804  23      		inc	hl
6708:48586+4	6805  0D      		dec	c
6709:48590+7+5	6806  20F9    		jr	nz,A67EC		; decrease by 1
6710:48597+10	6808  E1      		pop	hl
6711:48607+4	6809  0C      		inc	c
6712:48611+7+5	680A  3002    		jr	nc,A67F9		; Make Rx a multiply of 256
6713:48618+7	680C  0E04    		ld	c,004H			; Rx = 0
6714:48625+17	680E  CD2868  	A67F9:	call	A6813
6715:48642+12	6811  18C1    		jr	A67BF			; quit
6716:				;
6717:48654+10	6813  010C00  	A67FE:	ld	bc,0000CH
6718:48664+11	6816  09      		add	hl,bc
6719:48675+7	6817  70      		ld	(hl),b			; clear EX byte
6720:48682+6	6818  23      		inc	hl
6721:48688+7	6819  70      		ld	(hl),b			; clear S1 byte
6722:48695+6	681A  23      		inc	hl
6723:48701+20	681B  ED4B3DF3		ld	bc,(YF33D)
6724:48721+7	681F  71      		ld	(hl),c
6725:48728+6	6820  23      		inc	hl
6726:48734+7	6821  70      		ld	(hl),b			; user recordsize = recordsize
6727:48741+10	6822  011100  		ld	bc,00011H
6728:48751+11	6825  09      		add	hl,bc
6729:48762+7	6826  0E05    		ld	c,005H
6730:48769+7	6828  70      	A6813:	ld	(hl),b
6731:48776+6	6829  23      		inc	hl
6732:48782+4	682A  0D      		dec	c
6733:48786+7+5	682B  20FB    		jr	nz,A6813		; clear CR byte and Rx bytes
6734:48793+10	682D  C9      		ret
6735:				;
6736:				;
6737:48803+14	682E  DD218BF3	A6819:	ld	ix,RETRTN
6738:48817+14	6832  FD210006		ld	iy,00600H
6739:48831+17	6836  CD7866  		call	A6663			; take control from caller
6740:48848+17	6839  CD3F68  		call	A682A			; get char from I/O channel
6741:48865+10	683C  C3B566  		jp	A66A0			; quit
6742:				;
6743:48875+11	683F  E5      	A682A:	push	hl
6744:48886+7	6840  7E      		ld	a,(hl)
6745:48893+7	6841  FE01    		cp	001H			; input mode ?
6746:48900+10	6843  C2AE71  		jp	nz,A7199		; nope, error
6747:48910+4	6846  5D      		ld	e,l
6748:48914+4	6847  54      		ld	d,h
6749:48918+6	6848  23      		inc	hl
6750:48924+6	6849  23      		inc	hl
6751:48930+6	684A  23      		inc	hl
6752:48936+7	684B  7E      		ld	a,(hl)
6753:48943+4	684C  A7      		and	a			; backup char ?
6754:48947+7+5	684D  202C    		jr	nz,A6866		; yep, use that
6755:48954+6	684F  23      		inc	hl
6756:48960+6	6850  23      		inc	hl
6757:48966+6	6851  23      		inc	hl
6758:48972+11	6852  34      		inc	(hl)			; update counter
6759:48983+7	6853  7E      		ld	a,(hl)
6760:48990+6	6854  23      		inc	hl
6761:48996+6	6855  23      		inc	hl
6762:49002+6	6856  23      		inc	hl			; to the buffer
6763:49008+7+5	6857  201D    		jr	nz,A6861		; still characters left, use them
6764:49015+11	6859  E5      		push	hl
6765:49026+16	685A  223DF2  		ld	(YF23D),hl		; transferadres is I/O channel buffer
6766:49042+4	685D  EB      		ex	de,hl
6767:49046+6	685E  23      		inc	hl
6768:49052+7	685F  5E      		ld	e,(hl)
6769:49059+6	6860  23      		inc	hl
6770:49065+7	6861  56      		ld	d,(hl)			; pointer to FCB
6771:49072+10	6862  210001  		ld	hl,256
6772:49082+17	6865  CDB247  		call	A47B2			; random block read
6773:49099+4	6868  5D      		ld	e,l
6774:49103+4	6869  54      		ld	d,h
6775:49107+4	686A  25      		dec	h
6776:49111+4	686B  7D      		ld	a,l
6777:49115+4	686C  B4      		or	h			; have read 256 records ?
6778:49119+10	686D  E1      		pop	hl
6779:49129+7+5	686E  2806    		jr	z,A6861			; yep, then not at end of file
6780:49136+11	6870  E5      		push	hl
6781:49147+11	6871  19      		add	hl,de
6782:49158+10	6872  361A    		ld	(hl),01AH		; put a CTRL-Z at the end
6783:49168+10	6874  E1      		pop	hl
6784:49178+4	6875  AF      		xor	a
6785:49182+4	6876  4F      	A6861:	ld	c,a
6786:49186+7	6877  0600    		ld	b,000H
6787:49193+11	6879  09      		add	hl,bc
6788:49204+7	687A  7E      		ld	a,(hl)			; get char
6789:49211+4	687B  47      	A6866:	ld	b,a
6790:49215+7	687C  D61A    		sub	01AH
6791:49222+7	687E  D601    		sub	001H
6792:49229+4	6880  78      		ld	a,b
6793:49233+10	6881  E1      		pop	hl
6794:49243+6	6882  23      		inc	hl
6795:49249+6	6883  23      		inc	hl
6796:49255+6	6884  23      		inc	hl
6797:49261+10	6885  3600    		ld	(hl),0			; no backup char
6798:49271+5+6	6887  D0      		ret	nc			; no CTRL-Z, quit
6799:49276+7	6888  77      		ld	(hl),a			; CTRL-Z as backup char, so it is always read again
6800:49283+10	6889  C9      		ret
6801:				;
6802:				;
6803:49293+4	688A  FB      	A6875:	ei
6804:49297+11	688B  E5      		push	hl
6805:49308+13	688C  3A48F3  		ld	a,(YF348)
6806:49321+4	688F  87      		add	a,a
6807:49325+10	6890  210800  		ld	hl,00008H
6808:49335+7+5	6893  3002    		jr	nc,A6882
6809:49342+7	6895  2E10    		ld	l,010H
6810:49349+11	6897  39      	A6882:	add	hl,sp
6811:49360+10	6898  3641    		ld	(hl),LOW M.6E41
6812:49370+6	689A  23      		inc	hl
6813:49376+10	689B  366E    		ld	(hl),HIGH M.6E41
6814:49386+10	689D  E1      		pop	hl
6815:49396+6	689E  23      		inc	hl
6816:49402+6	689F  23      		inc	hl
6817:49408+6	68A0  23      		inc	hl
6818:49414+7	68A1  71      		ld	(hl),c
6819:49421+10	68A2  C9      		ret
6820:				;
6821:				;
6822:49431+14	68A3  DD218BF3	A688E:	ld	ix,RETRTN
6823:49445+14	68A7  FD210008		ld	iy,00800H
6824:49459+17	68AB  CD7866  		call	A6663			; take control from caller
6825:49476+7	68AE  7E      		ld	a,(hl)
6826:49483+7	68AF  FE02    		cp	002H			; output mode ?
6827:49490+10	68B1  C2AE71  		jp	nz,A7199		; nope, error
6828:49500+10	68B4  F1      		pop	af
6829:49510+11	68B5  F5      		push	af
6830:49521+17	68B6  CDBC68  		call	A68A7			; write char to I/O channel
6831:49538+10	68B9  C3B466  		jp	A669F			; quit
6832:				;
6833:49548+11	68BC  E5      	A68A7:	push	hl
6834:49559+10	68BD  010600  		ld	bc,00006H
6835:49569+11	68C0  09      		add	hl,bc
6836:49580+7	68C1  4E      		ld	c,(hl)			; position
6837:49587+11	68C2  34      		inc	(hl)			; update
6838:49598+6	68C3  23      		inc	hl
6839:49604+6	68C4  23      		inc	hl
6840:49610+6	68C5  23      		inc	hl			; to buffer
6841:49616+11	68C6  09      		add	hl,bc
6842:49627+7	68C7  77      		ld	(hl),a			; put char in buffer
6843:49634+10	68C8  E1      		pop	hl
6844:49644+5+6	68C9  C0      		ret	nz			; buffer not full, quit
6845:49649+11	68CA  E5      	A68B5:	push	hl
6846:49660+6	68CB  23      		inc	hl
6847:49666+7	68CC  5E      		ld	e,(hl)
6848:49673+6	68CD  23      		inc	hl
6849:49679+7	68CE  56      		ld	d,(hl)			; pointer to FCB
6850:49686+10	68CF  010400  		ld	bc,00004H
6851:49696+11	68D2  09      		add	hl,bc
6852:49707+7	68D3  7E      		ld	a,(hl)			; position
6853:49714+6	68D4  23      		inc	hl
6854:49720+6	68D5  23      		inc	hl
6855:49726+6	68D6  23      		inc	hl
6856:49732+16	68D7  223DF2  		ld	(YF23D),hl		; transferadres
6857:49748+4	68DA  A7      		and	a
6858:49752+4	68DB  6F      		ld	l,a
6859:49756+4	68DC  60      		ld	h,b
6860:49760+7+5	68DD  2001    		jr	nz,A68CB		; not a complete buffer, only the used part
6861:49767+4	68DF  24      		inc	h			; 256
6862:49771+17	68E0  CDA471  	A68CB:	call	A718F			; random block write
6863:49788+10	68E3  E1      		pop	hl
6864:49798+10	68E4  C9      		ret
6865:				
6866:				;	  Subroutine  (H.NTFL)
6867:				;	     Inputs  
6868:				;	     Outputs ________________________ 
6869:				
6870:49808+14	68E5  DD218BF3	A68D0:	ld	ix,RETRTN
6871:49822+14	68E9  FD210004		ld	iy,00400H
6872:49836+17	68ED  CD7866  		call	A6663			; take control from caller
6873:49853+10	68F0  E1      		pop	hl
6874:49863+7	68F1  7E      		ld	a,(hl)
6875:49870+7	68F2  D602    		sub	002H
6876:49877+7+5	68F4  2013    		jr	nz,A68F4
6877:49884+11	68F6  E5      		push	hl
6878:49895+10	68F7  21AEFC  		ld	hl,FLBMEM
6879:49905+7	68FA  BE      		cp	(hl)
6880:49912+7	68FB  77      		ld	(hl),a
6881:49919+10	68FC  E1      		pop	hl
6882:49929+7+5	68FD  200A    		jr	nz,A68F4
6883:49936+10	68FF  3604    		ld	(hl),004H
6884:49946+7	6901  3E1A    		ld	a,01AH			; CTRL-Z
6885:49953+17	6903  CDBC68  		call	A68A7			; write char to I/O channel
6886:49970+10+7	6906  C4CA68  		call	nz,A68B5		; buffer not empty, write remaining I/O channel buffer
6887:49980+11	6909  E5      	A68F4:	push	hl
6888:49991+6	690A  23      		inc	hl
6889:49997+7	690B  5E      		ld	e,(hl)
6890:50004+6	690C  23      		inc	hl
6891:50010+7	690D  56      		ld	d,(hl)			; pointer to FCB
6892:50017+17	690E  CD6F45  		call	A456F			; close fcb
6893:50034+10	6911  E1      		pop	hl
6894:50044+11	6912  E5      		push	hl
6895:50055+10	6913  110700  		ld	de,00007H
6896:50065+11	6916  19      		add	hl,de
6897:50076+7	6917  72      		ld	(hl),d
6898:50083+4	6918  6A      		ld	l,d
6899:50087+4	6919  62      		ld	h,d
6900:50091+16	691A  2264F8  		ld	(PTRFIL),hl
6901:50107+10	691D  E1      		pop	hl
6902:50117+11	691E  34      		inc	(hl)
6903:50128+11	691F  35      		dec	(hl)
6904:50139+7	6920  72      		ld	(hl),d
6905:50146+10	6921  E1      		pop	hl
6906:50156+10	6922  C9      		ret
6907:				
6908:				;	  Subroutine Binary Save  (H.BINS)
6909:				;	     Inputs  
6910:				;	     Outputs ________________________ 
6911:				
6912:50166+17	6923  CD9573  	A690E:	call	A7380
6913:50183+11	6926  E5      		push	hl
6914:50194+14	6927  DD21F754		ld	ix,PTOLN
6915:50208+17	692B  CD3373  		call	A731E
6916:50225+7	692E  3EFF    		ld	a,0FFH
6917:50232+17	6930  CDDC69  		call	A69C7
6918:50249+16	6933  2A76F6  		ld	hl,(TXTTAB)
6919:50265+16	6936  223DF2  		ld	(YF23D),hl		; transferadres
6920:50281+4	6939  EB      		ex	de,hl
6921:50285+16	693A  2AC2F6  		ld	hl,(VARTAB)
6922:50301+4	693D  A7      		and	a
6923:50305+15	693E  ED52    		sbc	hl,de
6924:50320+17	6940  CDA071  		call	A718B
6925:50337+13	6943  327CF8  		ld	(NLONLY),a
6926:50350+10	6946  E1      		pop	hl
6927:50360+14	6947  DD21246B		ld	ix,CLOCHN
6928:50374+10	694B  C33373  		jp	A731E
6929:				
6930:				;	  Subroutine Binary Load  (H.BINL)
6931:				;	     Inputs  
6932:				;	     Outputs ________________________ 
6933:				
6934:50384+14	694E  DD219A73	A6939:	ld	ix,QUITLD
6935:50398+14	6952  FD210002		ld	iy,00200H
6936:50412+17	6956  CD7866  		call	A6663			; take control from caller
6937:50429+10	6959  F1      		pop	af
6938:50439+10	695A  CAAE71  		jp	z,A7199
6939:50449+14	695D  DD211C6C		ld	ix,ACLOSE
6940:50463+17	6961  CD3373  		call	A731E
6941:50480+16	6964  2A53F3  		ld	hl,(YF353)
6942:50496+11	6967  E5      		push	hl
6943:50507+17	6968  CD1368  		call	A67FE
6944:50524+10	696B  E1      		pop	hl
6945:50534+11	696C  E5      		push	hl
6946:50545+10	696D  011300  		ld	bc,00013H
6947:50555+11	6970  09      		add	hl,bc
6948:50566+7	6971  7E      		ld	a,(hl)
6949:50573+4	6972  A7      		and	a
6950:50577+10	6973  C21273  		jp	nz,A72FD
6951:50587+6	6976  2B      		dec	hl
6952:50593+7	6977  B6      		or	(hl)
6953:50600+10	6978  C21273  		jp	nz,A72FD
6954:50610+6	697B  2B      		dec	hl
6955:50616+7	697C  56      		ld	d,(hl)
6956:50623+6	697D  2B      		dec	hl
6957:50629+7	697E  5E      		ld	e,(hl)
6958:50636+16	697F  2A76F6  		ld	hl,(TXTTAB)
6959:50652+11	6982  19      		add	hl,de
6960:50663+10	6983  DA1273  		jp	c,A72FD
6961:50673+10	6986  019300  		ld	bc,00093H
6962:50683+11	6989  09      		add	hl,bc
6963:50694+10	698A  DA1273  		jp	c,A72FD
6964:50704+15	698D  ED72    		sbc	hl,sp
6965:50719+10	698F  D21273  		jp	nc,A72FD
6966:50729+4	6992  EB      		ex	de,hl
6967:50733+19	6993  E3      		ex	(sp),hl
6968:50752+4	6994  EB      		ex	de,hl
6969:50756+17	6995  CDE569  		call	A69D0
6970:50773+16	6998  2A76F6  		ld	hl,(TXTTAB)
6971:50789+16	699B  223DF2  		ld	(YF23D),hl		; transferadress
6972:50805+10	699E  E1      		pop	hl
6973:50815+6	699F  2B      		dec	hl
6974:50821+17	69A0  CDB247  		call	A47B2			; random block read
6975:50838+20	69A3  ED5B76F6		ld	de,(TXTTAB)
6976:50858+11	69A7  19      		add	hl,de
6977:50869+16	69A8  22C2F6  		ld	(VARTAB),hl
6978:50885+14	69AB  DD215342		ld	ix,MKPTRS
6979:50899+17	69AF  CD3373  		call	A731E
6980:50916+13	69B2  3A66F8  		ld	a,(FILNAM+0)
6981:50929+4	69B5  A7      		and	a
6982:50933+5+6	69B6  C0      		ret	nz
6983:50938+13	69B7  327CF8  		ld	(NLONLY),a
6984:50951+10	69BA  21CE69  		ld	hl,T69B9
6985:50961+10	69BD  1168F5  		ld	de,BUF+10
6986:50971+10	69C0  010500  		ld	bc,00005H
6987:50981+11	69C3  D5      		push	de
6988:50992+16+5	69C4  EDB0    		ldir
6989:51008+10	69C6  E1      		pop	hl
6990:51018+14	69C7  DD210146		ld	ix,EXECLP
6991:51032+10	69CB  C33373  		jp	A731E
6992:				;
6993:				;
6994:     -	69CE  3A920000	T69B9:	defb	":",092H,000H,000H,000H
	      00
6995:				
6996:51042+11	69D3  E5      	A69BE:	push	hl
6997:51053+4	69D4  7D      		ld	a,l
6998:51057+17	69D5  CDE069  		call	A69CB
6999:51074+10	69D8  E1      		pop	hl
7000:51084+4	69D9  7C      		ld	a,h
7001:51088+12	69DA  1804    		jr	A69CB
7002:				;
7003:51100+20	69DC  ED5B53F3	A69C7:	ld	de,(YF353)
7004:51120+10	69E0  01BE47  	A69CB:	ld	bc,A47BE		; random block write
7005:51130+12	69E3  1803    		jr	A69D3
7006:				;
7007:51142+10	69E5  01B247  	A69D0:	ld	bc,A47B2		; random block read
7008:51152+11	69E8  F5      	A69D3:	push	af
7009:51163+10	69E9  210100  		ld	hl,00001H
7010:51173+11	69EC  39      		add	hl,sp
7011:51184+16	69ED  223DF2  		ld	(YF23D),hl		; transferadres
7012:51200+11	69F0  D5      		push	de
7013:51211+17	69F1  CDF769  		call	A69E2
7014:51228+10	69F4  D1      		pop	de
7015:51238+10	69F5  F1      		pop	af
7016:51248+10	69F6  C9      		ret
7017:				;
7018:51258+10	69F7  210100  	A69E2:	ld	hl,00001H
7019:51268+11	69FA  C5      		push	bc
7020:51279+10	69FB  C9      		ret
7021:				;
7022:				;
7023:51289+11	69FC  D5      	A69E7:	push	de
7024:51300+17	69FD  CD7F6B  		call	A6B6A
7025:51317+20	6A00  ED53BFFC		ld	(SAVENT),de
7026:51337+11	6A04  D5      		push	de
7027:51348+17	6A05  CD7F6B  		call	A6B6A
7028:51365+20	6A08  ED537DF8		ld	(SAVEND),de
7029:51385+19	6A0C  E3      		ex	(sp),hl
7030:51404+4	6A0D  EB      		ex	de,hl
7031:51408+11	6A0E  E7      		rst	020H
7032:51419+10	6A0F  DA2A73  		jp	c,A7315
7033:51429+4	6A12  EB      		ex	de,hl
7034:51433+19	6A13  E3      		ex	(sp),hl
7035:51452+17	6A14  CDEF72  		call	A72DA
7036:51469+4	6A17  37      		scf
7037:51473+7+5	6A18  2816    		jr	z,A6A1B
7038:51480+17	6A1A  CDE572  		call	A72D0
7039:     -	6A1D  2C      		defb	","
7040:51497+7	6A1E  FE53    		cp	"S"
7041:51504+7+5	6A20  2006    		jr	nz,A6A13
7042:51511+17	6A22  CDF072  		call	A72DB
7043:51528+4	6A25  A7      		and	a
7044:51532+12	6A26  1808    		jr	A6A1B
7045:				;
7046:51544+17	6A28  CD836B  	A6A13:	call	A6B6E
7047:51561+20	6A2B  ED53BFFC		ld	(SAVENT),de
7048:51581+4	6A2F  37      		scf
7049:51585+10	6A30  C1      	A6A1B:	pop	bc
7050:51595+7+5	6A31  3005    		jr	nc,A6A23
7051:51602+4	6A33  04      		inc	b
7052:51606+4	6A34  05      		dec	b
7053:51610+10	6A35  F22A73  		jp	p,A7315
7054:51620+10	6A38  D1      	A6A23:	pop	de
7055:51630+11	6A39  E5      		push	hl
7056:51641+11	6A3A  C5      		push	bc
7057:51652+11	6A3B  F5      		push	af
7058:51663+4	6A3C  AF      		xor	a
7059:51667+7	6A3D  1E02    		ld	e,002H
7060:51674+14	6A3F  DD21FA6A		ld	ix,OPNCHN
7061:51688+17	6A43  CD3373  		call	A731E
7062:51705+7	6A46  3EFE    		ld	a,0FEH
7063:51712+17	6A48  CDDC69  		call	A69C7
7064:51729+10	6A4B  F1      		pop	af
7065:51739+10	6A4C  E1      		pop	hl
7066:51749+11	6A4D  E5      		push	hl
7067:51760+11	6A4E  F5      		push	af
7068:51771+17	6A4F  CDD369  		call	A69BE
7069:51788+16	6A52  2A7DF8  		ld	hl,(SAVEND)
7070:51804+17	6A55  CDD369  		call	A69BE
7071:51821+16	6A58  2ABFFC  		ld	hl,(SAVENT)
7072:51837+17	6A5B  CDD369  		call	A69BE
7073:51854+10	6A5E  F1      		pop	af
7074:51864+10	6A5F  C1      		pop	bc
7075:51874+11	6A60  F5      		push	af
7076:51885+20	6A61  ED433DF2		ld	(YF23D),bc		; transferadres
7077:51905+16	6A65  2A7DF8  		ld	hl,(SAVEND)
7078:51921+4	6A68  A7      		and	a
7079:51925+15	6A69  ED42    		sbc	hl,bc
7080:51940+6	6A6B  23      		inc	hl
7081:51946+10	6A6C  F1      		pop	af
7082:51956+7+5	6A6D  3013    		jr	nc,A6A6D
7083:51963+17	6A6F  CDA071  		call	A718B
7084:51980+7	6A72  3EFF    	A6A5D:	ld	a,0FFH
7085:51987+13	6A74  32AEFC  		ld	(FLBMEM),a
7086:52000+4	6A77  AF      		xor	a
7087:52004+14	6A78  DD21246B		ld	ix,CLOCHN
7088:52018+17	6A7C  CD3373  		call	A731E
7089:52035+10	6A7F  C30D6F  		jp	A6EF8
7090:				;
7091:52045+17	6A82  CD7A71  	A6A6D:	call	A7165
7092:52062+11	6A85  E5      	A6A70:	push	hl
7093:52073+20	6A86  ED5BBFFC		ld	de,(SAVENT)
7094:52093+11	6A8A  E7      		rst	020H
7095:52104+11	6A8B  F5      		push	af
7096:52115+4	6A8C  4D      		ld	c,l
7097:52119+4	6A8D  44      		ld	b,h
7098:52123+16	6A8E  2A7DF8  		ld	hl,(SAVEND)
7099:52139+11	6A91  E5      		push	hl
7100:52150+11	6A92  09      		add	hl,bc
7101:52161+16	6A93  227DF8  		ld	(SAVEND),hl
7102:52177+10	6A96  E1      		pop	hl
7103:52187+20	6A97  ED5B3DF2		ld	de,(YF23D)		; transferadres
7104:52207+17	6A9B  CD5900  		call	LDIRMV
7105:52224+10	6A9E  F1      		pop	af
7106:52234+7+5	6A9F  3012    		jr	nc,A6A9E
7107:52241+10	6AA1  E1      		pop	hl
7108:52251+11	6AA2  E5      		push	hl
7109:52262+17	6AA3  CDA071  		call	A718B
7110:52279+16	6AA6  2ABFFC  		ld	hl,(SAVENT)
7111:52295+10	6AA9  D1      		pop	de
7112:52305+4	6AAA  A7      		and	a
7113:52309+15	6AAB  ED52    		sbc	hl,de
7114:52324+16	6AAD  22BFFC  		ld	(SAVENT),hl
7115:52340+4	6AB0  EB      		ex	de,hl
7116:52344+12	6AB1  18D2    		jr	A6A70
7117:				;
7118:52356+10	6AB3  E1      	A6A9E:	pop	hl
7119:52366+16	6AB4  2ABFFC  		ld	hl,(SAVENT)
7120:52382+17	6AB7  CDA071  		call	A718B
7121:52399+12	6ABA  18B6    		jr	A6A5D
7122:				;
7123:				;
7124:52411+11	6ABC  D5      	A6AA7:	push	de
7125:52422+4	6ABD  AF      		xor	a
7126:52426+13	6ABE  32BEFC  		ld	(RUNBNF),a
7127:52439+4	6AC1  4F      		ld	c,a
7128:52443+4	6AC2  47      		ld	b,a
7129:52447+17	6AC3  CDEF72  		call	A72DA
7130:52464+7+5	6AC6  281D    		jr	z,A6AD0
7131:52471+17	6AC8  CDE572  		call	A72D0
7132:     -	6ACB  2C      		defb	","
7133:52488+7	6ACC  FE52    		cp	"R"
7134:52495+7+5	6ACE  2804    		jr	z,A6ABF
7135:52502+7	6AD0  FE53    		cp	"S"
7136:52509+7+5	6AD2  200C    		jr	nz,A6ACB
7137:52516+13	6AD4  32BEFC  	A6ABF:	ld	(RUNBNF),a
7138:52529+17	6AD7  CDF072  		call	A72DB
7139:52546+7+5	6ADA  2809    		jr	z,A6AD0
7140:52553+17	6ADC  CDE572  		call	A72D0
7141:     -	6ADF  2C      		defb	","
7142:52570+17	6AE0  CD836B  	A6ACB:	call	A6B6E
7143:52587+4	6AE3  42      		ld	b,d
7144:52591+4	6AE4  4B      		ld	c,e
7145:52595+10	6AE5  D1      	A6AD0:	pop	de
7146:52605+11	6AE6  E5      		push	hl
7147:52616+11	6AE7  C5      		push	bc
7148:52627+7	6AE8  3EFF    		ld	a,0FFH
7149:52634+13	6AEA  32AEFC  		ld	(FLBMEM),a
7150:52647+4	6AED  AF      		xor	a
7151:52651+7	6AEE  1E01    		ld	e,001H
7152:52658+14	6AF0  DD21FA6A		ld	ix,OPNCHN
7153:52672+17	6AF4  CD3373  		call	A731E
7154:52689+20	6AF7  ED5B53F3		ld	de,(YF353)
7155:52709+17	6AFB  CDE569  		call	A69D0
7156:52726+7	6AFE  FEFE    		cp	0FEH
7157:52733+10	6B00  C2AE71  		jp	nz,A7199
7158:52743+10	6B03  C1      		pop	bc
7159:52753+17	6B04  CD716B  		call	A6B5C
7160:52770+11	6B07  E5      		push	hl
7161:52781+17	6B08  CD716B  		call	A6B5C
7162:52798+11	6B0B  E5      		push	hl
7163:52809+17	6B0C  CD716B  		call	A6B5C
7164:52826+16	6B0F  22BFFC  		ld	(SAVENT),hl
7165:52842+10	6B12  E1      		pop	hl
7166:52852+10	6B13  C1      		pop	bc
7167:52862+4	6B14  A7      		and	a
7168:52866+15	6B15  ED42    		sbc	hl,bc
7169:52881+6	6B17  23      		inc	hl
7170:52887+20	6B18  ED433DF2		ld	(YF23D),bc		; transferadres
7171:52907+13	6B1C  3ABEFC  		ld	a,(RUNBNF)
7172:52920+7	6B1F  FE53    		cp	"S"
7173:52927+7+5	6B21  280C    		jr	z,A6B1A
7174:52934+17	6B23  CDB247  		call	A47B2			; random block read
7175:52951+14	6B26  DD21FF4A	A6B11:	ld	ix,SCROUT
7176:52965+17	6B2A  CD3373  		call	A731E
7177:52982+10	6B2D  E1      		pop	hl
7178:52992+10	6B2E  C9      		ret
7179:				;
7180:53002+17	6B2F  CD7A71  	A6B1A:	call	A7165
7181:53019+11	6B32  E5      	A6B1D:	push	hl
7182:53030+20	6B33  ED5BBFFC		ld	de,(SAVENT)
7183:53050+11	6B37  E7      		rst	020H
7184:53061+11	6B38  F5      		push	af
7185:53072+20	6B39  ED5B53F3		ld	de,(YF353)
7186:53092+17	6B3D  CDB247  		call	A47B2			; random block read
7187:53109+10	6B40  F1      		pop	af
7188:53119+10	6B41  C1      		pop	bc
7189:53129+11	6B42  C5      		push	bc
7190:53140+11	6B43  F5      		push	af
7191:53151+16	6B44  2A7DF8  		ld	hl,(SAVEND)
7192:53167+11	6B47  E5      		push	hl
7193:53178+11	6B48  09      		add	hl,bc
7194:53189+16	6B49  227DF8  		ld	(SAVEND),hl
7195:53205+10	6B4C  D1      		pop	de
7196:53215+16	6B4D  2A3DF2  		ld	hl,(YF23D)		; transferadres
7197:53231+10	6B50  F1      		pop	af
7198:53241+7+5	6B51  3010    		jr	nc,A6B4E
7199:53248+17	6B53  CD5C00  		call	LDIRVM
7200:53265+16	6B56  2ABFFC  		ld	hl,(SAVENT)
7201:53281+10	6B59  D1      		pop	de
7202:53291+4	6B5A  A7      		and	a
7203:53295+15	6B5B  ED52    		sbc	hl,de
7204:53310+16	6B5D  22BFFC  		ld	(SAVENT),hl
7205:53326+4	6B60  EB      		ex	de,hl
7206:53330+12	6B61  18CF    		jr	A6B1D
7207:				;
7208:53342+10	6B63  C1      	A6B4E:	pop	bc
7209:53352+20	6B64  ED4BBFFC		ld	bc,(SAVENT)
7210:53372+17	6B68  CD5C00  		call	LDIRVM
7211:53389+4	6B6B  AF      		xor	a
7212:53393+13	6B6C  32BEFC  		ld	(RUNBNF),a
7213:53406+12	6B6F  18B5    		jr	A6B11
7214:				;
7215:53418+11	6B71  C5      	A6B5C:	push	bc
7216:53429+17	6B72  CDE569  		call	A69D0
7217:53446+11	6B75  F5      		push	af
7218:53457+17	6B76  CDE569  		call	A69D0
7219:53474+4	6B79  67      		ld	h,a
7220:53478+10	6B7A  F1      		pop	af
7221:53488+4	6B7B  6F      		ld	l,a
7222:53492+10	6B7C  C1      		pop	bc
7223:53502+11	6B7D  09      		add	hl,bc
7224:53513+10	6B7E  C9      		ret
7225:				;
7226:53523+17	6B7F  CDE572  	A6B6A:	call	A72D0
7227:     -	6B82  2C      		defb	","
7228:53540+14	6B83  DD210B6F	A6B6E:	ld	ix,BADRES
7229:53554+10	6B87  C33373  		jp	A731E
7230:				;
7231:				;
7232:53564+17	6B8A  CD9573  	A6B75:	call	A7380
7233:53581+17	6B8D  CDF072  		call	A72DB
7234:53598+17	6B90  CDE572  		call	A72D0
7235:     -	6B93  28      		defb	"("
7236:53615+17	6B94  CDDA6B  		call	A6BC5
7237:53632+17	6B97  CDE572  		call	A72D0
7238:     -	6B9A  29      		defb	")"
7239:53649+11	6B9B  E5      		push	hl
7240:53660+10	6B9C  21D63F  		ld	hl,03FD6H
7241:53670+16	6B9F  22F8F7  		ld	(DAC+2),hl
7242:53686+10	6BA2  E1      		pop	hl
7243:53696+7	6BA3  3E03    		ld	a,003H
7244:53703+13	6BA5  3263F6  		ld	(VALTYP),a
7245:53716+4	6BA8  A7      		and	a
7246:53720+12	6BA9  180B    		jr	A6BA1
7247:				;
7248:				;
7249:53732+17	6BAB  CD9573  	A6B96:	call	A7380
7250:53749+17	6BAE  CDDA6B  		call	A6BC5
7251:53766+17	6BB1  CDEF72  		call	A72DA
7252:53783+5+6	6BB4  C0      		ret	nz
7253:53788+4	6BB5  37      		scf
7254:53792+11	6BB6  F5      	A6BA1:	push	af
7255:53803+11	6BB7  E5      		push	hl
7256:53814+11	6BB8  D5      		push	de
7257:53825+4	6BB9  59      		ld	e,c
7258:53829+17	6BBA  CD5D50  		call	A505D
7259:53846+4	6BBD  3C      		inc	a
7260:53850+10	6BBE  CAB171  		jp	z,A719C
7261:53860+10	6BC1  D1      		pop	de
7262:53870+10	6BC2  E1      		pop	hl
7263:53880+10	6BC3  F1      		pop	af
7264:53890+11	6BC4  E5      		push	hl
7265:53901+7	6BC5  3EFF    		ld	a,0FFH
7266:53908+13	6BC7  3246F2  		ld	(YF246),a		; invalid dirsector buffer
7267:53921+19	6BCA  DD7E00  		ld	a,(ix+000H)		; driveid
7268:53940+7	6BCD  0601    		ld	b,001H
7269:53947+19	6BCF  DD4E01  		ld	c,(ix+001H)		; mediadescriptor
7270:53966+16	6BD2  2A51F3  		ld	hl,(YF351)		; temporary use dirsector buffer
7271:53982+17	6BD5  CD4401  		call	PHYDIO
7272:53999+10	6BD8  E1      		pop	hl
7273:54009+10	6BD9  C9      		ret
7274:				;
7275:54019+14	6BDA  DD211C52	A6BC5:	ld	ix,EVBYTE
7276:54033+17	6BDE  CD3373  		call	A731E
7277:54050+11	6BE1  D5      		push	de
7278:54061+17	6BE2  CDE572  		call	A72D0
7279:     -	6BE5  2C      		defb	","
7280:54078+14	6BE6  DD212F54		ld	ix,EVADR
7281:54092+17	6BEA  CD3373  		call	A731E
7282:54109+10	6BED  C1      		pop	bc
7283:54119+10	6BEE  C9      		ret
7284:				;
7285:				;
7286:54129+14	6BEF  DD218BF3	A6BDA:	ld	ix,RETRTN
7287:54143+14	6BF3  FD210004		ld	iy,00400H
7288:54157+17	6BF7  CD7866  		call	A6663			; take control from caller
7289:54174+7	6BFA  7E      		ld	a,(hl)
7290:54181+7	6BFB  FE04    		cp	004H
7291:54188+10	6BFD  C2AE71  		jp	nz,A7199
7292:54198+6	6C00  23      		inc	hl
7293:54204+7	6C01  5E      		ld	e,(hl)
7294:54211+6	6C02  23      		inc	hl
7295:54217+7	6C03  56      		ld	d,(hl)
7296:54224+10	6C04  010700  		ld	bc,00007H
7297:54234+11	6C07  09      		add	hl,bc
7298:54245+19	6C08  E3      		ex	(sp),hl
7299:54264+17	6C09  CDEF72  		call	A72DA
7300:54281+7+5	6C0C  2830    		jr	z,A6C29
7301:54288+11	6C0E  D5      		push	de
7302:54299+17	6C0F  CDE572  		call	A72D0
7303:     -	6C12  2C      		defb	","
7304:54316+14	6C13  DD21644C		ld	ix,EVEXPR
7305:54330+17	6C17  CD3373  		call	A731E
7306:54347+11	6C1A  E5      		push	hl
7307:54358+17	6C1B  CD106E  		call	A6DFB
7308:54375+4	6C1E  79      		ld	a,c
7309:54379+4	6C1F  B0      		or	b
7310:54383+4	6C20  B5      		or	l
7311:54387+4	6C21  B4      		or	h
7312:54391+10	6C22  CA2A73  		jp	z,A7315
7313:54401+4	6C25  79      		ld	a,c
7314:54405+4	6C26  B0      		or	b
7315:54409+6	6C27  0B      		dec	bc
7316:54415+7+5	6C28  2001    		jr	nz,A6C16
7317:54422+6	6C2A  2B      		dec	hl
7318:54428+4	6C2B  EB      	A6C16:	ex	de,hl
7319:54432+10	6C2C  E1      		pop	hl
7320:54442+19	6C2D  E3      		ex	(sp),hl
7321:54461+11	6C2E  E5      		push	hl
7322:54472+11	6C2F  D5      		push	de
7323:54483+10	6C30  112100  		ld	de,00021H
7324:54493+11	6C33  19      		add	hl,de
7325:54504+10	6C34  D1      		pop	de
7326:54514+7	6C35  71      		ld	(hl),c
7327:54521+6	6C36  23      		inc	hl
7328:54527+7	6C37  70      		ld	(hl),b
7329:54534+6	6C38  23      		inc	hl
7330:54540+7	6C39  73      		ld	(hl),e
7331:54547+6	6C3A  23      		inc	hl
7332:54553+7	6C3B  72      		ld	(hl),d
7333:54560+10	6C3C  D1      		pop	de
7334:54570+10	6C3D  E1      		pop	hl
7335:54580+19	6C3E  E3      	A6C29:	ex	(sp),hl
7336:54599+16	6C3F  223DF2  		ld	(YF23D),hl		; transferadres
7337:54615+10	6C42  E1      		pop	hl
7338:54625+10	6C43  F1      		pop	af
7339:54635+11	6C44  E5      		push	hl
7340:54646+4	6C45  A7      		and	a
7341:54650+10	6C46  211873  		ld	hl,A7303
7342:54660+10	6C49  01B247  		ld	bc,A47B2		; random block read
7343:54670+7+5	6C4C  2806    		jr	z,A6C3F
7344:54677+10	6C4E  21BD71  		ld	hl,A71A8
7345:54687+10	6C51  01BE47  		ld	bc,A47BE		; random block write
7346:54697+11	6C54  E5      	A6C3F:	push	hl
7347:54708+17	6C55  CDF769  		call	A69E2
7348:54725+4	6C58  A7      		and	a
7349:54729+5+6	6C59  C0      		ret	nz
7350:54734+10	6C5A  E1      		pop	hl
7351:54744+10	6C5B  C30D6F  		jp	A6EF8
7352:				;
7353:				;
7354:54754+17	6C5E  CD9573  	A6C49:	call	A7380
7355:54771+7	6C61  FE23    		cp	"#"
7356:54778+10+7	6C63  CCF072  		call	z,A72DB
7357:54788+14	6C66  DD211C52		ld	ix,EVBYTE
7358:54802+17	6C6A  CD3373  		call	A731E
7359:54819+10	6C6D  CA2D73  		jp	z,A7318
7360:54829+11	6C70  E5      		push	hl
7361:54840+14	6C71  DD216D6A		ld	ix,GTCHNP
7362:54854+17	6C75  CD3373  		call	A731E
7363:54871+4	6C78  5D      		ld	e,l
7364:54875+4	6C79  54      		ld	d,h
7365:54879+10	6C7A  CA1573  		jp	z,A7300
7366:54889+10	6C7D  DA2A73  		jp	c,A7315
7367:54899+7	6C80  7E      		ld	a,(hl)
7368:54906+7	6C81  FE04    		cp	004H
7369:54913+10	6C83  C2AE71  		jp	nz,A7199
7370:54923+6	6C86  23      		inc	hl
7371:54929+7	6C87  7E      		ld	a,(hl)
7372:54936+6	6C88  23      		inc	hl
7373:54942+7	6C89  66      		ld	h,(hl)
7374:54949+4	6C8A  6F      		ld	l,a
7375:54953+10	6C8B  010E00  		ld	bc,0000EH
7376:54963+11	6C8E  09      		add	hl,bc
7377:54974+7	6C8F  4E      		ld	c,(hl)
7378:54981+6	6C90  23      		inc	hl
7379:54987+7	6C91  46      		ld	b,(hl)
7380:54994+20	6C92  ED4368F5		ld	(BUF+10),bc
7381:55014+10	6C96  210000  		ld	hl,00000H
7382:55024+16	6C99  226AF5  		ld	(BUF+12),hl
7383:55040+10	6C9C  010900  		ld	bc,00009H
7384:55050+10	6C9F  E1      		pop	hl
7385:55060+4	6CA0  EB      	A6C8B:	ex	de,hl
7386:55064+11	6CA1  09      		add	hl,bc
7387:55075+4	6CA2  EB      		ex	de,hl
7388:55079+7	6CA3  7E      		ld	a,(hl)
7389:55086+7	6CA4  FE2C    		cp	","
7390:55093+5+6	6CA6  C0      		ret	nz
7391:55098+11	6CA7  D5      		push	de
7392:55109+14	6CA8  DD211B52		ld	ix,NEVBYT
7393:55123+17	6CAC  CD3373  		call	A731E
7394:55140+11	6CAF  F5      		push	af
7395:55151+17	6CB0  CDE572  		call	A72D0
7396:     -	6CB3  41      		defb	"A"
7397:55168+17	6CB4  CDE572  		call	A72D0
7398:     -	6CB7  53      		defb	"S"
7399:55185+14	6CB8  DD21A45E		ld	ix,GETVAR
7400:55199+17	6CBC  CD3373  		call	A731E
7401:55216+14	6CBF  DD219755		ld	ix,GETYPR
7402:55230+17	6CC3  CD3373  		call	A731E
7403:55247+10	6CC6  C20F73  		jp	nz,A72FA
7404:55257+10	6CC9  F1      		pop	af
7405:55267+19	6CCA  E3      		ex	(sp),hl
7406:55286+11	6CCB  D5      		push	de
7407:55297+11	6CCC  E5      		push	hl
7408:55308+16	6CCD  2A6AF5  		ld	hl,(BUF+12)
7409:55324+4	6CD0  4F      		ld	c,a
7410:55328+7	6CD1  0600    		ld	b,000H
7411:55335+11	6CD3  09      		add	hl,bc
7412:55346+16	6CD4  226AF5  		ld	(BUF+12),hl
7413:55362+4	6CD7  EB      		ex	de,hl
7414:55366+16	6CD8  2A68F5  		ld	hl,(BUF+10)
7415:55382+11	6CDB  E7      		rst	020H
7416:55393+10	6CDC  DA1B73  		jp	c,A7306
7417:55403+10	6CDF  D1      		pop	de
7418:55413+10	6CE0  E1      		pop	hl
7419:55423+7	6CE1  71      		ld	(hl),c
7420:55430+6	6CE2  23      		inc	hl
7421:55436+7	6CE3  73      		ld	(hl),e
7422:55443+6	6CE4  23      		inc	hl
7423:55449+7	6CE5  72      		ld	(hl),d
7424:55456+7	6CE6  0600    		ld	b,000H
7425:55463+10	6CE8  E1      		pop	hl
7426:55473+12	6CE9  18B5    		jr	A6C8B
7427:				;
7428:				;
7429:     -	6CEB  F6      	A6CD6:	defb	0F6H
7430:55485+4	6CEC  37      	A6CD7:	scf
7431:55489+17	6CED  CD9573  		call	A7380
7432:55506+11	6CF0  F5      		push	af
7433:55517+14	6CF1  DD21A45E		ld	ix,GETVAR
7434:55531+17	6CF5  CD3373  		call	A731E
7435:55548+14	6CF8  DD219755		ld	ix,GETYPR
7436:55562+17	6CFC  CD3373  		call	A731E
7437:55579+10	6CFF  C20F73  		jp	nz,A72FA
7438:55589+11	6D02  D5      		push	de
7439:55600+14	6D03  DD215F4C		ld	ix,EVLEXP
7440:55614+17	6D07  CD3373  		call	A731E
7441:55631+10	6D0A  C1      		pop	bc
7442:55641+19	6D0B  E3      		ex	(sp),hl
7443:55660+11	6D0C  E5      		push	hl
7444:55671+11	6D0D  C5      		push	bc
7445:55682+14	6D0E  DD21D067		ld	ix,FRETMP
7446:55696+17	6D12  CD3373  		call	A731E
7447:55713+7	6D15  46      		ld	b,(hl)
7448:55720+19	6D16  E3      		ex	(sp),hl
7449:55739+7	6D17  7E      		ld	a,(hl)
7450:55746+4	6D18  4F      		ld	c,a
7451:55750+11	6D19  C5      		push	bc
7452:55761+11	6D1A  E5      		push	hl
7453:55772+11	6D1B  F5      		push	af
7454:55783+6	6D1C  23      		inc	hl
7455:55789+7	6D1D  5E      		ld	e,(hl)
7456:55796+6	6D1E  23      		inc	hl
7457:55802+7	6D1F  56      		ld	d,(hl)
7458:55809+4	6D20  B7      		or	a
7459:55813+7+5	6D21  285C    		jr	z,A6D6A
7460:55820+16	6D23  2A62F8  		ld	hl,(NULBUF)
7461:55836+6	6D26  2B      		dec	hl
7462:55842+11	6D27  E7      		rst	020H
7463:55853+7+5	6D28  3833    		jr	c,A6D48
7464:55860+16	6D2A  2AC2F6  		ld	hl,(VARTAB)
7465:55876+11	6D2D  E7      		rst	020H
7466:55887+7+5	6D2E  382D    		jr	c,A6D48
7467:55894+4	6D30  59      		ld	e,c
7468:55898+7	6D31  1600    		ld	d,000H
7469:55905+16	6D33  2A74F6  		ld	hl,(STKTOP)
7470:55921+11	6D36  19      		add	hl,de
7471:55932+4	6D37  EB      		ex	de,hl
7472:55936+16	6D38  2A9BF6  		ld	hl,(FRETOP)
7473:55952+11	6D3B  E7      		rst	020H
7474:55963+7+5	6D3C  3854    		jr	c,A6D7D
7475:55970+10	6D3E  F1      		pop	af
7476:55980+4	6D3F  79      	A6D2A:	ld	a,c
7477:55984+14	6D40  DD218E66		ld	ix,ALSSPC
7478:55998+17	6D44  CD3373  		call	A731E
7479:56015+10	6D47  E1      		pop	hl
7480:56025+10	6D48  C1      		pop	bc
7481:56035+19	6D49  E3      		ex	(sp),hl
7482:56054+11	6D4A  D5      		push	de
7483:56065+11	6D4B  C5      		push	bc
7484:56076+14	6D4C  DD21D067		ld	ix,FRETMP
7485:56090+17	6D50  CD3373  		call	A731E
7486:56107+10	6D53  C1      		pop	bc
7487:56117+10	6D54  D1      		pop	de
7488:56127+19	6D55  E3      		ex	(sp),hl
7489:56146+11	6D56  C5      		push	bc
7490:56157+11	6D57  E5      		push	hl
7491:56168+6	6D58  23      		inc	hl
7492:56174+11	6D59  F5      		push	af
7493:56185+7	6D5A  73      		ld	(hl),e
7494:56192+6	6D5B  23      		inc	hl
7495:56198+7	6D5C  72      		ld	(hl),d
7496:56205+10	6D5D  F1      	A6D48:	pop	af
7497:56215+10	6D5E  E1      		pop	hl
7498:56225+6	6D5F  23      		inc	hl
7499:56231+7	6D60  5E      		ld	e,(hl)
7500:56238+6	6D61  23      		inc	hl
7501:56244+7	6D62  56      		ld	d,(hl)
7502:56251+10	6D63  C1      		pop	bc
7503:56261+10	6D64  E1      		pop	hl
7504:56271+6	6D65  23      		inc	hl
7505:56277+7	6D66  7E      		ld	a,(hl)
7506:56284+6	6D67  23      		inc	hl
7507:56290+7	6D68  66      		ld	h,(hl)
7508:56297+4	6D69  6F      		ld	l,a
7509:56301+4	6D6A  79      		ld	a,c
7510:56305+4	6D6B  B8      		cp	b
7511:56309+7+5	6D6C  3001    		jr	nc,A6D5A
7512:56316+4	6D6E  47      		ld	b,a
7513:56320+4	6D6F  90      	A6D5A:	sub	b
7514:56324+4	6D70  4F      		ld	c,a
7515:56328+10	6D71  F1      		pop	af
7516:56338+10+7	6D72  D4896D  		call	nc,A6D74
7517:56348+4	6D75  04      		inc	b
7518:56352+4	6D76  05      	A6D61:	dec	b
7519:56356+7+5	6D77  280B    		jr	z,A6D6F
7520:56363+7	6D79  7E      		ld	a,(hl)
7521:56370+7	6D7A  12      		ld	(de),a
7522:56377+6	6D7B  23      		inc	hl
7523:56383+6	6D7C  13      		inc	de
7524:56389+12	6D7D  18F7    		jr	A6D61
7525:				;
7526:56401+10	6D7F  C1      	A6D6A:	pop	bc
7527:56411+10	6D80  C1      		pop	bc
7528:56421+10	6D81  C1      		pop	bc
7529:56431+10	6D82  C1      		pop	bc
7530:56441+10	6D83  C1      		pop	bc
7531:56451+10+7	6D84  DC896D  	A6D6F:	call	c,A6D74
7532:56461+10	6D87  E1      		pop	hl
7533:56471+10	6D88  C9      		ret
7534:				;
7535:56481+7	6D89  3E20    	A6D74:	ld	a,020H
7536:56488+4	6D8B  0C      		inc	c
7537:56492+4	6D8C  0D      	A6D77:	dec	c
7538:56496+5+6	6D8D  C8      		ret	z
7539:56501+7	6D8E  12      		ld	(de),a
7540:56508+6	6D8F  13      		inc	de
7541:56514+12	6D90  18FA    		jr	A6D77
7542:				;
7543:56526+10	6D92  F1      	A6D7D:	pop	af
7544:56536+10	6D93  E1      		pop	hl
7545:56546+10	6D94  C1      		pop	bc
7546:56556+19	6D95  E3      		ex	(sp),hl
7547:56575+4	6D96  EB      		ex	de,hl
7548:56579+7+5	6D97  2025    		jr	nz,A6DA9
7549:56586+11	6D99  C5      		push	bc
7550:56597+4	6D9A  78      		ld	a,b
7551:56601+14	6D9B  DD212766		ld	ix,ALTSTR
7552:56615+17	6D9F  CD3373  		call	A731E
7553:56632+10	6DA2  1198F6  		ld	de,TEMPST+30
7554:56642+16	6DA5  2A78F6  		ld	hl,(TEMPPT)
7555:56658+16	6DA8  22F8F7  		ld	(DAC+2),hl
7556:56674+7	6DAB  3E03    		ld	a,003H
7557:56681+13	6DAD  3263F6  		ld	(VALTYP),a
7558:56694+17	6DB0  CDF32E  		call	VMOVE
7559:56711+10	6DB3  119BF6  		ld	de,TEMPST+30+3
7560:56721+11	6DB6  E7      		rst	020H
7561:56732+16	6DB7  2278F6  		ld	(TEMPPT),hl
7562:56748+10	6DBA  CA0C73  		jp	z,A72F7
7563:56758+10	6DBD  C1      		pop	bc
7564:56768+19	6DBE  E3      	A6DA9:	ex	(sp),hl
7565:56787+11	6DBF  C5      		push	bc
7566:56798+11	6DC0  E5      		push	hl
7567:56809+10	6DC1  C33F6D  		jp	A6D2A
7568:				;
7569:				;
7570:56819+7	6DC4  3E02    	A6DAF:	ld	a,002H
7571:     -	6DC6  01      		defb	001H
7572:56826+7	6DC7  3E04    	A6DB2:	ld	a,004H
7573:     -	6DC9  01      		defb	001H
7574:56833+7	6DCA  3E08    	A6DB5:	ld	a,008H
7575:56840+17	6DCC  CD9573  		call	A7380
7576:56857+11	6DCF  F5      		push	af
7577:56868+14	6DD0  DD217A51		ld	ix,CNVDAC
7578:56882+17	6DD4  CD3373  		call	A731E
7579:56899+10	6DD7  F1      		pop	af
7580:56909+14	6DD8  DD212766		ld	ix,ALTSTR
7581:56923+17	6DDC  CD3373  		call	A731E
7582:56940+16	6DDF  2A99F6  		ld	hl,(DSCTMP+1)
7583:56956+17	6DE2  CD102F  		call	M.2F10
7584:56973+10	6DE5  C30662  		jp	A61F1
7585:				
7586:				; Unused code, patched code ??
7587:				;
7588:56983+4	6DE8  00      		nop
7589:56987+4	6DE9  00      		nop
7590:56991+4	6DEA  00      		nop
7591:56995+4	6DEB  00      		nop
7592:				
7593:				;
7594:				;
7595:56999+7	6DEC  3E01    	A6DD7:	ld	a,001H
7596:     -	6DEE  01      		defb	001H
7597:57006+7	6DEF  3E03    	A6DDA:	ld	a,003H
7598:     -	6DF1  01      		defb	001H
7599:57013+7	6DF2  3E07    	A6DDD:	ld	a,007H
7600:57020+17	6DF4  CD9573  		call	A7380
7601:57037+11	6DF7  F5      		push	af
7602:57048+14	6DF8  DD21D067		ld	ix,FRETMP
7603:57062+17	6DFC  CD3373  		call	A731E
7604:57079+10	6DFF  F1      		pop	af
7605:57089+7	6E00  BE      		cp	(hl)
7606:57096+10	6E01  D22A73  		jp	nc,A7315
7607:57106+4	6E04  3C      		inc	a
7608:57110+6	6E05  23      		inc	hl
7609:57116+7	6E06  4E      		ld	c,(hl)
7610:57123+6	6E07  23      		inc	hl
7611:57129+7	6E08  66      		ld	h,(hl)
7612:57136+4	6E09  69      		ld	l,c
7613:57140+13	6E0A  3263F6  		ld	(VALTYP),a
7614:57153+10	6E0D  C3082F  		jp	VMOVFM
7615:				;
7616:57163+14	6E10  DD219755	A6DFB:	ld	ix,GETYPR
7617:57177+17	6E14  CD3373  		call	A731E
7618:57194+20	6E17  ED4BF8F7		ld	bc,(DAC+2)
7619:57214+10	6E1B  210000  		ld	hl,00000H
7620:57224+5+6	6E1E  F8      		ret	m
7621:57229+10	6E1F  CA0F73  		jp	z,A72FA
7622:57239+10	6E22  21F6F7  		ld	hl,DAC
7623:57249+10	6E25  11FCF5  		ld	de,BUF+158
7624:57259+10	6E28  010800  		ld	bc,00008H
7625:57269+16+5	6E2B  EDB0    		ldir
7626:57285+10	6E2D  217D6E  		ld	hl,T6E68
7627:57295+10	6E30  1147F8  		ld	de,ARG
7628:57305+7	6E33  0E08    		ld	c,008H
7629:57312+16+5	6E35  EDB0    		ldir
7630:57328+17	6E37  CD9F28  		call	DECDIV
7631:57345+4	6E3A  A7      		and	a
7632:57349+17	6E3B  CDD130  		call	M.30D1
7633:57366+14	6E3E  DD213254		ld	ix,CNVADR
7634:57380+17	6E42  CD3373  		call	A731E
7635:57397+11	6E45  D5      		push	de
7636:57408+4	6E46  EB      		ex	de,hl
7637:57412+14	6E47  DD21FF46		ld	ix,CSNG
7638:57426+17	6E4B  CD3373  		call	A731E
7639:57443+17	6E4E  CD4230  		call	M.3042
7640:57460+10	6E51  014565  		ld	bc,06545H
7641:57470+10	6E54  115360  		ld	de,06053H
7642:57480+17	6E57  CD5C32  		call	M.325C
7643:57497+10	6E5A  21F6F7  		ld	hl,DAC
7644:57507+10	6E5D  1147F8  		ld	de,ARG
7645:57517+10	6E60  010800  		ld	bc,00008H
7646:57527+16+5	6E63  EDB0    		ldir
7647:57543+10	6E65  21FCF5  		ld	hl,BUF+158
7648:57553+10	6E68  11F6F7  		ld	de,DAC
7649:57563+7	6E6B  0E08    		ld	c,008H
7650:57570+16+5	6E6D  EDB0    		ldir
7651:57586+17	6E6F  CD8C26  		call	DECSUB
7652:57603+14	6E72  DD213254		ld	ix,CNVADR
7653:57617+17	6E76  CD3373  		call	A731E
7654:57634+4	6E79  4B      		ld	c,e
7655:57638+4	6E7A  42      		ld	b,d
7656:57642+10	6E7B  E1      		pop	hl
7657:57652+10	6E7C  C9      		ret
7658:				;
7659:     -	6E7D  45655360	T6E68:	defb	045H,065H,053H,060H,000H,000H,000H,000H
	      00000000
7660:				
7661:57662+17	6E85  CD9573  	A6E70:	call	A7380
7662:57679+11	6E88  E5      		push	hl
7663:57690+17	6E89  CD3F68  		call	A682A			; get char from I/O channel
7664:57707+10	6E8C  210000  		ld	hl,00000H
7665:57717+7+5	6E8F  3001    		jr	nc,A6E7D
7666:57724+6	6E91  2B      		dec	hl
7667:57730+11	6E92  F5      	A6E7D:	push	af
7668:57741+17	6E93  CD992F  		call	M.2F99
7669:57758+10	6E96  F1      		pop	af
7670:57768+10	6E97  E1      		pop	hl
7671:57778+6	6E98  23      		inc	hl
7672:57784+6	6E99  23      		inc	hl
7673:57790+6	6E9A  23      		inc	hl
7674:57796+7	6E9B  77      		ld	(hl),a
7675:57803+10	6E9C  C9      		ret
7676:				;
7677:				;
7678:57813+17	6E9D  CD9573  	A6E88:	call	A7380
7679:57830+7	6EA0  1600    		ld	d,000H
7680:57837+7+5	6EA2  2806    		jr	z,A6E95
7681:57844+17	6EA4  CD956F  		call	A6F80
7682:57861+11	6EA7  E5      		push	hl
7683:57872+12	6EA8  1804    		jr	A6E99
7684:				;
7685:57884+11	6EAA  E5      	A6E95:	push	hl
7686:57895+17	6EAB  CD1370  		call	A6FFE
7687:57912+17	6EAE  CD786F  	A6E99:	call	A6F63
7688:57929+13	6EB1  3A16F4  		ld	a,(PRTFLG)
7689:57942+4	6EB4  A7      		and	a
7690:57946+11	6EB5  F5      		push	af
7691:57957+17	6EB6  CD5A66  		call	A6645
7692:57974+10	6EB9  CA2773  		jp	z,A7312
7693:57984+14	6EBC  DD212373		ld	ix,COUTNL
7694:57998+17	6EC0  CD3373  		call	A731E
7695:58015+10	6EC3  21B3F5  	A6EAE:	ld	hl,BUF+85
7696:58025+7	6EC6  060B    		ld	b,00BH
7697:58032+7	6EC8  7E      	A6EB3:	ld	a,(hl)
7698:58039+6	6EC9  23      		inc	hl
7699:58045+11	6ECA  DF      		rst	018H
7700:58056+4	6ECB  78      		ld	a,b
7701:58060+7	6ECC  FE04    		cp	004H
7702:58067+7+5	6ECE  2008    		jr	nz,A6EC3
7703:58074+7	6ED0  7E      		ld	a,(hl)
7704:58081+7	6ED1  FE20    		cp	" "
7705:58088+7+5	6ED3  2802    		jr	z,A6EC2
7706:58095+7	6ED5  3E2E    		ld	a,"."
7707:58102+11	6ED7  DF      	A6EC2:	rst	018H
7708:58113+8+5	6ED8  10EE    	A6EC3:	djnz	A6EB3
7709:58121+17	6EDA  CDBD00  		call	CKCNTC
7710:58138+10	6EDD  F1      		pop	af
7711:58148+11	6EDE  F5      		push	af
7712:58159+13	6EDF  3AB0F3  		ld	a,(LINLEN)
7713:58172+4	6EE2  47      		ld	b,a
7714:58176+13	6EE3  3A61F6  		ld	a,(TTYPOS)
7715:58189+7+5	6EE6  2805    		jr	z,A6ED8
7716:58196+7	6EE8  0650    		ld	b,80
7717:58203+13	6EEA  3A15F4  		ld	a,(LPTPOS)
7718:58216+4	6EED  A7      	A6ED8:	and	a
7719:58220+7+5	6EEE  280F    		jr	z,A6EEA
7720:58227+7	6EF0  C60C    		add	a,00CH
7721:58234+4	6EF2  B8      		cp	b
7722:58238+7+5	6EF3  3003    		jr	nc,A6EE3
7723:58245+7	6EF5  3E20    		ld	a," "
7724:58252+11	6EF7  DF      		rst	018H
7725:58263+14	6EF8  DD212873	A6EE3:	ld	ix,OUTNL
7726:58277+10+7	6EFC  D43373  		call	nc,A731E
7727:58287+10	6EFF  1168F5  	A6EEA:	ld	de,BUF+10
7728:58297+4	6F02  AF      		xor	a
7729:58301+13	6F03  3274F5  		ld	(BUF+22),a
7730:58314+17	6F06  CD0650  		call	A5006			; search for next
7731:58331+4	6F09  3C      		inc	a
7732:58335+7+5	6F0A  20B7    		jr	nz,A6EAE
7733:58342+10	6F0C  F1      		pop	af
7734:58352+10	6F0D  E1      	A6EF8:	pop	hl
7735:58362+14	6F0E  DD21FF4A		ld	ix,SCROUT
7736:58376+10	6F12  C33373  		jp	A731E
7737:				;
7738:				;
7739:58386+17	6F15  CD9573  	A6F00:	call	A7380
7740:58403+17	6F18  CDAB6F  		call	A6F96
7741:58420+17	6F1B  CDEF72  		call	A72DA
7742:58437+5+6	6F1E  C0      		ret	nz
7743:58442+17	6F1F  CDFF65  		call	A65EA			; is file already open in one of the I/O channels ?
7744:58459+10	6F22  CAB771  		jp	z,A71A2
7745:58469+17	6F25  CD786F  		call	A6F63
7746:58486+11	6F28  E5      		push	hl
7747:58497+10	6F29  1168F5  		ld	de,BUF+10
7748:58507+17	6F2C  CD6C43  		call	A436C			; delete file
7749:58524+4	6F2F  A7      		and	a
7750:58528+10	6F30  C22773  		jp	nz,A7312
7751:58538+10	6F33  E1      		pop	hl
7752:58548+10	6F34  C9      		ret
7753:				;
7754:				;
7755:58558+17	6F35  CD9573  	A6F20:	call	A7380
7756:58575+17	6F38  CDAB6F  		call	A6F96
7757:58592+17	6F3B  CDFF65  		call	A65EA			; is file already open in one of the I/O channels ?
7758:58609+10	6F3E  CAB771  		jp	z,A71A2
7759:58619+17	6F41  CD786F  		call	A6F63
7760:58636+11	6F44  E5      		push	hl
7761:58647+17	6F45  CD5A66  		call	A6645
7762:58664+10	6F48  CA2773  		jp	z,A7312
7763:58674+10	6F4B  E1      		pop	hl
7764:58684+17	6F4C  CDE572  		call	A72D0
7765:     -	6F4F  41      		defb	"A"
7766:58701+17	6F50  CDE572  		call	A72D0
7767:     -	6F53  53      		defb	"S"
7768:58718+17	6F54  CDAB6F  		call	A6F96
7769:58735+4	6F57  7A      		ld	a,d
7770:58739+13	6F58  3278F5  		ld	(BUF+26),a
7771:58752+11	6F5B  E5      		push	hl
7772:58763+16	6F5C  2A68F5  		ld	hl,(BUF+10)
7773:58779+4	6F5F  A7      		and	a
7774:58783+7+5	6F60  2804    		jr	z,A6F51
7775:58790+4	6F62  BD      		cp	l
7776:58794+10	6F63  C2CC71  		jp	nz,A71B7
7777:58804+10	6F66  1179F5  	A6F51:	ld	de,BUF+27
7778:58814+17	6F69  CD6F66  		call	A665A
7779:58831+10	6F6C  1168F5  		ld	de,BUF+10
7780:58841+17	6F6F  CD9243  		call	A4392			; rename file
7781:58858+4	6F72  A7      		and	a
7782:58862+10	6F73  C2BA71  		jp	nz,A71A5
7783:58872+10	6F76  E1      		pop	hl
7784:58882+10	6F77  C9      		ret
7785:				;
7786:58892+17	6F78  CDF865  	A6F63:	call	A65E3
7787:58909+4	6F7B  3C      		inc	a
7788:58913+13	6F7C  3268F5  		ld	(BUF+10),a
7789:58926+11	6F7F  E5      		push	hl
7790:58937+11	6F80  D5      		push	de
7791:58948+17	6F81  CD6C66  		call	A6657
7792:58965+10	6F84  D1      		pop	de
7793:58975+10	6F85  E1      		pop	hl
7794:58985+10	6F86  C9      		ret
7795:				;
7796:58995+14	6F87  DD210E6A	A6F72:	ld	ix,EVFSPC
7797:59009+17	6F8B  CD3373  		call	A731E
7798:59026+4	6F8E  7A      		ld	a,d
7799:59030+7	6F8F  FE09    		cp	009H
7800:59037+5+6	6F91  D8      		ret	c
7801:59042+10	6F92  C3B171  		jp	A719C
7802:				;
7803:59052+17	6F95  CD876F  	A6F80:	call	A6F72
7804:59069+11	6F98  E5      		push	hl
7805:59080+10	6F99  2166F8  		ld	hl,FILNAM
7806:59090+7	6F9C  060B    		ld	b,00BH
7807:59097+7	6F9E  7E      	A6F89:	ld	a,(hl)
7808:59104+6	6F9F  23      		inc	hl
7809:59110+7	6FA0  FE20    		cp	" "
7810:59117+7+5	6FA2  200B    		jr	nz,A6F9A
7811:59124+8+5	6FA4  10F8    		djnz	A6F89
7812:59132+17	6FA6  CD1370  		call	A6FFE
7813:59149+12	6FA9  1804    		jr	A6F9A
7814:				;
7815:59161+17	6FAB  CD876F  	A6F96:	call	A6F72
7816:59178+11	6FAE  E5      		push	hl
7817:59189+10	6FAF  2166F8  	A6F9A:	ld	hl,FILNAM
7818:59199+7	6FB2  0608    		ld	b,008H
7819:59206+17	6FB4  CD0A70  		call	A6FF5
7820:59223+7	6FB7  0603    		ld	b,003H
7821:59230+17	6FB9  CD0A70  		call	A6FF5
7822:59247+10	6FBC  E1      		pop	hl
7823:     -	6FBD  F6      		defb	0F6H
7824:59257+4	6FBE  37      	A6FA9:	scf
7825:59261+11	6FBF  D5      		push	de
7826:59272+11	6FC0  E5      		push	hl
7827:59283+10	6FC1  1166F8  		ld	de,FILNAM
7828:59293+11	6FC4  D5      		push	de
7829:59304+7	6FC5  060B    		ld	b,11
7830:59311+11	6FC7  C5      	A6FB2:	push	bc
7831:59322+7	6FC8  1A      		ld	a,(de)
7832:59329+10	6FC9  21E16F  		ld	hl,T6FCC
7833:59339+10	6FCC  010D00  		ld	bc,0000DH
7834:59349+7+5	6FCF  3801    		jr	c,A6FBD
7835:59356+6	6FD1  0B      		dec	bc
7836:59362+16+5	6FD2  EDB1    	A6FBD:	cpir
7837:59378+7+5	6FD4  2831    		jr	z,A6FF2
7838:59385+10	6FD6  C1      		pop	bc
7839:59395+6	6FD7  13      		inc	de
7840:59401+8+5	6FD8  10ED    		djnz	A6FB2
7841:59409+10	6FDA  E1      		pop	hl
7842:59419+17	6FDB  CDEE6F  		call	A6FD9
7843:59436+10	6FDE  E1      		pop	hl
7844:59446+10	6FDF  D1      		pop	de
7845:59456+10	6FE0  C9      		ret
7846:				;
7847:				;
7848:     -	6FE1  2E222F5C	T6FCC:	defb	'."/\[]:+=;,*?'
	      5B5D3A2B
	      3D3B2C2A
	      3F
7849:				
7850:59466+7	6FEE  3E20    	A6FD9:	ld	a," "
7851:59473+7	6FF0  BE      		cp	(hl)
7852:59480+7+5	6FF1  2814    		jr	z,A6FF2
7853:59487+7	6FF3  0607    		ld	b,007H
7854:59494+17	6FF5  CDFA6F  		call	A6FE5
7855:59511+7	6FF8  0603    		ld	b,003H
7856:59518+6	6FFA  23      	A6FE5:	inc	hl
7857:59524+7	6FFB  BE      		cp	(hl)
7858:59531+7+5	6FFC  2803    		jr	z,A6FEC
7859:59538+8+5	6FFE  10FA    		djnz	A6FE5
7860:59546+10	7000  C9      		ret
7861:				;
7862:59556+4	7001  05      	A6FEC:	dec	b
7863:59560+5+6	7002  C8      		ret	z
7864:59565+6	7003  23      		inc	hl
7865:59571+7	7004  BE      		cp	(hl)
7866:59578+7+5	7005  28FA    		jr	z,A6FEC
7867:59585+10	7007  C32473  	A6FF2:	jp	A730F
7868:				;
7869:59595+7	700A  7E      	A6FF5:	ld	a,(hl)
7870:59602+7	700B  FE2A    		cp	"*"
7871:59609+7+5	700D  2809    		jr	z,A7003
7872:59616+6	700F  23      		inc	hl
7873:59622+8+5	7010  10F8    		djnz	A6FF5
7874:59630+10	7012  C9      		ret
7875:				;
7876:59640+10	7013  2166F8  	A6FFE:	ld	hl,FILNAM
7877:59650+7	7016  060B    		ld	b,00BH
7878:59657+10	7018  363F    	A7003:	ld	(hl),"?"
7879:59667+6	701A  23      		inc	hl
7880:59673+8+5	701B  10FB    		djnz	A7003
7881:59681+10	701D  C9      		ret
7882:				;
7883:				;
7884:59691+10	701E  011000  	A7009:	ld	bc,00010H
7885:     -	7021  11      		defb	011H
7886:59701+10	7022  012100  	A700D:	ld	bc,00021H
7887:59711+17	7025  CD9573  		call	A7380
7888:59728+11	7028  C5      		push	bc
7889:59739+14	7029  DD211F52		ld	ix,CNVBYT
7890:59753+17	702D  CD3373  		call	A731E
7891:59770+14	7030  DD216D6A		ld	ix,GTCHNP
7892:59784+17	7034  CD3373  		call	A731E
7893:59801+10	7037  DA2A73  		jp	c,A7315
7894:59811+10	703A  CA1573  		jp	z,A7300
7895:59821+10	703D  C1      		pop	bc
7896:59831+6	703E  23      		inc	hl
7897:59837+7	703F  5E      		ld	e,(hl)
7898:59844+6	7040  23      		inc	hl
7899:59850+7	7041  56      		ld	d,(hl)
7900:59857+4	7042  EB      		ex	de,hl
7901:59861+11	7043  09      		add	hl,bc
7902:59872+7	7044  4E      		ld	c,(hl)
7903:59879+6	7045  23      		inc	hl
7904:59885+7	7046  46      		ld	b,(hl)
7905:59892+6	7047  23      		inc	hl
7906:59898+7	7048  5E      		ld	e,(hl)
7907:59905+6	7049  23      		inc	hl
7908:59911+7	704A  56      		ld	d,(hl)
7909:59918+4	704B  EB      		ex	de,hl
7910:59922+11	704C  C5      		push	bc
7911:59933+14	704D  DD21FF46		ld	ix,CSNG
7912:59947+17	7051  CD3373  		call	A731E
7913:59964+10	7054  014565  		ld	bc,06545H
7914:59974+10	7057  115360  		ld	de,06053H
7915:59984+17	705A  CD5C32  		call	M.325C
7916:60001+10	705D  21F6F7  		ld	hl,DAC
7917:60011+10	7060  1147F8  		ld	de,ARG
7918:60021+10	7063  010800  		ld	bc,00008H
7919:60031+16+5	7066  EDB0    		ldir
7920:60047+10	7068  E1      		pop	hl
7921:60057+14	7069  DD21FF46		ld	ix,CSNG
7922:60071+17	706D  CD3373  		call	A731E
7923:60088+17	7070  CD4230  		call	M.3042
7924:60105+10	7073  C39A26  		jp	DECADD
7925:				;
7926:				;
7927:60115+17	7076  CD9573  	A7061:	call	A7380
7928:60132+14	7079  DD211F52		ld	ix,CNVBYT
7929:60146+17	707D  CD3373  		call	A731E
7930:60163+10	7080  2147F3  		ld	hl,YF347
7931:60173+7	7083  BE      		cp	(hl)
7932:60180+7+5	7084  2803    		jr	z,A7074
7933:60187+10	7086  D2B171  		jp	nc,A719C
7934:60197+4	7089  5F      	A7074:	ld	e,a
7935:60201+17	708A  CD5D50  		call	A505D
7936:60218+10	708D  C3992F  		jp	M.2F99
7937:				;
7938:				;
7939:60228+17	7090  CD9573  	A707B:	call	A7380
7940:60245+17	7093  CD956F  		call	A6F80
7941:60262+17	7096  CDFF65  		call	A65EA			; is file already open in one of the I/O channels ?
7942:60279+10	7099  CAB771  		jp	z,A71A2
7943:60289+17	709C  CD786F  		call	A6F63
7944:60306+11	709F  E5      		push	hl
7945:60317+13	70A0  3A47F2  		ld	a,(YF247)
7946:60330+4	70A3  3C      		inc	a
7947:60334+13	70A4  328DF5  		ld	(BUF+47),a
7948:60347+10	70A7  2169F5  		ld	hl,BUF+11
7949:60357+10	70AA  118EF5  		ld	de,BUF+48
7950:60367+10	70AD  012400  		ld	bc,00024H
7951:60377+16+5	70B0  EDB0    		ldir
7952:60393+10	70B2  E1      		pop	hl
7953:60403+17	70B3  CDEF72  		call	A72DA
7954:60420+7+5	70B6  2820    		jr	z,A70C3
7955:60427+17	70B8  CDE572  		call	A72D0
7956:     -	70BB  D9      		defb	0D9H
7957:60444+17	70BC  CD956F  		call	A6F80
7958:60461+17	70BF  CDFF65  		call	A65EA			; is file already open in one of the I/O channels ?
7959:60478+10	70C2  CAB771  		jp	z,A71A2
7960:60488+17	70C5  CDF865  		call	A65E3
7961:60505+4	70C8  3C      		inc	a
7962:60509+13	70C9  328DF5  		ld	(BUF+47),a
7963:60522+11	70CC  E5      		push	hl
7964:60533+10	70CD  118EF5  		ld	de,BUF+48
7965:60543+17	70D0  CD6F66  		call	A665A
7966:60560+10	70D3  E1      		pop	hl
7967:60570+17	70D4  CDEF72  		call	A72DA
7968:60587+5+6	70D7  C0      		ret	nz
7969:60592+11	70D8  E5      	A70C3:	push	hl
7970:60603+17	70D9  CD5A66  		call	A6645
7971:60620+10	70DC  CA2773  		jp	z,A7312
7972:60630+17	70DF  CDBD00  	A70CA:	call	CKCNTC
7973:60647+10	70E2  018DF5  		ld	bc,BUF+47
7974:60657+10	70E5  11D7F5  		ld	de,BUF+121
7975:60667+10	70E8  21B2F5  		ld	hl,BUF+84
7976:60677+7	70EB  3E0C    		ld	a,00CH
7977:60684+11	70ED  F5      	A70D8:	push	af
7978:60695+7	70EE  0A      		ld	a,(bc)
7979:60702+7	70EF  FE3F    		cp	"?"
7980:60709+7+5	70F1  2001    		jr	nz,A70DF
7981:60716+7	70F3  7E      		ld	a,(hl)
7982:60723+7	70F4  12      	A70DF:	ld	(de),a
7983:60730+6	70F5  03      		inc	bc
7984:60736+6	70F6  13      		inc	de
7985:60742+6	70F7  23      		inc	hl
7986:60748+10	70F8  F1      		pop	af
7987:60758+4	70F9  3D      		dec	a
7988:60762+7+5	70FA  20F1    		jr	nz,A70D8
7989:60769+10	70FC  21B2F5  		ld	hl,BUF+84
7990:60779+10	70FF  11D7F5  		ld	de,BUF+121
7991:60789+7	7102  060C    		ld	b,00CH
7992:60796+7	7104  1A      	A70EF:	ld	a,(de)
7993:60803+7	7105  BE      		cp	(hl)
7994:60810+7+5	7106  2007    		jr	nz,A70FA
7995:60817+6	7108  23      		inc	hl
7996:60823+6	7109  13      		inc	de
7997:60829+8+5	710A  10F8    		djnz	A70EF
7998:60837+10	710C  C32A73  		jp	A7315
7999:				;
8000:60847+17	710F  CD8171  	A70FA:	call	A716C
8001:60864+11	7112  E5      		push	hl
8002:60875+4	7113  AF      		xor	a
8003:60879+13	7114  32BEF5  		ld	(BUF+96),a
8004:60892+10	7117  11B2F5  		ld	de,BUF+84
8005:60902+17	711A  CD6244  		call	A4462			; open fcb
8006:60919+10	711D  11D7F5  		ld	de,BUF+121
8007:60929+17	7120  CD1D46  		call	A461D			; create file
8008:60946+4	7123  A7      		and	a
8009:60950+10	7124  C2C071  		jp	nz,A71AB
8010:60960+4	7127  6F      		ld	l,a
8011:60964+4	7128  67      		ld	h,a
8012:60968+16	7129  22D3F5  		ld	(BUF+117),hl
8013:60984+16	712C  22D5F5  		ld	(BUF+119),hl
8014:61000+16	712F  22F8F5  		ld	(BUF+154),hl
8015:61016+16	7132  22FAF5  		ld	(BUF+156),hl
8016:61032+6	7135  23      		inc	hl
8017:61038+16	7136  22C0F5  		ld	(BUF+98),hl
8018:61054+16	7139  22E5F5  		ld	(BUF+135),hl
8019:61070+10	713C  E1      		pop	hl
8020:61080+11	713D  E5      	A7128:	push	hl
8021:61091+10	713E  11B2F5  		ld	de,BUF+84
8022:61101+17	7141  CDB247  		call	A47B2			; random block read
8023:61118+4	7144  7D      		ld	a,l
8024:61122+4	7145  B4      		or	h
8025:61126+7+5	7146  2809    		jr	z,A713C
8026:61133+10	7148  11D7F5  		ld	de,BUF+121
8027:61143+17	714B  CDA471  		call	A718F			; random block write
8028:61160+10	714E  E1      		pop	hl
8029:61170+12	714F  18EC    		jr	A7128
8030:				;
8031:61182+10	7151  E1      	A713C:	pop	hl
8032:61192+16	7152  2AC6F5  		ld	hl,(BUF+104)
8033:61208+16	7155  22EBF5  		ld	(BUF+141),hl
8034:61224+16	7158  2AC8F5  		ld	hl,(BUF+106)
8035:61240+16	715B  22EDF5  		ld	(BUF+143),hl
8036:61256+10	715E  11D7F5  		ld	de,BUF+121
8037:61266+17	7161  CD6F45  		call	A456F			; close fcb
8038:61283+10	7164  21B2F5  		ld	hl,BUF+84
8039:61293+16	7167  223DF2  		ld	(YF23D),hl		; transferadres
8040:61309+10	716A  1168F5  		ld	de,BUF+10
8041:61319+4	716D  AF      		xor	a
8042:61323+13	716E  3274F5  		ld	(BUF+22),a
8043:61336+17	7171  CD0650  		call	A5006			; search for next
8044:61353+4	7174  3C      		inc	a
8045:61357+10	7175  C2DF70  		jp	nz,A70CA
8046:61367+10	7178  E1      		pop	hl
8047:61377+10	7179  C9      		ret
8048:				;
8049:61387+16	717A  22BFFC  	A7165:	ld	(SAVENT),hl
8050:61403+20	717D  ED437DF8		ld	(SAVEND),bc
8051:61423+10	7181  2100FE  	A716C:	ld	hl,0FE00H
8052:61433+11	7184  39      		add	hl,sp
8053:61444+7+5	7185  300D    		jr	nc,A717F
8054:61451+20	7187  ED5BC6F6		ld	de,(STREND)
8055:61471+4	718B  A7      		and	a
8056:61475+15	718C  ED52    		sbc	hl,de
8057:61490+7+5	718E  3804    		jr	c,A717F
8058:61497+4	7190  7C      		ld	a,h
8059:61501+4	7191  A7      		and	a
8060:61505+7+5	7192  2007    		jr	nz,A7186
8061:61512+20	7194  ED5B62F8	A717F:	ld	de,(NULBUF)
8062:61532+10	7198  210001  		ld	hl,00100H
8063:61542+20	719B  ED533DF2	A7186:	ld	(YF23D),de		; transferadres
8064:61562+10	719F  C9      		ret
8065:				;
8066:61572+20	71A0  ED5B53F3	A718B:	ld	de,(YF353)
8067:61592+17	71A4  CDBE47  	A718F:	call	A47BE			; random block write
8068:61609+4	71A7  A7      		and	a
8069:61613+5+6	71A8  C8      		ret	z
8070:61618+12	71A9  1812    		jr	A71A8
8071:				;
8072:61630+7	71AB  1E3C    	A7196:	ld	e,03CH
8073:     -	71AD  01      		defb	001H
8074:61637+7	71AE  1E3D    	A7199:	ld	e,03DH
8075:     -	71B0  01      		defb	001H
8076:61644+7	71B1  1E3E    	A719C:	ld	e,03EH
8077:     -	71B3  01      		defb	001H
8078:61651+7	71B4  1E3F    		ld	e,03FH
8079:     -	71B6  01      		defb	001H
8080:61658+7	71B7  1E40    	A71A2:	ld	e,040H
8081:     -	71B9  01      		defb	001H
8082:61665+7	71BA  1E41    	A71A5:	ld	e,041H
8083:     -	71BC  01      		defb	001H
8084:61672+7	71BD  1E42    	A71A8:	ld	e,042H
8085:     -	71BF  01      		defb	001H
8086:61679+7	71C0  1E43    	A71AB:	ld	e,043H
8087:     -	71C2  01      		defb	001H
8088:61686+7	71C3  1E44    	A71AE:	ld	e,044H
8089:     -	71C5  01      		defb	001H
8090:61693+7	71C6  1E45    	A71B1:	ld	e,045H
8091:     -	71C8  01      		defb	001H
8092:61700+7	71C9  1E46    	A71B4:	ld	e,046H
8093:     -	71CB  01      		defb	001H
8094:61707+7	71CC  1E47    	A71B7:	ld	e,047H
8095:61714+10	71CE  010000  		ld	bc,00000H
8096:61724+4	71D1  AF      		xor	a
8097:61728+13	71D2  327CF8  		ld	(NLONLY),a
8098:61741+13	71D5  32AEFC  		ld	(FLBMEM),a
8099:61754+11	71D8  D5      		push	de
8100:61765+14	71D9  DD21246B		ld	ix,CLOCHN
8101:61779+17	71DD  CD3373  		call	A731E
8102:61796+10	71E0  D1      		pop	de
8103:61806+14	71E1  DD216F40		ld	ix,ERROR
8104:61820+10	71E5  C33373  		jp	A731E
8105:				;
8106:				;
8107:61830+4	71E8  7B      	A71D3:	ld	a,e
8108:61834+7	71E9  FE3C    		cp	03CH
8109:61841+5+6	71EB  D8      		ret	c
8110:61846+7	71EC  FE48    		cp	048H
8111:61853+5+6	71EE  D0      		ret	nc
8112:61858+7	71EF  D63B    		sub	03BH
8113:61865+4	71F1  47      		ld	b,a
8114:61869+10	71F2  210A72  		ld	hl,T71F5
8115:61879+7	71F5  7E      	A71E0:	ld	a,(hl)
8116:61886+4	71F6  A7      		and	a
8117:61890+6	71F7  23      		inc	hl
8118:61896+7+5	71F8  20FB    		jr	nz,A71E0
8119:61903+8+5	71FA  10F9    		djnz	A71E0
8120:61911+6	71FC  2B      		dec	hl
8121:61917+10	71FD  1104F6  		ld	de,BUF+166
8122:61927+11	7200  D5      		push	de
8123:61938+10	7201  011600  		ld	bc,00016H
8124:61948+16+5	7204  EDB0    		ldir
8125:61964+7	7206  1E01    		ld	e,001H
8126:61971+10	7208  E1      		pop	hl
8127:61981+10	7209  C9      		ret
8128:				;
8129:				;
8130:     -	720A  00      	T71F5:	defb	0
8131:     -	720B  42616420		defb	"Bad FAT",0
	      46415400
8132:     -	7213  42616420		defb	"Bad file mode",0
	      66696C65
	      206D6F64
	      6500
8133:     -	7221  42616420		defb	"Bad drive name",0
	      64726976
	      65206E61
	      6D6500
8134:     -	7230  42616420		defb	"Bad sector number",0
	      73656374
	      6F72206E
	      756D6265
	      7200
8135:     -	7242  46696C65		defb	"File still open",0
	      20737469
	      6C6C206F
	      70656E00
8136:     -	7252  46696C65		defb	"File already exists",0
	      20616C72
	      65616479
	      20657869
	      73747300
8137:     -	7266  4469736B		defb	"Disk full",0
	      2066756C
	      6C00
8138:     -	7270  546F6F20		defb	"Too many files",0
	      6D616E79
	      2066696C
	      657300
8139:     -	727F  4469736B		defb	"Disk write protected",0
	      20777269
	      74652070
	      726F7465
	      63746564
	      00
8140:     -	7294  4469736B		defb	"Disk I/O error",0
	      20492F4F
	      20657272
	      6F7200
8141:     -	72A3  4469736B		defb	"Disk offline",0
	      206F6666
	      6C696E65
	      00
8142:     -	72B0  52656E61		defb	"Rename across disk",0
	      6D652061
	      63726F73
	      73206469
	      736B00
8143:				
8144:     -	72C3  C572    	T72AE:	defw	A72B0
8145:				
8146:61991+8	72C5  CB79    	A72B0:	bit	7,c
8147:61999+10	72C7  C2AB71  		jp	nz,A7196
8148:62009+8	72CA  CB81    		res	0,c
8149:62017+7	72CC  0600    		ld	b,000H
8150:62024+10	72CE  21D772  		ld	hl,T72C2
8151:62034+11	72D1  09      		add	hl,bc
8152:62045+7	72D2  7E      	A72BD:	ld	a,(hl)
8153:62052+6	72D3  23      		inc	hl
8154:62058+7	72D4  66      		ld	h,(hl)
8155:62065+4	72D5  6F      		ld	l,a
8156:62069+4	72D6  E9      		jp	(hl)
8157:				;
8158:				;
8159:     -	72D7  C371    	T72C2:	defw	A71AE
8160:     -	72D9  C971    		defw	A71B4
8161:     -	72DB  C671    		defw	A71B1
8162:     -	72DD  C671    		defw	A71B1
8163:     -	72DF  C671    		defw	A71B1
8164:     -	72E1  C671    		defw	A71B1
8165:     -	72E3  C671    		defw	A71B1
8166:				
8167:62073+17	72E5  CDEF72  	A72D0:	call	A72DA
8168:62090+19	72E8  E3      		ex	(sp),hl
8169:62109+7	72E9  BE      		cp	(hl)
8170:62116+7+5	72EA  2041    		jr	nz,A7318
8171:62123+6	72EC  23      		inc	hl
8172:62129+19	72ED  E3      		ex	(sp),hl
8173:62148+6	72EE  23      		inc	hl
8174:62154+6	72EF  2B      	A72DA:	dec	hl
8175:62160+14	72F0  DD216646	A72DB:	ld	ix,CHRGTR
8176:62174+12	72F4  183D    		jr	A731E
8177:				
8178:				; unused code, patched ??
8179:				;
8180:62186+4	72F6  00      		nop
8181:62190+4	72F7  00      		nop
8182:62194+4	72F8  00      		nop
8183:				
8184:62198+7	72F9  3EC9    	A72E4:	ld	a,0C9H
8185:62205+13	72FB  32D5FE  	A72E6:	ld	(H.LOPD+0),a
8186:62218+20	72FE  ED5B4AFC		ld	de,(HIMEM)
8187:62238+20	7302  ED5349F3		ld	(YF349),de
8188:62258+10	7306  C9      		ret
8189:				
8190:62268+11	7307  F7      	T72F2:	rst	030H
8191:     -	7308  00      		defb	000H
8192:     -	7309  F972    		defw	A72E4
8193:62279+10	730B  C9      		ret
8194:				
8195:62289+7	730C  1E10    	A72F7:	ld	e,010H
8196:     -	730E  01      		defb	001H
8197:62296+7	730F  1E0D    	A72FA:	ld	e,00DH
8198:     -	7311  01      		defb	001H
8199:62303+7	7312  1E07    	A72FD:	ld	e,007H
8200:     -	7314  01      		defb	001H
8201:62310+7	7315  1E3B    	A7300:	ld	e,03BH
8202:     -	7317  01      		defb	001H
8203:62317+7	7318  1E37    	A7303:	ld	e,037H
8204:     -	731A  01      		defb	001H
8205:62324+7	731B  1E32    	A7306:	ld	e,032H
8206:     -	731D  01      		defb	001H
8207:62331+7	731E  1E36    	A7309:	ld	e,036H
8208:     -	7320  01      		defb	001H
8209:62338+7	7321  1E34    	A730C:	ld	e,034H
8210:     -	7323  01      		defb	001H
8211:62345+7	7324  1E38    	A730F:	ld	e,038H
8212:     -	7326  01      		defb	001H
8213:62352+7	7327  1E35    	A7312:	ld	e,035H
8214:     -	7329  01      		defb	001H
8215:62359+7	732A  1E05    	A7315:	ld	e,005H
8216:     -	732C  01      		defb	001H
8217:62366+7	732D  1E02    	A7318:	ld	e,002H
8218:62373+14	732F  DD216F40		ld	ix,ERROR
8219:62387+17	7333  CD5901  	A731E:	call	CALBAS
8220:62404+4	7336  FB      		ei
8221:62408+10	7337  C9      		ret
8222:				;
8223:				;
8224:62418+4	7338  FB      	A7323:	ei
8225:62422+11	7339  E5      		push	hl
8226:62433+11	733A  D5      		push	de
8227:62444+13	733B  3A48F3  		ld	a,(YF348)
8228:62457+4	733E  87      		add	a,a
8229:62461+10	733F  211000  		ld	hl,16
8230:62471+7+5	7342  3002    		jr	nc,A7331
8231:62478+7	7344  2E18    		ld	l,16+8
8232:62485+11	7346  39      	A7331:	add	hl,sp
8233:62496+7	7347  5E      		ld	e,(hl)
8234:62503+6	7348  23      		inc	hl
8235:62509+7	7349  56      		ld	d,(hl)
8236:62516+11	734A  E5      		push	hl
8237:62527+10	734B  21956E  		ld	hl,CALBSV+3
8238:62537+11	734E  E7      		rst	020H
8239:62548+10	734F  E1      		pop	hl
8240:62558+7+5	7350  280D    		jr	z,A734A
8241:62565+11	7352  E5      		push	hl
8242:62576+10	7353  21C96E  		ld	hl,CALBLD+3
8243:62586+11	7356  E7      		rst	020H
8244:62597+10	7357  E1      		pop	hl
8245:62607+7+5	7358  200B    		jr	nz,A7350
8246:62614+10	735A  1177F3  		ld	de,XF377
8247:62624+12	735D  1803    		jr	A734D
8248:				;
8249:62636+10	735F  117AF3  	A734A:	ld	de,XF37A
8250:62646+7	7362  72      	A734D:	ld	(hl),d
8251:62653+6	7363  2B      		dec	hl
8252:62659+7	7364  73      		ld	(hl),e
8253:62666+10	7365  D1      	A7350:	pop	de
8254:62676+10	7366  E1      		pop	hl
8255:62686+4	7367  7B      		ld	a,e
8256:62690+7	7368  FE02    		cp	002H
8257:62697+5+6	736A  D8      		ret	c
8258:62702+7	736B  7E      		ld	a,(hl)
8259:62709+7	736C  FE3A    		cp	":"
8260:62716+7+5	736E  28B4    		jr	z,A730F
8261:62723+6	7370  23      		inc	hl
8262:62729+7	7371  7E      		ld	a,(hl)
8263:62736+7	7372  FE3A    		cp	":"
8264:62743+6	7374  2B      		dec	hl
8265:62749+5+6	7375  C0      		ret	nz
8266:62754+17	7376  CD9573  		call	A7380
8267:62771+7	7379  7E      		ld	a,(hl)
8268:62778+7	737A  E6DF    		and	0DFH
8269:62785+7	737C  D640    		sub	040H
8270:62792+11	737E  E5      		push	hl
8271:62803+10	737F  2147F3  		ld	hl,YF347
8272:62813+7	7382  BE      		cp	(hl)
8273:62820+10	7383  E1      		pop	hl
8274:62830+7+5	7384  2803    		jr	z,A7374
8275:62837+10	7386  D2B171  		jp	nc,A719C
8276:62847+6	7389  23      	A7374:	inc	hl
8277:62853+6	738A  23      		inc	hl
8278:62859+4	738B  1D      		dec	e
8279:62863+4	738C  1D      		dec	e
8280:62867+11	738D  D5      		push	de
8281:62878+4	738E  1C      		inc	e
8282:62882+10	738F  D1      		pop	de
8283:62892+10	7390  C9      		ret
8284:				;
8285:				;
8286:62902+4	7391  FB      	A737C:	ei
8287:62906+7	7392  3E00    		ld	a,000H
8288:62913+10	7394  C9      		ret
8289:				;
8290:62923+4	7395  FB      	A7380:	ei
8291:62927+11	7396  E5      		push	hl
8292:62938+11	7397  F5      		push	af
8293:62949+13	7398  3A48F3  		ld	a,(YF348)
8294:62962+4	739B  87      		add	a,a
8295:62966+10	739C  210C00  		ld	hl,0000CH
8296:62976+7+5	739F  3002    		jr	nc,A738E
8297:62983+7	73A1  2E14    		ld	l,014H
8298:62990+11	73A3  39      	A738E:	add	hl,sp
8299:63001+10	73A4  368B    		ld	(hl),LOW RETRTN
8300:63011+6	73A6  23      		inc	hl
8301:63017+10	73A7  36F3    		ld	(hl),HIGH RETRTN
8302:63027+10	73A9  F1      		pop	af
8303:63037+10	73AA  E1      		pop	hl
8304:63047+10	73AB  C9      		ret
8305:				
8306:				;	  Subroutine BDOS 09 (output string)
8307:				;	     Inputs  DE = adres of string
8308:				;	     Outputs ________________________ 
8309:				;	     Remark  is copied to 0F1C9H
8310:				
8311:63057+17	73AC  CD6BF3  	A7397:	call	XF36B			; enable ram on page 1
8312:63074+7	73AF  1A      		ld	a,(de)
8313:63081+17	73B0  CD68F3  		call	XF368			; enable system diskrom
8314:63098+6	73B3  13      		inc	de
8315:63104+7	73B4  FE24    		cp	'$'
8316:63111+5+6	73B6  C8      		ret	z			; end of string, quit
8317:63116+17	73B7  CDA853  		call	A53A8			; console output
8318:63133+12	73BA  18F0    		jr	A7397			; next
8319:				
8320:				;	  Subroutine XFER (transfer)
8321:				;	     Inputs  HL = source adres, DE = destition adres, BC = size
8322:				;	     Outputs ________________________ 
8323:				;	     Remark  is copied to 0F1D9H
8324:				
8325:63145+17	73BC  CD6BF3  		call	XF36B			; enable ram on page 1
8326:63162+16+5	73BF  EDB0    		ldir				; transfer
8327:63178+17	73C1  CD68F3  		call	XF368			; enable system diskrom
8328:63195+10	73C4  C9      		ret
8329:				
8330:				;	  Subroutine Warm Boot
8331:				;	     Inputs  ________________________
8332:				;	     Outputs ________________________ 
8333:				;	     Remark  is copied to 0F1E2H
8334:				
8335:63205+17	73C5  CD6BF3  		call	XF36B			; enable ram on page 1
8336:63222+10	73C8  C30000  		jp	0			; WBOOT
8337:				
8338:				;	  Subroutine start handler in DOS memory
8339:				;	     Inputs  HL = adres of pointer
8340:				;	     Outputs ________________________ 
8341:				;	     Remark  is copied to 0F1E8H
8342:				
8343:63232+10	73CB  11DEF1  		ld	de,XF1D9+5
8344:63242+11	73CE  D5      		push	de			; on return, enable system diskrom
8345:63253+7	73CF  5E      		ld	e,(hl)
8346:63260+6	73D0  23      		inc	hl
8347:63266+7	73D1  56      		ld	d,(hl)			; get pointer
8348:63273+4	73D2  EB      		ex	de,hl
8349:63277+17	73D3  CD6BF3  		call	XF36B			; enable ram on page 1
8350:63294+4	73D6  E9      		jp	(hl)			; start it
8351:				
8352:				;	  Subroutine validate FCB filename
8353:				;	     Inputs  HL = adres of pointer
8354:				;	     Outputs ________________________ 
8355:				;	     Remark  is copied to 0F1F4H
8356:				
8357:63298+10	73D7  C30456  		jp	A5604
8358:				
8359:				;	  Data       table with reserved filenames (devicenames)
8360:				;
8361:				;	     Remark  is copied to 0F1F7H
8362:				
8363:     -	73DA  50524E20		defb	"PRN "
8364:     -	73DE  4C535420		defb	"LST "
8365:     -	73E2  4E554C20		defb	"NUL "
8366:     -	73E6  41555820		defb	"AUX "
8367:     -	73EA  434F4E20		defb	"CON "
8368:				
8369:				;	  Data       fake direntry for devices
8370:				;
8371:				;	     Remark  is copied to 0F20BH
8372:				
8373:     -	73EE  20202020		defb	"           "
	      20202020
	      202020
8374:     -	73F9  80      		defb	10000000b
8375:     -	73FA          		defs	10
8376:     -	7404  0000    		defw	0
8377:     -	7406  0000    		defw	0
8378:     -	7408  0000    		defw	0
8379:     -	740A  00000000		defw	0,0
8380:				
8381:     -	740E  1F1C1F1E		defb	31,28,31,30,31,30,31,31,30,31,30,31
	      1F1E1F1F
	      1E1F1E1F
8382:				
8383:     -	741A          	DSKDRV:
8384:				
8385:					INCLUDE	msxpi-driver.mac
**** msxpi-driver.mac ****
   1:				;|===========================================================================|
   2:				;|                                                                           |
   3:				;| MSXPi Interface                                                           |
   4:				;|                                                                           |
   5:				;| Version : 0.8.1                                                           |
   6:				;|                                                                           |
   7:				;| Copyright (c) 2015-2016 Ronivon Candido Costa (ronivon@outlook.com)       |
   8:				;|                                                                           |
   9:				;| All rights reserved                                                       |
  10:				;|                                                                           |
  11:				;| Redistribution and use in source and compiled forms, with or without      |
  12:				;| modification, are permitted under GPL license.                            |
  13:				;|                                                                           |
  14:				;|===========================================================================|
  15:				;|                                                                           |
  16:				;| This file is part of MSXPi Interface project.                             |
  17:				;|                                                                           |
  18:				;| MSX PI Interface is free software: you can redistribute it and/or modify  |
  19:				;| it under the terms of the GNU General Public License as published by      |
  20:				;| the Free Software Foundation, either version 3 of the License, or         |
  21:				;| (at your option) any later version.                                       |
  22:				;|                                                                           |
  23:				;| MSX PI Interface is distributed in the hope that it will be useful,       |
  24:				;| but WITHOUT ANY WARRANTY; without even the implied warranty of            |
  25:				;| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
  26:				;| GNU General Public License for more details.                              |
  27:				;|                                                                           |
  28:				;| You should have received a copy of the GNU General Public License         |
  29:				;| along with MSX PI Interface.  If not, see <http://www.gnu.org/licenses/>. |
  30:				;|===========================================================================|
  31:				;
  32:				; MSXPi Driver v0.8.1 (2017,2018)
  33:				
  34:     -	0000          	TEXTTERMINATOR EQU 0
  35:     -	0005          	BDOS           EQU 5
  36:     -	0002          	BUSYretRIES    EQU 2
  37:     -	0006          	CONTROL_PORT   EQU $06
  38:     -	0007          	DATA_PORT      EQU $07
  39:     -	00FF          	RESET          EQU $FF
  40:				
  41:     -	00A0          	STARTTRANSFER  EQU $A0
  42:     -	00A1          	SENDNEXT       EQU $A1
  43:     -	00A2          	ENDOFTRANSFER  EQU $A2
  44:     -	00AA          	READY          EQU $AA
  45:     -	00AD          	ABORT          EQU $AD
  46:     -	00AE          	BUSY           EQU $AE
  47:				
  48:     -	00E0          	RC_SUCCESS     EQU $E0
  49:     -	00E2          	RC_CRCERROR    EQU $E2
  50:     -	00E5          	RC_OUTOFSYNC   EQU $E5
  51:				
  52:     -	0159          	CALBAS	EQU     0159H
  53:     -	4666          	CHRGTR  EQU     04666H
  54:     -	00A2          	CHPUT   EQU     0A2H
  55:     -	F34D          	D.F34D	EQU     0F34DH
  56:				
  57:				; symbols which can be used from the kernel
  58:				
  59:				; errorcodes used by DSKIO, DSKCHG and GETDPB
  60:				;
  61:				; 0	write protect error
  62:				; 2	not ready error
  63:				; 4	data (crc) error
  64:				; 6	seek error
  65:				; 8	record not found error
  66:				; 10	write fault error
  67:				; 12	other error
  68:				
  69:				; errorcodes used by DSKFMT
  70:				;
  71:				; 0	write protect error
  72:				; 2	not ready error
  73:				; 4	data (crc) error
  74:				; 6	seek error
  75:				; 8	record not found error
  76:				; 10	write fault error
  77:				; 12	bad parameter
  78:				; 14	insufficient memory
  79:				; 16	other error
  80:				
  81:     -	0001          	MYSIZE		equ	1		; Size of environment
  82:     -	0200          	SECLEN		equ	512		; Size of biggest sector
  83:				
  84:				; INIHRD
  85:				;
  86:				; Input:	None
  87:				; Output:	None
  88:				; Changed:	af,bc,de,hl,IX,IY may be affected
  89:				
  90:				; Remark: This i called twice. I distinguish the 1st and 2nd verifyig reggister A.
  91:				; A = #40 in first call, and #80 in second all.
  92:     -	741A          	INIHRD:
  93:63308+7	741A  3E80    	        ld      a,$80
  94:63315+4	741C  BC      	        cp      h
  95:63319+5+6	741D  C8      	        ret     z
  96:63324+10	741E  21CF76  	        ld      hl,MSXPIVERSION
  97:63334+17	7421  CDAF79  	        call    PRINT
  98:63351+10	7424  219677  	        ld      hl,PIWAITMSG
  99:63361+17	7427  CDAF79  	        call    PRINT
 100:63378+17	742A  CD6274  	        call    PI_WAITBOOT
 101:63395+5+6	742D  D8      			ret     c
 102:				
 103:				; Always initialize all disk drives
 104:				; Actually, call INIHRD 4 times, but this version only implements 2 drives
 105:				; This limitation is set in the Server App. Settig to more drives causes some MSX to hang.
 106:63400+4	742E  AF      			xor 	a
 107:63404+17	742F  CDFA74  			call	DSKIO_SECTINFO
 108:63421+17	7432  CD5874  			call	INIHRD_PI
 109:				; Now check if user want a single drive (CTRL pressed)
 110:63438+17	7435  CDBE76  			call    CHECK_CTRL
 111:63455+5+6	7438  D8      			ret     c
 112:				
 113:				; Initialize all drives
 114:63460+7	7439  3E01    			ld      a,1
 115:63467+17	743B  CDFA74  			call	DSKIO_SECTINFO
 116:63484+17	743E  CD5874  			call	INIHRD_PI
 117:63501+7	7441  3E02    			ld      a,2
 118:63508+17	7443  CDFA74  			call	DSKIO_SECTINFO
 119:63525+17	7446  CD5874  			call	INIHRD_PI
 120:63542+7	7449  3E03    	        ld      a,3
 121:63549+17	744B  CDFA74  			call	DSKIO_SECTINFO
 122:63566+17	744E  CD5874  			call	INIHRD_PI
 123:63583+10	7451  C9      	        ret
 124:				
 125:     -	7452  494E4948	INIHRDMSG: DB "INIHRD"	
	      5244
 126:     -	7458          	INIHRD_PI:
 127:63593+10	7458  115274  			ld		de,INIHRDMSG
 128:63603+10	745B  010600  			ld		bc,6
 129:63613+17	745E  CD1578  			calL	SENDPICMD
 130:63630+10	7461  C9      			ret
 131:				
 132:				;-----------------------
 133:				; PI_WAITBOOT          |
 134:				;-----------------------
 135:     -	7462          	PI_WAITBOOT:
 136:63640+7	7462  060A    	        ld      b,10
 137:				
 138:     -	7464          	PI_WAITBOOT1:
 139:63647+7	7464  3E2E    	        ld      a,'.'
 140:63654+17	7466  CDA200  	        call    CHPUT
 141:63671+17	7469  CDEB77  	        call    SYNCH
 142:63688+5+6	746C  D0      	        ret     nc
 143:63693+11	746D  C5      	        push    bc
 144:63704+17	746E  CDAD76  	        call    CHECK_ESC
 145:63721+10	7471  C1      	        pop     bc
 146:63731+5+6	7472  D8      	        ret		c
 147:				; Pi responded
 148:63736+8+5	7473  10EF    	        djnz    PI_WAITBOOT1
 149:				; Pi did not respond
 150:63744+4	7475  37      	        scf
 151:63748+10	7476  C9      	        ret
 152:				
 153:				; DRIVES
 154:				;
 155:				; Input: 	F	Zx set if to return physical drives
 156:				;			    Zx reset if to return at least 2 drives, if only one
 157:				;			  physical drive it becomes a phantom drive
 158:				; Output:	L	number of drives
 159:				; Changed:	F,hl,IX,IY may be affected
 160:				;
 161:				; Remark:	DOS1 does not handle L=0 correctly. It hangs the computer upon boot if L = 0.
 162:				; During boot this is called twice, with BC = FB21 and then BC = FB23.
 163:				; This
 164:				
 165:     -	7477  44524956	DRIVESMSG: DB  "DRIVES"
	      4553
 166:     -	747D          	DRIVES:
 167:63758+11	747D  F5      	    	push    af
 168:63769+11	747E  C5      			push	bc
 169:63780+11	747F  D5      			push    de
 170:63791+10	7480  117774  			ld		de,DRIVESMSG
 171:63801+10	7483  010600  			ld		bc,6
 172:63811+17	7486  CD1578  			call	SENDPICMD
 173:63828+7	7489  3EA1    			ld		a,SENDNEXT
 174:63835+17	748B  CD867A  			call	PIEXCHANGEBYTE
 175:				; Is it zero? MSXDOS1 dont like it.
 176:63852+7	748E  2E01    	        ld      l,1
 177:63859+7+5	7490  3806    	        jr      c,DRIVES2
 178:63866+4	7492  B7      			or		a
 179:63870+7+5	7493  2002    			jr		nz,DRIVES1
 180:63877+7	7495  3E01    			ld		a,1
 181:     -	7497          	DRIVES1:
 182:63884+4	7497  6F      	        ld      l,a
 183:     -	7498          	DRIVES2:
 184:63888+10	7498  D1      			pop		de
 185:63898+10	7499  C1      			pop		bc
 186:63908+10	749A  F1      			pop		af
 187:63918+10	749B  C9      			ret
 188:				
 189:				; INIENV
 190:				;
 191:				; Input: 	None
 192:				; Output:	None
 193:				; Changed:	af,bc,de,hl,IX,IY may be affected
 194:				;
 195:				; Remark:	examples installs own interrupt handler, but this is NOT required.
 196:				;		depends on the hardware if this is needed.
 197:				
 198:     -	749C          	INIENV:
 199:63928+10	749C  C9      	        ret
 200:				
 201:				;
 202:				; DSKIO
 203:				;
 204:				; Input: 	A	Drivenumber
 205:				;		F	Cx reset for read
 206:				;			Cx set for write
 207:				; 		B	number of sectors
 208:				; 		C	Media descriptor
 209:				;		de	logical sectornumber
 210:				; 		hl	transfer address
 211:				; Output:	F	Cx set for error
 212:				;			Cx reset for ok
 213:				;		A	if error, errorcode
 214:				;		B	if error, remaining sectors
 215:				; Changed:	af,bc,de,hl,IX,IY may be affected
 216:				
 217:				
 218:     -	749D  52445300	DOS_RSEC:   DB      "RDS",0
 219:     -	74A1  57525300	DOS_WSEC:   DB      "WRS",0
 220:     -	74A5          	DSKIO:
 221:63938+7+5	74A5  3028    	        jr		nc,DSKIO_READ
 222:				
 223:     -	74A7          	DSKIO_WRITE:
 224:63945+7	74A7  FE04    	        cp      4
 225:63952+10	74A9  D2F174  	        jp      nc,DSKIO_ERR1
 226:				
 227:				; save destination address and number of sectors to write
 228:63962+11	74AC  C5      	        push    bc
 229:63973+11	74AD  E5      	        push    hl
 230:63984+17	74AE  CDFA74  	        call    DSKIO_SECTINFO
 231:64001+7+5	74B1  383C    	        jr      c,DSKIO_ERR
 232:64008+10	74B3  11A174  	        ld      de,DOS_WSEC
 233:64018+10	74B6  010300  	        ld      bc,3
 234:64028+17	74B9  CD1578  	        call    SENDPICMD
 235:64045+7+5	74BC  3831    	        jr      c,DSKIO_ERR
 236:				
 237:				; source address to read sector data and number of sectors
 238:64052+10	74BE  D1      	        pop     de
 239:64062+10	74BF  C1      	        pop     bc
 240:				
 241:				; will write one sector at a time
 242:     -	74C0          	DSKIO_WRITE1:
 243:64072+11	74C0  C5      	        push    bc
 244:64083+10	74C1  010002  	        ld      bc,512
 245:64093+17	74C4  CD9E78  	        call    SECSENDDATA
 246:64110+10	74C7  C1      	        pop     bc
 247:64120+7+5	74C8  3827    	        jr      c,DSKIO_ERR1
 248:64127+8+5	74CA  10F4    	        djnz    DSKIO_WRITE1
 249:64135+4	74CC  B7      	        or      a
 250:64139+4	74CD  FB      	        ei
 251:64143+10	74CE  C9      	        ret
 252:				
 253:				; ----------------
 254:				; DSKIO_READ     |
 255:				;-----------------
 256:     -	74CF          	DSKIO_READ:
 257:64153+7	74CF  FE04    	        cp      4
 258:64160+7+5	74D1  301E    	        jr      nc,DSKIO_ERR1
 259:64167+4	74D3  F3      	        di
 260:				
 261:				; save destination address only
 262:64171+11	74D4  C5      	        push    bc
 263:64182+11	74D5  E5      	        push    hl
 264:64193+17	74D6  CDFA74  	        call    DSKIO_SECTINFO
 265:64210+7+5	74D9  3814    	        jr      c,DSKIO_ERR
 266:64217+10	74DB  119D74  	        ld      de,DOS_RSEC
 267:64227+10	74DE  010300  	        ld      bc,3
 268:64237+17	74E1  CD1578  	        call    SENDPICMD
 269:64254+7+5	74E4  3809    	        jr      c,DSKIO_ERR
 270:64261+10	74E6  D1      	        pop     de
 271:64271+17	74E7  CD7378  	        call    SECRECVDATA
 272:64288+10	74EA  C1      	        pop     bc
 273:64298+7+5	74EB  3804    	        jr      c,DSKIO_ERR1
 274:64305+4	74ED  FB      	        ei
 275:64309+10	74EE  C9      	        ret
 276:				
 277:				
 278:     -	74EF          	DSKIO_ERR:
 279:64319+10	74EF  E1      	        pop     hl
 280:64329+10	74F0  C1      	        pop     bc
 281:     -	74F1          	DSKIO_ERR1:
 282:64339+7	74F1  3E0C    	        ld      a,12
 283:64346+4	74F3  37      	        scf
 284:64350+4	74F4  FB      	        ei
 285:64354+10	74F5  C9      	        ret
 286:				
 287:				;-----------------------
 288:				; DSKIO_SECTINFO       |
 289:				;-----------------------
 290:     -	74F6  53435400	DOS_SECINFO:    DB  "SCT",0
 291:				
 292:     -	74FA          	DSKIO_SECTINFO:
 293:64364+11	74FA  F5      	        push    af
 294:64375+11	74FB  C5      	        push    bc
 295:64386+11	74FC  D5      	        push    de
 296:64397+11	74FD  E5      	        push    hl
 297:64408+10	74FE  11F674  	        LD      de,DOS_SECINFO
 298:64418+10	7501  010300  	        LD      bc,3
 299:64428+17	7504  CD1578  	        call    SENDPICMD
 300:64445+10	7507  E1      	        pop     hl
 301:64455+10	7508  D1      	        pop     de
 302:64465+10	7509  C1      	        pop     bc
 303:64475+7+5	750A  3003    	        jr		nc,DSKIO_SECTINFO1
 304:64482+10	750C  F1      	        pop     af
 305:64492+4	750D  37      	        scf
 306:64496+10	750E  C9      	        ret
 307:				
 308:     -	750F          	DSKIO_SECTINFO1:
 309:				; synchronize communication with MSX
 310:				
 311:64506+7	750F  3EA1    		ld		a,SENDNEXT
 312:64513+17	7511  CD867A  		call	PIEXCHANGEBYTE
 313:64530+7	7514  FEA1    		cp		SENDNEXT
 314:64537+7+5	7516  2803    		jr		z,DSKIO_SECTINFO2
 315:64544+10	7518  F1      		pop		af
 316:64554+4	7519  37      		scf
 317:64558+10	751A  C9      		ret
 318:				
 319:     -	751B          	DSKIO_SECTINFO2:
 320:				; send device number
 321:				
 322:64568+10	751B  F1      			pop     af
 323:64578+17	751C  CD867A  	        call    PIEXCHANGEBYTE
 324:				
 325:				; send number of sectors to read/write
 326:				
 327:64595+4	751F  78      			ld      a,b
 328:64599+17	7520  CD867A  	        call    PIEXCHANGEBYTE
 329:				
 330:				; send media decriptor
 331:				
 332:64616+4	7523  79      	        ld      a,c
 333:64620+17	7524  CD867A  	        call    PIEXCHANGEBYTE
 334:				
 335:				; send logical sectornumber (initial sector number)
 336:				
 337:64637+4	7527  7B      			ld      a,e
 338:64641+17	7528  CD867A  	        call    PIEXCHANGEBYTE
 339:64658+4	752B  7A      	        ld      a,d
 340:64662+17	752C  CD867A  	        call    PIEXCHANGEBYTE
 341:64679+10	752F  C9      	        ret
 342:				
 343:     -	7530          	DSKIORDMSG:
 344:     -	7530  44534B49	    DB      "DSKIO READ ERROR",13,10,0
	      4F205245
	      41442045
	      52524F52
	      0D0A00
 345:				
 346:				; DSKCHG
 347:				;
 348:				; Input: 	A	Drivenumber
 349:				; 		B	0
 350:				; 		C	Media descriptor
 351:				; 		hl	pointer to DPB
 352:				; Output:	F	Cx set for error
 353:				;			Cx reset for ok
 354:				;		A	if error, errorcode
 355:				;		B	if no error, disk change status
 356:				;			01 disk unchanged
 357:				;			00 unknown
 358:				;			FF disk changed
 359:				; Changed:	af,bc,de,hl,IX,IY may be affected
 360:				; Remark:	DOS1 kernel expects the DPB updated when disk change status is unknown or changed
 361:				;		DOS2 kernel does not care if the DPB is updated or not
 362:     -	7543          	DSKCHG:
 363:64689+7	7543  0600    	        ld		b,00
 364:64696+4	7545  B7      	        or		a
 365:64700+10	7546  C9      	        ret
 366:				
 367:				; Disk changed, must read sector and update DPB
 368:     -	7547          	DSKCHGDPB:
 369:64710+10	7547  C9      	        ret
 370:				
 371:				; GETDPB
 372:				;
 373:				; Input: 	A	Drivenumber
 374:				; 		B	first byte of FAT
 375:				; 		C	Media descriptor
 376:				; 		hl	pointer to DPB
 377:				; Output:	[hl+1]
 378:				;		..
 379:				;		[hl+18]	updated
 380:				; Changed:	af,bc,de,hl,IX,IY may be affected
 381:				; GETDPB
 382:				;
 383:				; Input: 	A	Drivenumber
 384:				; 		B	first byte of FAT
 385:				; 		C	Media descriptor
 386:				; 		hl	pointer to DPB
 387:				; Output:	[hl+1]
 388:				;		..
 389:				;		[hl+18]	updated
 390:				; Changed:	af,bc,de,hl,IX,IY may be affected
 391:				
 392:     -	7548          	GETDPB:
 393:64720+10	7548  C9      	        ret
 394:				
 395:     -	7549          	DpbTable:
 396:     -	7549  F8      	        db	0F8h		; Media F8
 397:     -	754A  0002    			dw	512		; 80 Tracks
 398:     -	754C  0F      			db	0Fh		; 9 sectors
 399:     -	754D  04      			db	04h		; 1 side
 400:     -	754E  01      			db	01h		; 3.5" 360 Kb
 401:     -	754F  02      			db	02h
 402:     -	7550  0100    			dw	1
 403:     -	7552  02      			db	2
 404:     -	7553  70      			db	112
 405:     -	7554  0C00    			dw	12
 406:     -	7556  6301    			dw	355
 407:     -	7558  02      			db	2
 408:     -	7559  0500    			dw	5
 409:				
 410:     -	755B  F9      			db	0F9h		; Media F9
 411:     -	755C  0002    			dw	512		; 80 Tracks
 412:     -	755E  0F      			db	0Fh		; 9 sectors
 413:     -	755F  04      			db	04h		; 2 sides
 414:     -	7560  01      			db	01h		; 3.5" 720 Kb
 415:     -	7561  02      			db	02h
 416:     -	7562  0100    			dw	1
 417:     -	7564  02      			db	2
 418:     -	7565  70      			db	112
 419:     -	7566  0E00    			dw	14
 420:     -	7568  CA02    			dw	714
 421:     -	756A  03      			db	3
 422:     -	756B  0700    			dw	7
 423:				
 424:     -	755A          	DEFDPB	equ	DpbTable+18-1
 425:				
 426:				; CHOICE
 427:				;
 428:				; Input: 	None
 429:				; Output:	hl	pointer to choice string, 0 if no choice
 430:				; Changed:	af,bc,de,hl,IX,IY may be affected
 431:				
 432:     -	756D          	CHOICE:
 433:64730+10	756D  210000  			ld		hl,0
 434:64740+10	7570  C9      			ret
 435:				
 436:				; Choices not used by MSXPi driver
 437:     -	7571  0D0A    	ChoiceStr:	db	13,10
 438:     -	7573  31202D20			db	"1 - Choice A",13,10
	      43686F69
	      63652041
	      0D0A
 439:     -	7581  32202D20			db	"2 - Choice B",13,10
	      43686F69
	      63652042
	      0D0A
 440:     -	758F  33202D20	        db	"3 - Choice C",13,10
	      43686F69
	      63652043
	      0D0A
 441:     -	759D  0D0A    			db	13,10
 442:     -	759F  00      			db	0
 443:				
 444:				; DSKFMT
 445:				;
 446:				; Input: 	A	choicecode (1-9)
 447:				;		D	drivenumber
 448:				;		hl	begin of workarea
 449:				;		bc	length of workarea
 450:				; Output:	F	Cx set for error
 451:				;			Cx reset for ok
 452:				;		A	if error, errorcode
 453:				; Changed:	af,bc,de,hl,IX,IY may be affected
 454:     -	75A0  464D5400	DSKFMTCMD:DB    "FMT",0
 455:     -	75A4          	DSKFMT:
 456:64750+11	75A4  D5      	        push    de
 457:64761+11	75A5  F5      	        push    af
 458:64772+10	75A6  010300  	        ld      bc,3
 459:64782+10	75A9  11A075  	        ld      de,DSKFMTCMD
 460:64792+17	75AC  CD1578  	        call    SENDPICMD
 461:64809+10	75AF  F1      	        pop     af
 462:64819+17	75B0  CD867A  	        call    PIEXCHANGEBYTE
 463:64836+10	75B3  D1      	        pop     de
 464:64846+4	75B4  7A      	        ld      a,d
 465:64850+17	75B5  CD867A  	        call    PIEXCHANGEBYTE
 466:64867+7	75B8  3EA2    	        ld      a,ENDOFTRANSFER
 467:64874+17	75BA  CD867A  	        call    PIEXCHANGEBYTE
 468:64891+7	75BD  FEA2    	        cp      ENDOFTRANSFER
 469:64898+5+6	75BF  C8      	        ret     Z
 470:64903+4	75C0  37      	        scf
 471:64907+7	75C1  3E0A    	        ld      a,10
 472:64914+10	75C3  C9      	        ret
 473:				
 474:				; OEMSTATEMENT
 475:				;
 476:				; Input:	hl	basicpointer
 477:				; Output:	F	Cx set if statement not recognized
 478:				;			Cx reset if statement is recognized
 479:				;		hl	basicpointer,	updated if recognized
 480:				;					unchanged if not recognized
 481:				; Changed:	af,bc,de,hl,IX,IY may be affected
 482:				
 483:     -	75C4          	OEMSTA:
 484:64924+11	75C4  E5      			push    hl
 485:64935+10	75C5  21B777  			ld      hl,STR_CALL_CMD
 486:     -	75C8          	CALL_CHECK:
 487:64945+10	75C8  1189FD  			ld      de,PROCNM
 488:     -	75CB          	CHECKCMD:
 489:64955+7	75CB  1A      	        ld      a,(de)
 490:64962+7	75CC  BE      			cp      (hl)
 491:64969+7+5	75CD  2011    			jr		nz,CHECKNEXT
 492:64976+6	75CF  13      			inc     de
 493:64982+6	75D0  23      			inc     hl
 494:64988+4	75D1  B7      			or		a
 495:64992+7+5	75D2  20F7    			jr		nz,CHECKCMD
 496:64999+7	75D4  5E      			ld		e,(hl)
 497:65006+6	75D5  23      			inc     hl
 498:65012+7	75D6  56      			ld		d,(hl)
 499:65019+17	75D7  CDED75  			call	MYCOMMAND
 500:65036+10	75DA  E1      			pop     hl
 501:65046+17	75DB  CDF075  	        call	GETPREVCHAR
 502:65063+4	75DE  B7      			or		a
 503:65067+10	75DF  C9      			ret
 504:				
 505:				; Find entry address of next command to test
 506:     -	75E0          	CHECKNEXT:
 507:65077+7	75E0  0EFF    			ld		c,0FFH
 508:65084+4	75E2  AF      			xor		a
 509:65088+16+5	75E3  EDB1    			cpir
 510:65104+6	75E5  23      			inc		hl
 511:65110+6	75E6  23      			inc		hl
 512:65116+7	75E7  BE      	        cp		(hl)
 513:65123+7+5	75E8  20DE    			jr		nz,call_CHECK	;Check next command
 514:65130+10	75EA  E1      			pop		hl
 515:65140+4	75EB  37      	        scf
 516:65144+10	75EC  C9      			ret
 517:				 
 518:     -	75ED          	MYCOMMAND:
 519:65154+11	75ED  D5      			push	de
 520:65165+10	75EE  C9      			ret
 521:				
 522:				
 523:				; MTOFF
 524:				;
 525:				; Input:	None
 526:				; Output:	None
 527:				; Changed:	af,bc,de,hl,IX,IY may be affected
 528:				
 529:     -	75EF          	DSKSTP:
 530:     -	75EF          	MTOFF:
 531:65175+10	75EF  C9      			ret
 532:				
 533:     -	75F0          	GETPREVCHAR:
 534:65185+6	75F0  2B      	        dec     hl
 535:65191+14	75F1  DD216646	        ld      IX,CHRGTR
 536:65205+10	75F5  C35901  	        jp      CALBAS
 537:				
 538:				;================================================================
 539:				; call Commands start here
 540:				; ================================================================
 541:				
 542:				;-----------------------
 543:				; call MSXPIVER        |
 544:				;-----------------------
 545:     -	75F8          	MSXPIVER:
 546:65215+10	75F8  21CF76  	        ld      hl,MSXPIVERSION
 547:65225+10	75FB  C3AF79  	        jp      PRINT
 548:				
 549:				;-----------------------
 550:				; call MSXPISTATUS     |
 551:				;-----------------------
 552:     -	75FE          	MSXPISTATUS:
 553:				
 554:				; check if Pi is responding
 555:65235+17	75FE  CD3D7A  	        call    CHKPIRDY
 556:65252+10	7601  216877  	        ld      hl,PIOFFLINE
 557:				
 558:				; Pi App is not available, print error message
 559:65262+7+5	7604  3803    	        jr      c,PRINTSTATUSMSG
 560:				
 561:				; Pi App is online
 562:65269+10	7606  217E77  	        ld      hl,PIONLINE
 563:				
 564:     -	7609          	PRINTSTATUSMSG:
 565:65279+10	7609  C3AF79  	        jp      PRINT
 566:				
 567:				;-----------------------
 568:				; call MSXPILOAD       |
 569:				;-----------------------
 570:				; Load the client to the memory address in the headers
 571:				
 572:     -	760C  706C6F61	LOADCLIENTCMD: DB "ploadbin msxpi-client.bin",0
	      6462696E
	      206D7378
	      70692D63
	      6C69656E
	      742E6269
	      6E00
 573:     -	7626          	MSXPILOAD:
 574:65289+10	7626  215177  	        ld      hl,MSXPILOADING
 575:65299+17	7629  CDAF79  	        call    PRINT
 576:65316+7	762C  3EFF    	        ld      a,RESET
 577:65323+17	762E  CD2C7A  	        call    SENDIFCMD
 578:				
 579:				; Send command LOADROM to Pi
 580:65340+10	7631  011900  	        ld      bc,25
 581:65350+10	7634  110C76  	        ld      de,LOADCLIENTCMD
 582:65360+17	7637  CD1578  	        call    SENDPICMD
 583:65377+7+5	763A  3826    	        jr		c,MSXPILOADERROR
 584:65384+17	763C  CD2D79  	        call    LOADBINPROG
 585:65401+10	763F  DA6276  	        jp      c,MSXPILOADERROR
 586:65411+11	7642  F5      	        push    af
 587:65422+11	7643  E5      	        push    hl
 588:65433+17	7644  CD6876  	        call    GETSTDOUTNULL
 589:65450+10	7647  E1      	        pop     hl
 590:65460+10	7648  F1      	        pop     af
 591:65470+7	7649  FEA2    	        cp      ENDOFTRANSFER
 592:65477+5+6	764B  C0      	        ret     nz
 593:65482+4	764C  E9      	        jp      (hl)
 594:				
 595:     -	764D  4572726F	LOADERRMSG:     DB "Error loading file",13,10,0
	      72206C6F
	      6164696E
	      67206669
	      6C650D0A
	      00
 596:     -	7662          	MSXPILOADERROR:
 597:65486+10	7662  214D76  	        ld      hl,LOADERRMSG
 598:65496+10	7665  C3AF79  	        jp      PRINT
 599:				
 600:     -	7668          	GETSTDOUTNULL:
 601:65506+10	7668  110000  	        ld      de,$0000
 602:65516+17	766B  CD1978  	        call    RECVDATABLOCK
 603:65533+10	766E  C9      	        ret
 604:				
 605:				;-----------------------
 606:				; call GETPOINTERS      |
 607:				;-----------------------
 608:				; Return in hl the Entry address of th routine indexed in A
 609:				; Input:
 610:				;  A = Routine index
 611:				; Output:
 612:				;  A =  slot id for this ROM (to-do)
 613:				;  hl = CAll address of the given routine
 614:				; Modify: af,hl
 615:				;
 616:     -	766F          	GETPOINTERS:
 617:65543+11	766F  D5      	        push    de
 618:65554+10	7670  218176  	        ld      hl,BIOSENTRYADDR
 619:				
 620:     -	7673          	GETPOINTERS1:
 621:65564+4	7673  B7      	        or		a
 622:65568+7+5	7674  2805    	        jr		z,GETPOINTERSEXIT
 623:65575+4	7676  3D      	        dec		a
 624:65579+6	7677  23      	        inc     hl
 625:65585+6	7678  23      	        inc     hl
 626:65591+12	7679  18F8    	        jr		GETPOINTERS1
 627:				
 628:     -	767B          	GETPOINTERSEXIT:
 629:65603+7	767B  5E      	        ld		e,(hl)
 630:65610+6	767C  23      	        inc     hl
 631:65616+7	767D  66      	        ld		h,(hl)
 632:65623+4	767E  6B      	        ld		l,e
 633:65627+10	767F  D1      	        pop     de
 634:65637+10	7680  C9      	        ret
 635:				
 636:     -	7681          	BIOSENTRYADDR:  EQU     $
 637:     -	7681  F875    	        DW      MSXPIVER
 638:     -	7683  FE75    	        DW      MSXPISTATUS
 639:     -	7685  2676    	        DW      MSXPILOAD
 640:     -	7687  1978    	        DW      RECVDATABLOCK
 641:     -	7689  4378    	        DW      SENDDATABLOCK
 642:     -	768B  7378    	        DW      SECRECVDATA
 643:     -	768D  9E78    	        DW      SECSENDDATA
 644:     -	768F  CA78    	        DW      READDATASIZE
 645:     -	7691  D778    	        DW      SENDDATASIZE
 646:     -	7693  3D7A    	        DW      CHKPIRDY
 647:     -	7695  507A    	        DW      PIREADBYTE
 648:     -	7697  707A    	        DW      PIWRITEBYTE
 649:     -	7699  867A    	        DW      PIEXCHANGEBYTE
 650:     -	769B  2C7A    	        DW      SENDIFCMD
 651:     -	769D  1578    	        DW      SENDPICMD
 652:     -	769F  9579    	        DW      CHECKBUSY
 653:     -	76A1  2D79    	        DW      LOADBINPROG
 654:     -	76A3  AF79    	        DW      PRINT
 655:     -	76A5  CD79    	        DW      PRINTNLINE
 656:     -	76A7  D879    	        DW      PRINTNUMBER
 657:     -	76A9  ED79    	        DW      PRINTDIGIT
 658:     -	76AB  FC79    	        DW      PRINTPISTDOUT
 659:				
 660:				;-----------------------------------------------------------------------------
 661:				;
 662:				; Read the keyboard matrix to see if ESC is pressed
 663:				; Output: Cy = 1 if pressed, 0 otherwise
 664:				
 665:     -	76AD          	CHECK_ESC:
 666:65647+7	76AD  0607    	        ld		b,7
 667:65654+11	76AF  DBAA    	        in		a,(0AAh)
 668:65665+7	76B1  E6F0    	        and		11110000b
 669:65672+4	76B3  B0      	        or		b
 670:65676+11	76B4  D3AA    	        out		(0AAh),a
 671:65687+11	76B6  DBA9    	        in		a,(0A9h)
 672:65698+4	76B8  37      	        scf
 673:65702+8	76B9  CB57    	        bit		2,a
 674:65710+5+6	76BB  C8      	        ret		z
 675:65715+4	76BC  B7      	        or		a
 676:65719+10	76BD  C9      	        ret
 677:				
 678:     -	76BE          	CHECK_CTRL:
 679:65729+7	76BE  0606    	        ld		b,6
 680:65736+11	76C0  DBAA    	        in		a,(0AAh)
 681:65747+7	76C2  E6F0    	        and		11110000b
 682:65754+4	76C4  B0      	        or		b
 683:65758+11	76C5  D3AA    	        out		(0AAh),a
 684:65769+11	76C7  DBA9    	        in		a,(0A9h)
 685:65780+4	76C9  37      	        scf
 686:65784+8	76CA  CB4F    	        bit		1,a
 687:65792+5+6	76CC  C8      	        ret		z
 688:65797+4	76CD  B7      	        or		a
 689:65801+10	76CE  C9      	        ret
 690:				; ================================================================
 691:				; Text messages used in the loader
 692:				; ================================================================
 693:				
 694:     -	76CF          	MSXPIVERSION:
 695:     -	76CF  0D0A4D53	        DB      13,10,"MSXPi Hardware Interface v0.7",13,10
	      58506920
	      48617264
	      77617265
	      20496E74
	      65726661
	      63652076
	      302E370D
	      0A
 696:     -	76F0  4D535850	        DB      "MSXPi ROM v0.8.1",13,10
	      6920524F
	      4D207630
	      2E382E31
	      0D0A
 697:     -	7702  28632920	        DB      "(c) Ronivon Costa,2017",13,10,10
	      526F6E69
	      766F6E20
	      436F7374
	      612C3230
	      31370D0A
	      0A
 698:     -	771B  436F6D6D	        DB      "Commands available:",13,10
	      616E6473
	      20617661
	      696C6162
	      6C653A0D
	      0A
 699:     -	7730  4D535850	        DB      "MSXPILOAD MSXPISTATUS MSXPIVER",13,10
	      494C4F41
	      44204D53
	      58504953
	      54415455
	      53204D53
	      58504956
	      45520D0A
 700:     -	7750  00      	        DB      00
 701:				
 702:     -	7751          	MSXPILOADING:
 703:     -	7751  4C6F6164	        DB      "Loading MSXPi Client",13,10,0
	      696E6720
	      4D535850
	      6920436C
	      69656E74
	      0D0A00
 704:				
 705:     -	7768          	PIOFFLINE:
 706:     -	7768  436F6D6D	        DB      "Communication Error",13,10,0
	      756E6963
	      6174696F
	      6E204572
	      726F720D
	      0A00
 707:				
 708:     -	777E          	PIONLINE:
 709:     -	777E  52617370	        DB      "Rasperry PI is online",13,10,0
	      65727279
	      20504920
	      6973206F
	      6E6C696E
	      650D0A00
 710:				
 711:     -	7796          	PIWAITMSG:
 712:     -	7796  0D0A5761	        DB      13,10,"Waiting Pi boot. ESC to skip",13,10,0
	      6974696E
	      67205069
	      20626F6F
	      742E2045
	      53432074
	      6F20736B
	      69700D0A
	      00
 713:				
 714:				; ================================================================
 715:				; Table of Commands available/implemented
 716:				; ================================================================
 717:				
 718:     -	77B7          	STR_CALL_CMD:
 719:				
 720:     -	77B7  4D535850	        DB      "MSXPIVER",0
	      49564552
	      00
 721:     -	77C0  F875    	        DW      MSXPIVER
 722:				
 723:     -	77C2  4D535850	        DB      "MSXPILOAD",0
	      494C4F41
	      4400
 724:     -	77CC  2676    	        DW      MSXPILOAD
 725:				
 726:     -	77CE  4D535850	        DB      "MSXPISTATUS",0
	      49535441
	      54555300
 727:     -	77DA  FE75    	        DW      MSXPISTATUS
 728:				
 729:     -	77DC  47455450	        DB      "GETPOINTERS",0
	      4F494E54
	      45525300
 730:     -	77E8  6F76    	        DW      GETPOINTERS
 731:				
 732:     -	77EA          	ENDOFCMDS:
 733:     -	77EA  00      	        DB      00
 734:				
 735:				INCLUDE include.asm
**** include.asm ****
   1:     -	0002          	BUSYRETRIES:    EQU 2
   2:     -	0005          	GLOBALRETRIES:  EQU 5
   3:     -	00FF          	RESET:          EQU $FF
   4:				
   5:     -	00A0          	STARTTRANSFER:  EQU $A0
   6:     -	00A1          	SENDNEXT:       EQU $A1
   7:     -	00A2          	ENDTRANSFER:    EQU $A2
   8:     -	00AA          	READY:          EQU $AA
   9:     -	00AD          	ABORT:          EQU $AD
  10:     -	00AE          	BUSY:           EQU $AE
  11:				
  12:     -	00E0          	RC_SUCCESS:     EQU $E0
  13:     -	00E2          	RC_CRCERROR:    EQU $E2
  14:     -	00E5          	RC_OUTOFSYNC:   EQU $E5
  15:     -	00E6          	RC_FILENOTFOUND:EQU $E6
  16:				
  17:     -	55A8          	CALLSTAT:       EQU     $55A8
  18:     -	F55E          	INLINBUF:       EQU     $F55E
  19:     -	00B1          	INLIN:          EQU     $00B1
  20:     -	00A2          	CHPUT:          EQU     $00A2
  21:     -	009F          	CHGET:          EQU     $009F
  22:     -	006C          	INITXT:         EQU     $006C
  23:     -	FCC1          	EXPTBL:         EQU     $FCC1
  24:     -	000C          	RDSLT:          EQU     $000C
  25:     -	0014          	WRSLT:          EQU     $0014
  26:     -	001C          	CALSLT:         EQU     $001C
  27:     -	0024          	ENASLT:         EQU     $0024
  28:     -	F3DC          	CSRY:           EQU     $F3DC
  29:     -	F3DD          	CSRX:           EQU     $F3DD
  30:     -	00CC          	ERAFNK:         EQU     $00CC
  31:     -	00CF          	DSPFNK:         EQU     $00CF
  32:     -	FD89          	PROCNM:         EQU     $FD89
  33:     -	F365          	XF365:          EQU     $F365                  ; routine read primary slotregister
  34:				
  35:     -	0006          	CONTROL_PORT:   EQU $06
  36:     -	0008          	CONTROL_PORT2:  EQU $08
  37:     -	0007          	DATA_PORT:      EQU $07
  38:				
  39:     -	0005          	BDOS:           EQU 5
  40:				
**** msxpi-driver.mac ****
 736:				INCLUDE msxpi_bios.asm
**** msxpi_bios.asm ****
   1:				;|===========================================================================|
   2:				;|                                                                           |
   3:				;| MSXPi Interface                                                           |
   4:				;|                                                                           |
   5:				;| Version : 0.8                                                             |
   6:				;|                                                                           |
   7:				;| Copyright (c) 2015-2016 Ronivon Candido Costa (ronivon@outlook.com)       |
   8:				;|                                                                           |
   9:				;| All rights reserved                                                       |
  10:				;|                                                                           |
  11:				;| Redistribution and use in source and compiled forms, with or without      |
  12:				;| modification, are permitted under GPL license.                            |
  13:				;|                                                                           |
  14:				;|===========================================================================|
  15:				;|                                                                           |
  16:				;| This file is part of MSXPi Interface project.                             |
  17:				;|                                                                           |
  18:				;| MSX PI Interface is free software: you can redistribute it and/or modify  |
  19:				;| it under the terms of the GNU General Public License as published by      |
  20:				;| the Free Software Foundation, either version 3 of the License, or         |
  21:				;| (at your option) any later version.                                       |
  22:				;|                                                                           |
  23:				;| MSX PI Interface is distributed in the hope that it will be useful,       |
  24:				;| but WITHOUT ANY WARRANTY; without even the implied warranty of            |
  25:				;| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
  26:				;| GNU General Public License for more details.                              |
  27:				;|                                                                           |
  28:				;| You should have received a copy of the GNU General Public License         |
  29:				;| along with MSX PI Interface.  If not, see <http://www.gnu.org/licenses/>. |
  30:				;|===========================================================================|
  31:				;
  32:				; File history :
  33:				; 0.8    : Re-worked protocol as protocol-v2:
  34:				;          RECVDATABLOCK, SENDDATABLOCK, SECRECVDATA, SECSENDDATA,CHKBUSY
  35:				;          Moved to here various routines from msxpi_api.asm
  36:				; 0.7    : Replaced CHKPIRDY retries to $FFFF
  37:				;          Removed the RESET when PI is not responding. This is now responsability
  38:				;           of the calling function, which might opt to do something else.
  39:				; 0.6c   : Initial version commited to git
  40:				;
  41:				
  42:				; Inlude file for other sources in the project
  43:				
  44:				;-----------------------
  45:				; SYNCH                |
  46:				;-----------------------
  47:     -	77EB          	SYNCH:
  48:65811+11	77EB  C5      	            push    bc
  49:65822+11	77EC  D5      	            push    de
  50:65833+7	77ED  3EFF    	            ld      a,RESET
  51:65840+17	77EF  CD2C7A  	            call    SENDIFCMD
  52:65857+17	77F2  CD3D7A  	            call    CHKPIRDY
  53:65874+10	77F5  010300  	            ld      bc,3
  54:65884+10	77F8  111178  	            ld      de,CHKPICMD
  55:65894+17	77FB  CD1578  	            call    SENDPICMD
  56:65911+10	77FE  D1      	            pop     de
  57:65921+10	77FF  C1      	            pop     bc
  58:65931+5+6	7800  D8      	            ret     c
  59:65936+17	7801  CD867A  	            call    PIEXCHANGEBYTE
  60:65953+5+6	7804  D8      	            ret     c
  61:65958+7	7805  FEAA    	            cp      READY
  62:65965+5+6	7807  C8      	            ret     z
  63:65970+7	7808  FEAD    	            cp      ABORT
  64:65977+4	780A  37      	            scf
  65:65981+5+6	780B  C8      	            ret     z
  66:65986+7	780C  FEA1    	            cp      SENDNEXT
  67:65993+7+5	780E  20DB    	            jr      nz, SYNCH
  68:66000+10	7810  C9      	            ret
  69:				
  70:     -	7811  53594E00	CHKPICMD:   DB      "SYN",0
  71:				
  72:				;-----------------------
  73:				; SENDPICMD            |
  74:				;-----------------------
  75:				; Send a command to Raspberry Pi
  76:				; Input:
  77:				;   de = should contain the command string
  78:				;   bc = number of bytes in the command string
  79:				; Output:
  80:				;   Flag C set if there was a communication error
  81:     -	7815          	SENDPICMD:
  82:				; Save flag C which tells if extra error information is required
  83:66010+17	7815  CD4378  			call    SENDDATABLOCK
  84:66027+10	7818  C9      	        ret
  85:				
  86:				;-----------------------
  87:				; RECVDATABLOCK        |
  88:				;-----------------------
  89:				; 21/03/2017
  90:				; Receive a number of bytes from PI
  91:				; This routine expects PI to send SENDNEXT control byte
  92:				; Input:
  93:				;   de = memory address to write the received data
  94:				; Output:
  95:				;   Flag C set if error
  96:				;   A = error code
  97:				;   de = Original address if routine finished in error,
  98:				;   de = Next current address to read if finished successfully
  99:				; -------------------------------------------------------------
 100:     -	7819          	RECVDATABLOCK:
 101:66037+17	7819  CD9579  	        call    CHECKBUSY
 102:66054+5+6	781C  D8      	        ret     c
 103:				
 104:				;Get number of bytes to transfer
 105:66059+17	781D  CDCA78  	        call    READDATASIZE
 106:				
 107:				; CLEAR CRC and save block size
 108:66076+7	7820  2600    	        ld      h,0
 109:66083+11	7822  C5      	        push    bc
 110:66094+11	7823  D5      	        push    de
 111:				
 112:     -	7824          	RECVDATABLOCK1:
 113:				; send info that msx is in transfer mode
 114:66105+7	7824  3EA1    	        ld      a,SENDNEXT
 115:66112+17	7826  CD867A  	        call    PIEXCHANGEBYTE
 116:66129+7	7829  12      	        ld      (de),a
 117:66136+4	782A  AC      	        xor     h
 118:66140+4	782B  67      	        ld      h,a
 119:66144+6	782C  13      	        inc     de
 120:66150+6	782D  0B      			dec     bc
 121:66156+4	782E  78      	        ld      a,b
 122:66160+4	782F  B1      	        or      c
 123:66164+7+5	7830  20F2    	        jr      nz,RECVDATABLOCK1
 124:				
 125:				; Now exchange CRC
 126:				
 127:66171+4	7832  7C      	        ld      a,h
 128:66175+17	7833  CD867A  	        call    PIEXCHANGEBYTE
 129:				
 130:				; Compare CRC received with CRC calcualted
 131:				
 132:66192+4	7836  BC      	        cp      h
 133:66196+7+5	7837  2004    	        jr      nz,RECVDATABLOCK_CRCERROR
 134:				
 135:				; Discard de, because we want to return current memory address
 136:				
 137:66203+10	7839  F1      	        pop     af
 138:				
 139:				;Return number of bytes read
 140:				
 141:66213+10	783A  C1      	        pop     bc
 142:66223+4	783B  B7      	        or      a
 143:66227+10	783C  C9      	        ret
 144:				
 145:				; Return de to original value and flag error
 146:     -	783D          	RECVDATABLOCK_CRCERROR:
 147:66237+10	783D  D1      	        pop     de
 148:66247+10	783E  C1      	        pop     bc
 149:66257+7	783F  3EE2    	        ld      a,RC_CRCERROR
 150:66264+4	7841  37      	        scf
 151:66268+10	7842  C9      	        ret
 152:				
 153:				;-------------------
 154:				; SENDDATABLOCK    |
 155:				;-------------------
 156:				; 21/03/2017
 157:				; Send a number of bytes to MSX
 158:				; This routine expects PI to send SENDNEXT control byte
 159:				; Input:
 160:				;   bc = number of byets to send
 161:				;   de = memory to start reading data
 162:				; Output:
 163:				;   Flag C set if error
 164:				;   A = error code
 165:				;   de = Original address if routine finished in error,
 166:				;   de = Next current address to read if finished successfully
 167:				; -------------------------------------------------------------
 168:     -	7843          	SENDDATABLOCK:
 169:66278+17	7843  CD9579  	        call    CHECKBUSY
 170:66295+5+6	7846  D8      	        ret     c
 171:				
 172:				; MSX is synced with PI, then send size of block to transfer
 173:66300+4	7847  79      	        ld      a,c
 174:66304+17	7848  CD707A  	        call    PIWRITEBYTE
 175:66321+4	784B  78      	        ld      a,b
 176:66325+17	784C  CD707A  	        call    PIWRITEBYTE
 177:				
 178:				; clear H to calculate CRC using simple xor oepration
 179:66342+7	784F  2600    	        ld      h,0
 180:66349+11	7851  D5      	        push    de
 181:				
 182:				; loop sending bytes until bc is zero
 183:     -	7852          	SENDDATABLOCK1:
 184:66360+7	7852  1A      	        ld      a,(de)
 185:66367+4	7853  6F      	        ld      l,a
 186:66371+4	7854  AC      	        xor     h
 187:66375+4	7855  67      	        ld      h,a
 188:66379+4	7856  7D      	        ld      a,l
 189:66383+17	7857  CD707A  	        call    PIWRITEBYTE
 190:66400+6	785A  13      	        inc     de
 191:66406+6	785B  0B      	        dec     bc
 192:66412+4	785C  78      	        ld      a,b
 193:66416+4	785D  B1      	        or      c
 194:66420+7+5	785E  20F2    	        jr      nz,SENDDATABLOCK1
 195:				
 196:				; Finished sending block of data
 197:				; Now exchange CRC
 198:				
 199:66427+4	7860  7C      	        ld      a,h
 200:66431+17	7861  CD867A  	        call    PIEXCHANGEBYTE
 201:				
 202:				; Compare CRC received with CRC calcualted
 203:				
 204:66448+4	7864  BC      	        cp      h
 205:66452+7+5	7865  2003    	        jr      nz,SENDDATABLOCK_CRCERROR
 206:				
 207:				; Discard de, because we want to return current memory address
 208:66459+10	7867  F1      	        pop     af
 209:66469+4	7868  B7      	        or      a
 210:66473+10	7869  C9      	        ret
 211:				
 212:				; Return de to original value and flag error
 213:     -	786A          	SENDDATABLOCK_CRCERROR:
 214:66483+10	786A  D1      	        pop     de
 215:66493+7	786B  3EE2    	        ld      a,RC_CRCERROR
 216:66500+4	786D  37      	        scf
 217:66504+10	786E  C9      	        ret
 218:				
 219:				; Return de to original value and flag error
 220:     -	786F          	SENDDATABLOCK_OFFSYNC:
 221:66514+7	786F  3EE5    	        ld      a,RC_OUTOFSYNC
 222:66521+4	7871  37      	        scf
 223:66525+10	7872  C9      	        ret
 224:				
 225:				;-------------------
 226:				; SECRECVDATA      |
 227:				;-------------------
 228:				; 21/03/2017
 229:				; Read data in 512 bytes blocks
 230:				; This routine expects PI to send SENDNEXT control byte
 231:				; Input:
 232:				;   de = memory address to store data
 233:				; Output:
 234:				;   Flag C set if error
 235:				; -------------------------------------------------------------
 236:     -	7873          	SECRECVDATA:
 237:66535+17	7873  CD9579  	        call    CHECKBUSY
 238:66552+5+6	7876  D8      	        ret     c
 239:				
 240:				;Get number of bytes to transfer
 241:66557+17	7877  CDCA78  	        call    READDATASIZE
 242:				
 243:     -	787A          	SECRECVDATA0:
 244:				; save remaining bytes qty
 245:66574+11	787A  C5      	        push    bc
 246:66585+7	787B  3E05    	        ld      a,GLOBALRETRIES
 247:     -	787D          	SECRECVDATARETRY:
 248:				; retries
 249:66592+11	787D  F5      	        push    af
 250:66603+11	787E  D5      	        push    de
 251:66614+17	787F  CD1978  	        call    RECVDATABLOCK
 252:66631+7+5	7882  3008    	        jr      nc,SECRECVDATA1
 253:66638+10	7884  D1      	        pop     de
 254:66648+10	7885  F1      	        pop     af
 255:66658+4	7886  3D      	        dec     a
 256:66662+7+5	7887  20F4    	        jr      nz,SECRECVDATARETRY
 257:				
 258:     -	7889          	SECRECVDATAERR:
 259:66669+10	7889  F1      	        pop     af
 260:66679+4	788A  37      	        scf
 261:66683+10	788B  C9      	        ret
 262:				
 263:     -	788C          	SECRECVDATA1:
 264:66693+10	788C  F1      	        pop     af
 265:66703+10	788D  F1      	        pop     af
 266:				;get remaining bytes to transfer
 267:66713+10	788E  E1      	        pop     hl
 268:66723+10	788F  010002  	        ld      bc,512
 269:66733+15	7892  ED42    	        sbc     hl,bc
 270:66748+7+5	7894  3806    	        jr      c,SECRECVDATAEND
 271:66755+7+5	7896  2804    	        jr      z,SECRECVDATAEND
 272:66762+4	7898  44      	        ld      b,h
 273:66766+4	7899  4D      	        ld      c,l
 274:66770+12	789A  18DE    	        jr      SECRECVDATA0
 275:				
 276:				; File load successfully.
 277:				; Return C reseted, and A = filetype
 278:     -	789C          	SECRECVDATAEND:
 279:66782+4	789C  B7      	        or      a               ;reset c flag
 280:66786+10	789D  C9      	        ret
 281:				
 282:				;-------------------
 283:				; SECSENDDATA      |
 284:				;-------------------
 285:				; 21/03/2017
 286:				; Read data in 512 bytes blocks
 287:				; This routine expects PI to send SENDNEXT control byte
 288:				; Input:
 289:				;   bc = total number of bytes to send
 290:				;   de = memory address to read data
 291:				; Output:
 292:				;   Flag C set if error
 293:				; -------------------------------------------------------------
 294:     -	789E          	SECSENDDATA:
 295:66796+17	789E  CD9579  	        call    CHECKBUSY
 296:66813+5+6	78A1  D8      	        ret     c
 297:				
 298:				;Get number of bytes to transfer
 299:66818+17	78A2  CDD778  	        call    SENDDATASIZE
 300:66835+5+6	78A5  D8      	        ret     c
 301:				
 302:     -	78A6          	SECSENDDATA0:
 303:				; save remaining bytes qty
 304:66840+11	78A6  C5      	        push    bc
 305:66851+7	78A7  3E05    	        ld      a,GLOBALRETRIES
 306:     -	78A9          	SECSENDDATARETRY:
 307:				; retries
 308:66858+11	78A9  F5      	        push    af
 309:66869+11	78AA  D5      	        push    de
 310:66880+17	78AB  CD4378  	        call    SENDDATABLOCK
 311:66897+7+5	78AE  3008    	        jr      nc,SECSENDDATA1
 312:66904+10	78B0  D1      	        pop     de
 313:66914+10	78B1  F1      	        pop     af
 314:66924+4	78B2  3D      	        dec     a
 315:66928+7+5	78B3  20F4    	        jr      nz,SECSENDDATARETRY
 316:				
 317:     -	78B5          	SECSENDDATAERR:
 318:66935+10	78B5  F1      	        pop     af
 319:66945+4	78B6  37      	        scf
 320:66949+10	78B7  C9      	        ret
 321:				
 322:     -	78B8          	SECSENDDATA1:
 323:66959+10	78B8  F1      	        pop     af
 324:66969+10	78B9  F1      	        pop     af
 325:				;get remaining bytes to transfer
 326:66979+10	78BA  E1      	        pop     hl
 327:66989+10	78BB  010002  	        ld      bc,512
 328:66999+15	78BE  ED42    	        sbc     hl,bc
 329:67014+7+5	78C0  3806    	        jr      c,SECSENDDATAEND
 330:67021+7+5	78C2  2804    	        jr      z,SECSENDDATAEND
 331:67028+4	78C4  44      	        ld      b,h
 332:67032+4	78C5  4D      	        ld      c,l
 333:67036+12	78C6  18DE    	        jr      SECSENDDATA0
 334:				
 335:				; File load successfully.
 336:				; Return C reseted, and A = filetype
 337:     -	78C8          	SECSENDDATAEND:
 338:67048+4	78C8  B7      	        or      a               ;reset c flag
 339:67052+10	78C9  C9      	        ret
 340:				
 341:     -	78CA          	READDATASIZE:
 342:67062+7	78CA  3EA1    	        ld      a,SENDNEXT
 343:67069+17	78CC  CD867A  	        call    PIEXCHANGEBYTE
 344:67086+4	78CF  4F      	        ld      c,a
 345:67090+7	78D0  3EA1    	        ld      a,SENDNEXT
 346:67097+17	78D2  CD867A  	        call    PIEXCHANGEBYTE
 347:67114+4	78D5  47      	        ld      b,a
 348:67118+10	78D6  C9      	        ret
 349:				
 350:     -	78D7          	SENDDATASIZE:
 351:67128+4	78D7  79      	        ld      a,c
 352:67132+17	78D8  CD867A  	        call    PIEXCHANGEBYTE
 353:67149+4	78DB  78      	        ld      a,b
 354:67153+17	78DC  CD867A  	        call    PIEXCHANGEBYTE
 355:67170+10	78DF  C9      	        ret
 356:				
 357:				
 358:				;-------------------
 359:				; DOWNLOADDATA     |
 360:				;-------------------
 361:				; Load data using configurable block size.
 362:				; Every call will read next block until data ends.
 363:				; Input:
 364:				;   A  = 1 to show dots for every 256 bytes
 365:				;   BC = block size to transfer
 366:				;   DE = Buffer to store data
 367:				; Output:
 368:				;   Flag C: Set if occurred and error during transfer,such as CRC
 369:				;        Z: Set if end of data
 370:				;           Unset if there is still data
 371:				;        A: Error code
 372:				;           A = error code, or
 373:				;           A = RC_SUCCESS - block transfered, there is more data
 374:				;           A = ENDTRANSFER - end of transfer, no more data.
 375:				;
 376:				; Modifies: AF,BC,DE,HL
 377:				;
 378:     -	78E0          	DOWNLOADDATA:
 379:				; save option to show dots
 380:67180+4	78E0  6F      	        ld      l,a
 381:				
 382:				; Synch start of transfer
 383:67184+7	78E1  3EA0    	        ld      a,STARTTRANSFER
 384:67191+17	78E3  CD867A  	        call    PIEXCHANGEBYTE
 385:67208+5+6	78E6  D8      	        ret     c
 386:67213+7	78E7  FEA2    	        cp      ENDTRANSFER
 387:67220+5+6	78E9  C8      	        ret     z
 388:67225+7	78EA  FEA0    	        cp      STARTTRANSFER
 389:				; Inexpected control code received.
 390:67232+5+6	78EC  C0      	        ret     nz
 391:				; Pi was not expecting this, then error
 392:				
 393:				; now send block size
 394:67237+4	78ED  79      	        ld      a,c
 395:67241+17	78EE  CD867A  	        call    PIEXCHANGEBYTE
 396:67258+4	78F1  78      	        ld      a,b
 397:67262+17	78F2  CD867A  	        call    PIEXCHANGEBYTE
 398:				
 399:				; And received Pi info if there is still data or if data has ended
 400:67279+7	78F5  3EA1    	        ld      a,SENDNEXT
 401:67286+17	78F7  CD867A  	        call    PIEXCHANGEBYTE
 402:67303+7	78FA  FEA2    	        cp      ENDTRANSFER
 403:67310+5+6	78FC  C8      	        ret     z
 404:				
 405:				; Maybe the remaining data size is smaller than a block.
 406:				; Because of that, we now read back the actual block size that should be read
 407:				
 408:67315+17	78FD  CDCA78  	        call    READDATASIZE
 409:				;       call    DBGBC
 410:				
 411:				; Initialize crc checker
 412:67332+7	7900  2600    	        ld      h,0
 413:				
 414:				; start rading the data
 415:     -	7902          	READDLOOP:
 416:67339+4	7902  7D      	        ld      a,l
 417:67343+4	7903  B7      	        or      a
 418:67347+7+5	7904  280E    	        jr      z,READDLOOP2
 419:67354+4	7906  3C      	        inc     a
 420:67358+4	7907  B7      	        or      a
 421:67362+7+5	7908  2009    	        jr      nz,READDLOOP1
 422:67369+4	790A  3C      	        inc     a
 423:67373+4	790B  6F      	        ld      l,a
 424:67377+7	790C  3E2E    	        ld      a,"."
 425:67384+17	790E  CD297A  	        call    PUTCHAR
 426:67401+12	7911  1801    	        jr      READDLOOP2
 427:     -	7913          	READDLOOP1:
 428:67413+4	7913  6F      	        ld      l,a
 429:     -	7914          	READDLOOP2:
 430:67417+7	7914  3EA1    	        ld      a,SENDNEXT
 431:67424+17	7916  CD867A  	        call    PIEXCHANGEBYTE
 432:67441+7	7919  12      	        ld      (de),a
 433:67448+4	791A  AC      	        xor     h
 434:67452+4	791B  67      	        ld      h,a
 435:67456+6	791C  13      	        inc     de
 436:67462+6	791D  0B      	        dec     bc
 437:67468+4	791E  78      	        ld      a,b
 438:67472+4	791F  B1      	        or      c
 439:67476+7+5	7920  20E0    	        jr      nz,READDLOOP
 440:				; now exchange CRC with Pi
 441:67483+4	7922  7C      	        ld      a,h
 442:67487+17	7923  CD867A  	        call    PIEXCHANGEBYTE
 443:67504+4	7926  BC      	        cp      h
 444:67508+7	7927  3EE0    	        ld      a,RC_SUCCESS
 445:67515+5+6	7929  C8      	        ret     z
 446:67520+7	792A  3EE2    	        ld      a,RC_CRCERROR
 447:67527+10	792C  C9      	        ret
 448:				
 449:				;-------------------
 450:				; LOADBINPROG      |
 451:				;-------------------
 452:				; Load a .bin program in BASIC environment
 453:     -	792D          	LOADBINPROG:
 454:67537+7	792D  3EA0    	        ld      a,STARTTRANSFER
 455:67544+17	792F  CD867A  	        call    PIEXCHANGEBYTE
 456:67561+7	7932  FEA0    	        cp      STARTTRANSFER
 457:67568+4	7934  37      	        scf
 458:67572+4	7935  3F      	        ccf
 459:67576+5+6	7936  C0      	        ret     nz
 460:				
 461:				; get filesize from PI and put in bc
 462:67581+17	7937  CDCA78  	        call    READDATASIZE
 463:				
 464:				; Read file header and check if it is BASIC binary program
 465:67598+7	793A  3EA1    	        ld      a,SENDNEXT
 466:67605+17	793C  CD867A  	       	call    PIEXCHANGEBYTE
 467:				
 468:				; Read start address
 469:67622+7	793F  3EA1    	        ld      a,SENDNEXT
 470:67629+17	7941  CD867A  	        call    PIEXCHANGEBYTE
 471:67646+4	7944  5F      	        ld      e,a
 472:67650+7	7945  3EA1    	        ld      a,SENDNEXT
 473:67657+17	7947  CD867A  	        call    PIEXCHANGEBYTE
 474:67674+4	794A  57      	        ld      d,a
 475:				
 476:				; Discard END address
 477:67678+7	794B  3EA1    	        ld      a,SENDNEXT
 478:67685+17	794D  CD867A  	        call    PIEXCHANGEBYTE
 479:67702+7	7950  3EA1    	        ld      a,SENDNEXT
 480:67709+17	7952  CD867A  	        call    PIEXCHANGEBYTE
 481:				
 482:				; Read EXEC address
 483:67726+7	7955  3EA1    	        ld      a,SENDNEXT
 484:67733+17	7957  CD867A  	        call    PIEXCHANGEBYTE
 485:67750+4	795A  6F      	        ld      l,a
 486:67754+7	795B  3EA1    	        ld      a,SENDNEXT
 487:67761+17	795D  CD867A  	        call    PIEXCHANGEBYTE
 488:67778+4	7960  67      	        ld      h,a
 489:67782+11	7961  E5      	        push    hl
 490:67793+17	7962  CD6779  	        call    LOADBINBLOCKS
 491:67810+10	7965  E1      	        pop     hl
 492:67820+10	7966  C9      	        ret
 493:				
 494:				;Read 512 bytes at a time
 495:     -	7967          	LOADBINBLOCKS:
 496:67830+11	7967  C5      	        push    bc
 497:67841+7	7968  3E05    	        ld      a,GLOBALRETRIES
 498:     -	796A          	LOADBINRETRY:
 499:67848+11	796A  F5      	        push    af
 500:67859+17	796B  CD1978  	        call    RECVDATABLOCK
 501:67876+7+5	796E  3008    	        jr      nc,LOADBIN1
 502:67883+10	7970  F1      	        pop     af
 503:67893+4	7971  3D      	        dec     a
 504:67897+7+5	7972  20F6    	        jr      nz,LOADBINRETRY
 505:67904+10	7974  C1      	        pop     bc
 506:67914+7	7975  3EE2    	        ld      a,RC_CRCERROR
 507:67921+10	7977  C9      	        ret
 508:				
 509:     -	7978          	LOADBIN1:
 510:67931+7	7978  3E2E    			ld      a,'.'
 511:67938+17	797A  CD297A  	        call    PUTCHAR
 512:67955+10	797D  F1      	        pop     af
 513:				
 514:				; Restore number of bytes left
 515:67965+10	797E  E1      	        pop     hl
 516:				
 517:67975+15	797F  ED42    	        sbc     hl,bc
 518:67990+7+5	7981  3806    	        jr      c,LOADBINEND
 519:67997+7+5	7983  2804    	        jr      z,LOADBINEND
 520:68004+4	7985  44      	        ld      b,h
 521:68008+4	7986  4D      	        ld      c,l
 522:68012+12	7987  18DE    	        jr      LOADBINBLOCKS
 523:     -	7989          	LOADBINEND:
 524:68024+7	7989  3EA2    	        ld      a,ENDTRANSFER
 525:68031+17	798B  CD867A  	        call    PIEXCHANGEBYTE
 526:68048+7	798E  FEA2    	        cp      ENDTRANSFER
 527:68055+5+6	7990  C8      	        ret     z
 528:68060+7	7991  3EE5    	        ld      a,RC_OUTOFSYNC
 529:68067+4	7993  37      	        SCF
 530:68071+10	7994  C9      	        ret
 531:				
 532:     -	7995          	CHECKBUSY:
 533:68081+11	7995  C5      	        push    bc
 534:68092+7	7996  0602    	        ld      b,BUSYRETRIES
 535:     -	7998          	CHECKBUSY1:
 536:68099+7	7998  3EA1    	        ld      a,SENDNEXT
 537:68106+17	799A  CD867A  	        call    PIEXCHANGEBYTE
 538:68123+7	799D  FEA1    	        cp      SENDNEXT
 539:68130+7+5	799F  280C    	        jr      z,CHECKBUSY3
 540:68137+7	79A1  FEAD    	        cp      ABORT
 541:68144+7+5	79A3  2807    	        jr      z,CHECKBUSY2
 542:68151+7	79A5  3EFF    	        ld      a,RESET
 543:68158+17	79A7  CD2C7A  	        call    SENDIFCMD
 544:68175+8+5	79AA  10EC    	        djnz    CHECKBUSY1
 545:     -	79AC          	CHECKBUSY2:
 546:68183+4	79AC  37      	        SCF
 547:     -	79AD          	CHECKBUSY3:
 548:68187+10	79AD  C1      	        pop     bc
 549:68197+10	79AE  C9      	        ret
 550:				
 551:				;-----------------------
 552:				; PRINT                |
 553:				;-----------------------
 554:     -	79AF          	PRINT:
 555:68207+11	79AF  F5      	        push    af
 556:68218+7	79B0  7E      	        ld      a,(hl)		;get a character to print
 557:68225+7	79B1  FE00    	        cp      TEXTTERMINATOR
 558:68232+7+5	79B3  2816    	        jr      Z,PRINTEXIT
 559:68239+7	79B5  FE0A    	        cp      10
 560:68246+7+5	79B7  200B    	        jr      nz,PRINT1
 561:68253+10	79B9  F1      	        pop     af
 562:68263+11	79BA  F5      	        push    af
 563:68274+7	79BB  3E0A    	        ld      a,10
 564:68281+7+5	79BD  3005    	        jr      nc,PRINT1
 565:68288+17	79BF  CD297A  	        call    PUTCHAR
 566:68305+7	79C2  3E0D    	        ld      a,13
 567:     -	79C4          	PRINT1:
 568:68312+17	79C4  CD297A  	        call	PUTCHAR		;put a character
 569:68329+6	79C7  23      	        INC     hl
 570:68335+10	79C8  F1      	        pop     af
 571:68345+12	79C9  18E4    	        jr      PRINT
 572:     -	79CB          	PRINTEXIT:
 573:68357+10	79CB  F1      	        pop     af
 574:68367+10	79CC  C9      	        ret
 575:				
 576:     -	79CD          	PRINTNLINE:
 577:68377+7	79CD  3E0D    	        ld      a,13
 578:68384+17	79CF  CD297A  	        call    PUTCHAR
 579:68401+7	79D2  3E0A    	        ld      a,10
 580:68408+17	79D4  CD297A  	        call    PUTCHAR
 581:68425+10	79D7  C9      	        ret
 582:				
 583:				;-----------------------
 584:				; PRINTNUMBER          |
 585:				;-----------------------
 586:     -	79D8          	PRINTNUMBER:
 587:68435+11	79D8  D5      	        push    de
 588:68446+4	79D9  5F      	        ld      e,a
 589:68450+11	79DA  D5      	        push    de
 590:68461+7	79DB  E6F0    	        AND     0F0H
 591:68468+4	79DD  1F      	        rra
 592:68472+4	79DE  1F      	        rra
 593:68476+4	79DF  1F      	        rra
 594:68480+4	79E0  1F      	        rra
 595:68484+17	79E1  CDED79  	        call    PRINTDIGIT
 596:68501+10	79E4  D1      	        pop     de
 597:68511+4	79E5  7B      	        ld      a,e
 598:68515+7	79E6  E60F    	        AND     0FH
 599:68522+17	79E8  CDED79  	        call    PRINTDIGIT
 600:68539+10	79EB  D1      	        pop     de
 601:68549+10	79EC  C9      	        ret
 602:				
 603:     -	79ED          	PRINTDIGIT:
 604:68559+7	79ED  FE0A    	        cp      0AH
 605:68566+7+5	79EF  3804    	        jr      c,PRINTNUMERIC
 606:     -	79F1          	PRINTALFA:
 607:68573+7	79F1  1637    	        ld      d,37H
 608:68580+12	79F3  1802    	        jr      PRINTNUM1
 609:				
 610:     -	79F5          	PRINTNUMERIC:
 611:68592+7	79F5  1630    	        ld      d,30H
 612:     -	79F7          	PRINTNUM1:
 613:68599+4	79F7  82      	        add     a,d
 614:68603+17	79F8  CD297A  	        call    PUTCHAR
 615:68620+10	79FB  C9      	        ret
 616:				
 617:     -	79FC          	PRINTPISTDOUT:
 618:68630+11	79FC  F5      	        push    af
 619:68641+7	79FD  3EA1    	        ld      a,SENDNEXT
 620:68648+17	79FF  CD867A  	        call    PIEXCHANGEBYTE
 621:68665+17	7A02  CDCA78  	        call    READDATASIZE
 622:68682+10	7A05  F1      	        pop     af
 623:68692+11	7A06  E5      	        push    hl
 624:68703+7	7A07  2600    	        ld      h,0
 625:     -	7A09          	PRINTPI1:
 626:68710+7	7A09  3EA1    	        ld      a,SENDNEXT
 627:68717+17	7A0B  CD867A  	        call    PIEXCHANGEBYTE
 628:68734+4	7A0E  6F      	        ld      l,a
 629:68738+4	7A0F  AC      	        xor     h
 630:68742+4	7A10  67      	        ld      h,a
 631:68746+4	7A11  7D      	        ld      a,l
 632:68750+7	7A12  FE0A    	        cp      10
 633:68757+7+5	7A14  2005    	        jr      nz,PRINTPI2
 634:68764+17	7A16  CD297A  	        call    PUTCHAR
 635:68781+7	7A19  3E0D    	        ld      a,13
 636:     -	7A1B          	PRINTPI2:
 637:68788+17	7A1B  CD297A  	        call    PUTCHAR
 638:68805+6	7A1E  0B      	        dec     bc
 639:68811+4	7A1F  78      	        ld      a,b
 640:68815+4	7A20  B1      	        or      c
 641:68819+7+5	7A21  20E6    	        jr      nz,PRINTPI1
 642:68826+4	7A23  7C      	        ld      a,h
 643:68830+17	7A24  CD867A  	        call    PIEXCHANGEBYTE
 644:68847+10	7A27  E1      	        pop     hl
 645:68857+10	7A28  C9      	        ret
**** msxpi-driver.mac ****
 737:				INCLUDE basic_stdio.asm
**** basic_stdio.asm ****
   1:				;|===========================================================================|
   2:				;|                                                                           |
   3:				;| MSXPi Interface                                                           |
   4:				;|                                                                           |
   5:				;| Version : 0.8                                                             |
   6:				;|                                                                           |
   7:				;| Copyright (c) 2015-2016 Ronivon Candido Costa (ronivon@outlook.com)       |
   8:				;|                                                                           |
   9:				;| All rights reserved                                                       |
  10:				;|                                                                           |
  11:				;| Redistribution and use in source and compiled forms, with or without      |
  12:				;| modification, are permitted under GPL license.                            |
  13:				;|                                                                           |
  14:				;|===========================================================================|
  15:				;|                                                                           |
  16:				;| This file is part of MSXPi Interface project.                             |
  17:				;|                                                                           |
  18:				;| MSX PI Interface is free software: you can redistribute it and/or modify  |
  19:				;| it under the terms of the GNU General Public License as published by      |
  20:				;| the Free Software Foundation, either version 3 of the License, or         |
  21:				;| (at your option) any later version.                                       |
  22:				;|                                                                           |
  23:				;| MSX PI Interface is distributed in the hope that it will be useful,       |
  24:				;| but WITHOUT ANY WARRANTY; without even the implied warranty of            |
  25:				;| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
  26:				;| GNU General Public License for more details.                              |
  27:				;|                                                                           |
  28:				;| You should have received a copy of the GNU General Public License         |
  29:				;| along with MSX PI Interface.  If not, see <http://www.gnu.org/licenses/>. |
  30:				;|===========================================================================|
  31:				;
  32:				; File history :
  33:				; 0.1    : initial version
  34:				
  35:68867+10	7A29  C3A200  	PUTCHAR:    jp      CHPUT
**** msxpi-driver.mac ****
 738:				INCLUDE msxpi_io.asm
**** msxpi_io.asm ****
   1:				;|===========================================================================|
   2:				;|                                                                           |
   3:				;| MSXPi Interface                                                           |
   4:				;|                                                                           |
   5:				;| Version : 0.8                                                             |
   6:				;|                                                                           |
   7:				;| Copyright (c) 2015-2016 Ronivon Candido Costa (ronivon@outlook.com)       |
   8:				;|                                                                           |
   9:				;| All rights reserved                                                       |
  10:				;|                                                                           |
  11:				;| Redistribution and use in source and compiled forms, with or without      |
  12:				;| modification, are permitted under GPL license.                            |
  13:				;|                                                                           |
  14:				;|===========================================================================|
  15:				;|                                                                           |
  16:				;| This file is part of MSXPi Interface project.                             |
  17:				;|                                                                           |
  18:				;| MSX PI Interface is free software: you can redistribute it and/or modify  |
  19:				;| it under the terms of the GNU General Public License as published by      |
  20:				;| the Free Software Foundation, either version 3 of the License, or         |
  21:				;| (at your option) any later version.                                       |
  22:				;|                                                                           |
  23:				;| MSX PI Interface is distributed in the hope that it will be useful,       |
  24:				;| but WITHOUT ANY WARRANTY; without even the implied warranty of            |
  25:				;| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
  26:				;| GNU General Public License for more details.                              |
  27:				;|                                                                           |
  28:				;| You should have received a copy of the GNU General Public License         |
  29:				;| along with MSX PI Interface.  If not, see <http://www.gnu.org/licenses/>. |
  30:				;|===========================================================================|
  31:				;
  32:				; File history :
  33:				; 0.8    : Re-worked protocol as protocol-v2:
  34:				;          RECVDATABLOCK, SENDDATABLOCK, SECRECVDATA, SECSENDDATA,CHKBUSY
  35:				;          Moved to here various routines from msxpi_api.asm
  36:				; 0.7    : Replaced CHKPIRDY retries to $FFFF
  37:				;          Removed the RESET when PI is not responding. This is now responsability
  38:				;           of the calling function, which might opt to do something else.
  39:				; 0.6c   : Initial version commited to git
  40:				;
  41:				
  42:				; Inlude file for other sources in the project
  43:				;
  44:				; ==================================================================
  45:				; BASIC I/O FUNCTIONS STARTS HERE.
  46:				; These are the lower level I/O routines available, and must match
  47:				; the I/O functions implemented in the CPLD.
  48:				; Other than using these functions you will have to create your
  49:				; own commands, using OUT/IN directly to the I/O ports.
  50:				; ==================================================================
  51:				
  52:				;-----------------------
  53:				; SENDIFCMD            |
  54:				;-----------------------
  55:     -	7A2C          	SENDIFCMD:
  56:68877+11	7A2C  C5      	            PUSH    BC
  57:68888+4	7A2D  47      				LD      B,A
  58:68892+7	7A2E  E6F0    	            AND     $F0
  59:68899+4	7A30  1F      	            RRA
  60:68903+4	7A31  1F      	            RRA
  61:68907+4	7A32  1F      	            RRA
  62:68911+4	7A33  1F      	            RRA
  63:68915+11	7A34  D308    	            OUT     (CONTROL_PORT2),A
  64:68926+4	7A36  78      	            LD      A,B
  65:68930+7	7A37  E60F    	            AND     $0F
  66:68937+11	7A39  D306    	            OUT     (CONTROL_PORT),A       ; Send data, or command
  67:68948+10	7A3B  C1      	            POP     BC
  68:68958+10	7A3C  C9      	            RET
  69:				
  70:				;-----------------------
  71:				; CHKPIRDY             |
  72:				;-----------------------
  73:     -	7A3D          	CHKPIRDY:
  74:68968+11	7A3D  C5      	            PUSH    BC
  75:68979+10	7A3E  01FFFF  	            LD      BC,0FFFFH
  76:     -	7A41          	CHKPIRDY0:
  77:68989+11	7A41  DB06    	            IN      A,(CONTROL_PORT); Verify SPIRDY register on the MSXInterface
  78:69000+7	7A43  E60F    	            AND     $0F
  79:69007+4	7A45  B7      	            OR	    A
  80:69011+7+5	7A46  2806    	            JR      Z,CHKPIRDYOK    ; RDY signal is zero, Pi App FSM is ready
  81:				                                    ; for next command/byte
  82:69018+6	7A48  0B      	            DEC     BC              ; Pi not ready, wait a little bit
  83:69024+4	7A49  78      	            LD      A,B
  84:69028+4	7A4A  B1      	            OR      C
  85:69032+7+5	7A4B  20F4    	            JR      NZ,CHKPIRDY0
  86:     -	7A4D          	CHKPIRDYNOTOK:
  87:69039+4	7A4D  37      	            SCF
  88:     -	7A4E          	CHKPIRDYOK:
  89:69043+10	7A4E  C1      	            POP     BC
  90:69053+10	7A4F  C9      	            RET
  91:				
  92:				;-----------------------
  93:				; PIREADBYTE           |
  94:				;-----------------------
  95:     -	7A50          	PIREADBYTE:
  96:69063+11	7A50  C5      	            PUSH    BC
  97:69074+17	7A51  CD3D7A  	            CALL    CHKPIRDY
  98:69091+7+5	7A54  3808    	            JR      C,PIREADBYTE1
  99:69098+4	7A56  AF      	            XOR     A                   ; do not use XOR to preserve C flag state
 100:69102+11	7A57  D308    	            OUT     (CONTROL_PORT2),A    ; Send READ command to the Interface
 101:69113+11	7A59  D306    	            OUT     (CONTROL_PORT),A    ; Send READ command to the Interface
 102:69124+17	7A5B  CD3D7A  	            CALL    CHKPIRDY            ;Wait Interface transfer data to PI and
 103:				                                        ; Pi App processing
 104:				                                        ; No RET C is required here, because IN A,(7) does not reset C flag
 105:     -	7A5E          	PIREADBYTE1:
 106:69141+11	7A5E  DB08    	            IN      A,(CONTROL_PORT2)   ; read MSB part of the byte
 107:69152+8	7A60  CB27    	            SLA     A
 108:69160+8	7A62  CB27    	            SLA     A
 109:69168+8	7A64  CB27    	            SLA     A
 110:69176+8	7A66  CB27    	            SLA     A            ; four SLA to rotate for bits to the left,
 111:				                                 ; since this data is the LSB
 112:69184+4	7A68  47      	            LD      B,A          ; save LSB to later merge with MSB
 113:69188+11	7A69  DB07    	            IN      A,(DATA_PORT); read MSB part of the byte
 114:69199+7	7A6B  E60F    	            AND     $0F          ; clean left four bits because
 115:69206+4	7A6D  B0      	            OR      B            ; Merge LSB with MSB to get the actual byte received
 116:69210+10	7A6E  C1      	            POP     BC
 117:69220+10	7A6F  C9      	            RET                  ; Return in A the byte received
 118:				
 119:				;-----------------------
 120:				; PIWRITEBYTE          |
 121:				;-----------------------
 122:     -	7A70          	PIWRITEBYTE:
 123:69230+11	7A70  C5      	            PUSH    BC
 124:69241+11	7A71  F5      	            PUSH    AF
 125:69252+17	7A72  CD3D7A  	            CALL    CHKPIRDY
 126:69269+10	7A75  F1      	            POP     AF
 127:69279+4	7A76  47      	            LD      B,A
 128:69283+7	7A77  E6F0    	            AND     $F0
 129:69290+4	7A79  1F      	            RRA
 130:69294+4	7A7A  1F      	            RRA
 131:69298+4	7A7B  1F      	            RRA
 132:69302+4	7A7C  1F      	            RRA     
 133:69306+11	7A7D  D308    	            OUT     (CONTROL_PORT2),A
 134:69317+4	7A7F  78      	            LD      A,B
 135:69321+7	7A80  E60F    	            AND     $0F
 136:69328+11	7A82  D307    	            OUT     (DATA_PORT),A       ; Send data, or command
 137:69339+10	7A84  C1      	            POP     BC
 138:69349+10	7A85  C9      	            RET
 139:				
 140:				;-----------------------
 141:				; PIEXCHANGEBYTE       |
 142:				;-----------------------
 143:     -	7A86          	PIEXCHANGEBYTE:
 144:69359+11	7A86  C5      	            PUSH    BC
 145:69370+17	7A87  CD707A  	            CALL    PIWRITEBYTE
 146:69387+17	7A8A  CD3D7A  	            CALL    CHKPIRDY
 147:69404+11	7A8D  DB08    	            IN      A,(CONTROL_PORT2)   ; read MSB part of the byte
 148:69415+8	7A8F  CB27    	            SLA     A
 149:69423+8	7A91  CB27    	            SLA     A
 150:69431+8	7A93  CB27    	            SLA     A
 151:69439+8	7A95  CB27    	            SLA     A            ; four SLA to rotate for bits to the left,
 152:				                                 ; since this data is the LSB
 153:69447+4	7A97  47      	            LD      B,A          ; save LSB to later merge with MSB
 154:69451+11	7A98  DB07    	            IN      A,(DATA_PORT); read MSB part of the byte
 155:69462+7	7A9A  E60F    	            AND     $0F          ; clean left four bits because
 156:69469+4	7A9C  B0      	            OR      B            ; Merge LSB with MSB to get the actual byte received
 157:69473+10	7A9D  C1      	            POP     BC
 158:69483+10	7A9E  C9      	            RET                  ; Return in A the byte received
**** msxpi-driver.mac ****
 739:				
**** ./ROM/src/MSX-DOS/msx-dos.mac ****
8386:				
8387:     -	7A9F .. 7FFF 00		DEFS	08000H-$,0
8388:				
8389:				
8390:     -	8000          		end



Statistics:

     4	passes
     0	jr promotions
  1277	symbols
 16368	bytes



Symbol Table:

$secbuf        =f34d     
a4022           4022     
a4025           4025     
a4029           4029     
a402d           402d     
a4030           4030     
a4034           4034     
a404b           404b     
a4078           4078     
a408f           408f     
a409b           409b     
a40a7           40a7     
a40ab           40ab     
a40b8           40b8     
a40c5           40c5     
a40f8           40f8     
a410a           410a     
a4115           4115     
a4130           4130     
a4142           4142     
a414e           414e     
a4156           4156     
a4159           4159     
a4160           4160     
a4163           4163     
a4171           4171     
a4179           4179     
a41ad           41ad     
a41b5           41b5     
a41ef           41ef     
a41f4           41f4     
a41fa           41fa     
a421a           421a     
a4221           4221     
a4247           4247     
a424f           424f     
a4252           4252     
a425a           425a     
a4262           4262     
a426b           426b     
a4298           4298     
a42a3           42a3     
a42a5           42a5     
a42b1           42b1     
a42b5           42b5     
a42bc           42bc     
a42c3           42c3     
a42d1           42d1     
a42dc           42dc     
a42f5           42f5     
a42f6           42f6     
a42fc           42fc     
a4308           4308     
a430e           430e     
a4317           4317     
a4331           4331     
a4342           4342     
a4348           4348     
a4367           4367     
a436c           436c     
a4376           4376     
a4392           4392     
a43b3           43b3     
a43bb           43bb     
a43c3           43c3     
a4403           4403     
a4408           4408     
a440b           440b     
a440e           440e     
a4427           4427     
a4435           4435     
a4439           4439     
a4457           4457     
a445e           445e     
a4462           4462     
a4471           4471     
a4488           4488     
a44ae           44ae     
a44ca           44ca     
a44d3           44d3     
a44db           44db     
a450a           450a     
a4516           4513     
a4522           451f     
a4529           4526     
a4536           4533     
a4541           453e     
a4547           4544     
a4555           4555     
a4563           4563     
a456f           456f     
a45c4           45c4     
a45cf           45cf     
a45d9           45d9     
a45e9           45e9     
a45ee           45ee     
a45fa           45fa     
a460d           460d     
a4617           4617     
a461d           461d     
a4647           4647     
a464d           464d     
a4651           4651     
a4669           4669     
a467c           467c     
a4682           4682     
a4696           4696     
a469d           469d     
a46a4           46a4     
a46ba           46ba     
a46c5           46c5     
a46d7           46d7     
a46e8           46e8     
a470a           470a     
a4720           4720     
a472d           472d     
a4743           4743     
a4748           4748     
a4755           4755     
a4775           4775     
a477d           477d     
a4783           4783     
a4788           4788     
a4790           4790     
a4793           4793     
a4799           4799     
a479c           479c     
a47b2           47b2     
a47be           47be     
a47c8           47c8     
a47d1           47d1     
a47f0           47f0     
a4813           4813     
a482d           482d     
a4844           4844     
a4857           4857     
a485a           485a     
a486a           486a     
a4871           4871     
a487d           487d     
a48a8           48a8     
a48b1           48b1     
a48b5           48b5     
a4906           4906     
a490f           490f     
a4916           4916     
a491c           491c     
a4921           4921     
a4924           4924     
a4928           4928     
a492f           492f     
a4932           4932     
a493b           493b     
a4946           4946     
a4947           4947     
a494e           494e     
a4953           4953     
a4972           4972     
a4989           4989     
a49b0           49b0     
a49b1           49b1     
a49c7           49c7     
a49cc           49cc     
a49cf           49cf     
a49d2           49d2     
a49f0           49f0     
a4a0d           4a0d     
a4a1b           4a1b     
a4a36           4a36     
a4a46           4a46     
a4a6b           4a6b     
a4a7b           4a7b     
a4aa2           4aa2     
a4aa8           4aa8     
a4ab1           4ab1     
a4ab9           4ab9     
a4abc           4abc     
a4aca           4aca     
a4ad7           4ad7     
a4ae1           4ae1     
a4af2           4af2     
a4af9           4af9     
a4b05           4b05     
a4b23           4b23     
a4b56           4b56     
a4b8e           4b8e     
a4bc1           4bc1     
a4bdc           4bdc     
a4be2           4be2     
a4c00           4c00     
a4c0f           4c0f     
a4c17           4c17     
a4c22           4c22     
a4c37           4c37     
a4c47           4c47     
a4c53           4c53     
a4c63           4c63     
a4c73           4c73     
a4c81           4c81     
a4c87           4c87     
a4c97           4c97     
a4ca3           4ca3     
a4cd6           4cd6     
a4cea           4cea     
a4cf0           4cf0     
a4d05           4d05     
a4d41           4d41     
a4d65           4d65     
a4d73           4d73     
a4d8c           4d8c     
a4dab           4dab     
a4dc6           4dc6     
a4dd6           4dd6     
a4ddd           4ddd     
a4dfa           4dfa     
a4e03           4e03     
a4e10           4e10     
a4e26           4e26     
a4e2c           4e2c     
a4e32           4e32     
a4e48           4e48     
a4e53           4e53     
a4e5e           4e5e     
a4e78           4e78     
a4ec7           4ec7     
a4eca           4eca     
a4ed2           4ed2     
a4edb           4edb     
a4ee7           4ee7     
a4eed           4eed     
a4ef8           4ef8     
a4f12           4f12     
a4f2d           4f2d     
a4f31           4f31     
a4f4e           4f4e     
a4f56           4f56     
a4f5e           4f5e     
a4f94           4f94     
a4f9b           4f9b     
a4f9e           4f9e     
a4fb8           4fb8     
a4fbb           4fbb     
a4fc4           4fc4     
a4fdc           4fdc     
a4fef           4fef     
a5000           5000     
a5006           5006     
a501e           501e     
a5043           5043     
a504e           504e     
a5053           5053     
a5058           5058     
a505d           505d     
a5081           5081     
a508b           508b     
a509f           509f     
a50b2           50b2     
a50c4           50c4     
a50c8           50c8     
a50d5           50d5     
a50e0           50e0     
a5101           5101     
a5103           5103     
a5104           5104     
a510a           510a     
a511e           511e     
a513b           513b     
a515e           515e     
a5166           5166     
a5172           5172     
a5177           5177     
a517a           517a     
a5181           5181     
a5183           5183     
a518d           518d     
a518e           518e     
a51a3           51a3     
a51a9           51a9     
a51ab           51ab     
a51ce           51ce     
a51dc           51dc     
a51fb           51fb     
a5208           5208     
a5218           5218     
a521a           521a     
a5221           5221     
a5226           5226     
a522a           522a     
a5232           5232     
a523e           523e     
a5244           5244     
a5251           5251     
a5265           5265     
a5278           5278     
a5280           5280     
a5284           5284     
a5295           5295     
a529d           529d     
a52ae           52ae     
a52b5           52b5     
a52cd           52cd     
a52df           52df     
a52e3           52e3     
a52fc           52fc     
a531a           531a     
a531f           531f     
a5336           5336     
a533f           533f     
a534b           534b     
a534c           534c     
a534f           534f     
a535d           535d     
a53a7           53a7     
a53a8           53a8     
a53d5           53d5     
a53e8           53e8     
a53f0           53f0     
a53f8           53f8     
a5405           5405     
a5412           5412     
a541d           541d     
a5431           5431     
a5437           5437     
a543c           543c     
a5445           5445     
a544e           544e     
a5454           5454     
a5462           5462     
a5465           5465     
a5466           5466     
a546e           546e     
a5474           5474     
a5475           5475     
a5496           5496     
a54c0           54c0     
a54f2           54f2     
a5505           5505     
a550b           550b     
a5515           5515     
a5521           5521     
a5523           5523     
a5529           5529     
a5530           5530     
a553c           553c     
a5552           5552     
a5579           5579     
a5588           5588     
a559a           559a     
a559d           559d     
a55d2           55d2     
a55db           55db     
a55e6           55e6     
a55ff           55ff     
a5604           5604     
a5622           5622     
a5631           5631     
a564c           564c     
a5656           5656     
a5667           5667     
a5681           5681     
a5694           5694     
a56d0           56d0     
a56d3           56d3     
a56e6           56e6     
a56ed           56ed     
a570b           570b     
a576f           576f     
a5789           5789     
a578e           578e     
a57a3           57a3     
a57a9           57a9     
a57b6           57b6     
a57bd           57bd     
a57cd           57cd     
a57d6           57d6     
a580c           580c     
a5812           5812     
a5825           5825     
a5838           5838     
a583e           583e     
a584b           584b     
a5850           5850     
a585c           585c     
a587e           587e     
a5897           5897     
a589c           589c     
a58a8           58a8     
a58f0           58f0     
a5916           5916     
a592c           592c     
a5967           5967     
a59c1           59c1     
a59cb           59cb     
a59db           59db     
a59e0           59e0     
a59e9           59e9     
a59ed           59ed     
a59f3           59f3     
a5a11           5a11     
a5a36           5a31     
a5a84           5a5d     
a5a98           5a76     
a5adb           5a7e     
a5ae7           5aa7     
a5b3a           5b3a     
a5b6e           5b6e     
a5b7d           5b7d     
a5b87           5b87     
a5b92           5b92     
a5b9c           5b9c     
a5ba0           5ba0     
a5c16           5c2b     
a5c60           5c75     
a5c62           5c77     
a5c6e           5c83     
a5c7c           5c91     
a5d3f           5d54     
a5d48           5d5d     
a5d71           5d86     
a5d9f           5db4     
a5db1           5dc6     
a5db8           5dcd     
a5db9           5dce     
a5dc3           5dd8     
a5dcb           5de0     
a5de9           5dfe     
a5df8           5e0d     
a5e0d           5e22     
a5e2c           5e41     
a5e3b           5e50     
a5e41           5e56     
a5e4d           5e62     
a5e52           5e67     
a5e5e           5e68     
a5e60           5e6a     
a5e96           5e94     
a5e9a           5e98     
a5ead           5ec2     
a5eb8           5ecd     
a5ec1           5ed6     
a5ec8           5edd     
a5ecb           5ee0     
a5ecc           5ee1     
a5ee8           5efd     
a5f3b           5f50     
a5f48           5f5d     
a5f4b           5f60     
a5f5f           5f74     
a5f86           5f9b     
a5f8c           5fa1     
a5f95           5faa     
a5f98           5fad     
a5f9e           5fb3     
a5fae           5fc3     
a5fb3           5fc8     
a5fbe           5fd3     
a5fc2           5fd7     
a5fcd           5fe2     
a5fe7           5ffc     
a5fec           6001     
a5ff1           6006     
a5ff3           6008     
a5ff6           600b     
a6012           6027     
a6027           603c     
a6033           6048     
a603d           6052     
a603f           6054     
a6052           6067     
a6054           6069     
a6055           606a     
a6067           607c     
a606f           6084     
a6075           608a     
a607b           6090     
a6086           609b     
a608c           60a1     
a6093           60a8     
a609a           60af     
a60b0           60c5     
a60b1           60c6     
a60c0           60d5     
a60de           60f3     
a60e5           60fa     
a6101           6116     
a6118           612d     
a6126           613b     
a612d           6142     
a6138           614d     
a613e           6153     
a615d           6172     
a6166           617b     
a6174           6189     
a6195           61aa     
a61f1           6206     
a61fc           6211     
a620d           6222     
a6212           6227     
a6224           6239     
a622d           6242     
a6232           6247     
a6234           6249     
a6245           625a     
a62bd           62d2     
a62c6           62db     
a62c9           62de     
a62d4           62e9     
a62d6           62eb     
a6306           631b     
a6336           634d     
a6369           6380     
a636e           6385     
a6375           638c     
a637b           64c3     
a63a1           64ac     
a63a3           64b2     
a63ad           64b6     
a63f4           6392     
a6404           63a2     
a6415           63ad     
a6425           63bd     
a6436           63c8     
a6443           63dc     
a6455           63ee     
a646c           6405     
a649c           6436     
a64a2           643c     
a64a9           6443     
a64af           6443     
a64c2           6456     
a64cd           646c     
a64dd           645e     
a64e7           6479     
a64ff           6482     
a655c           64e9     
a656f           64fc     
a6576           658b     
a658a           659f     
a658d           65a2     
a65a1           65b6     
a65a3           65b8     
a65ad           65c2     
a65c4           65d9     
a65dc           65f1     
a65e3           65f8     
a65e4           65f9     
a65ea           65ff     
a65f7           660c     
a661e           6633     
a6626           663b     
a662e           6643     
a6636           664b     
a6645           665a     
a6657           666c     
a665a           666f     
a6663           6678     
a6673           6688     
a6681           6696     
a6684           6699     
a668d           66a2     
a6698           66ad     
a669f           66b4     
a66a0           66b5     
a66a4           66b9     
a66b3           66c8     
a66cd           66e2     
a66fc           6711     
a6721           6736     
a6761           6776     
a6775           678a     
a6778           678d     
a67bf           67d4     
a67c1           67d6     
a67da           67ef     
a67ec           6801     
a67f9           680e     
a67fe           6813     
a6813           6828     
a6819           682e     
a682a           683f     
a6861           6876     
a6866           687b     
a6875           688a     
a6882           6897     
a688e           68a3     
a68a7           68bc     
a68b5           68ca     
a68cb           68e0     
a68d0           68e5     
a68f4           6909     
a690e           6923     
a6939           694e     
a69be           69d3     
a69c7           69dc     
a69cb           69e0     
a69d0           69e5     
a69d3           69e8     
a69e2           69f7     
a69e7           69fc     
a6a13           6a28     
a6a1b           6a30     
a6a23           6a38     
a6a5d           6a72     
a6a6d           6a82     
a6a70           6a85     
a6a9e           6ab3     
a6aa7           6abc     
a6abf           6ad4     
a6acb           6ae0     
a6ad0           6ae5     
a6b11           6b26     
a6b1a           6b2f     
a6b1d           6b32     
a6b4e           6b63     
a6b5c           6b71     
a6b6a           6b7f     
a6b6e           6b83     
a6b75           6b8a     
a6b96           6bab     
a6ba1           6bb6     
a6bc5           6bda     
a6bda           6bef     
a6c16           6c2b     
a6c29           6c3e     
a6c3f           6c54     
a6c49           6c5e     
a6c8b           6ca0     
a6cd6           6ceb     
a6cd7           6cec     
a6d2a           6d3f     
a6d48           6d5d     
a6d5a           6d6f     
a6d61           6d76     
a6d6a           6d7f     
a6d6f           6d84     
a6d74           6d89     
a6d77           6d8c     
a6d7d           6d92     
a6da9           6dbe     
a6daf           6dc4     
a6db2           6dc7     
a6db5           6dca     
a6dd7           6dec     
a6dda           6def     
a6ddd           6df2     
a6dfb           6e10     
a6e70           6e85     
a6e7d           6e92     
a6e88           6e9d     
a6e95           6eaa     
a6e99           6eae     
a6eae           6ec3     
a6eb3           6ec8     
a6ec2           6ed7     
a6ec3           6ed8     
a6ed8           6eed     
a6ee3           6ef8     
a6eea           6eff     
a6ef8           6f0d     
a6f00           6f15     
a6f20           6f35     
a6f51           6f66     
a6f63           6f78     
a6f72           6f87     
a6f80           6f95     
a6f89           6f9e     
a6f96           6fab     
a6f9a           6faf     
a6fa9           6fbe     
a6fb2           6fc7     
a6fbd           6fd2     
a6fd9           6fee     
a6fe5           6ffa     
a6fec           7001     
a6ff2           7007     
a6ff5           700a     
a6ffe           7013     
a7003           7018     
a7009           701e     
a700d           7022     
a7061           7076     
a7074           7089     
a707b           7090     
a70c3           70d8     
a70ca           70df     
a70d8           70ed     
a70df           70f4     
a70ef           7104     
a70fa           710f     
a7128           713d     
a713c           7151     
a7165           717a     
a716c           7181     
a717f           7194     
a7186           719b     
a718b           71a0     
a718f           71a4     
a7196           71ab     
a7199           71ae     
a719c           71b1     
a71a2           71b7     
a71a5           71ba     
a71a8           71bd     
a71ab           71c0     
a71ae           71c3     
a71b1           71c6     
a71b4           71c9     
a71b7           71cc     
a71d3           71e8     
a71e0           71f5     
a72b0           72c5     
a72bd           72d2     
a72d0           72e5     
a72da           72ef     
a72db           72f0     
a72e4           72f9     
a72e6           72fb     
a72f7           730c     
a72fa           730f     
a72fd           7312     
a7300           7315     
a7303           7318     
a7306           731b     
a7309           731e     
a730c           7321     
a730f           7324     
a7312           7327     
a7315           732a     
a7318           732d     
a731e           7333     
a7323           7338     
a7331           7346     
a734a           735f     
a734d           7362     
a7350           7365     
a7374           7389     
a737c           7391     
a7380           7395     
a738e           73a3     
a7397           73ac     
aboot           6503     
abort          =  ad     
acall           642f     
aclose         =6c1c     
adpth           6547     
aepth           6553     
aincp           655f     
alsspc         =668e     
altstr         =6627     
anpth           6538     
anxbt           6514     
ardsl           5e9a     
ardwr           63d6     
arg            =f847     
assec           64a7     
autlin         =f6ab     
awrsl           5ea0     
badres         =6f0b     
basscr         =7d2f     
bdos           =   5     
biosentryaddr  =7681     
bottom         =fc48     
breakx         =  b7     
buf            =f55e     
busy           =  ae     
busyretries    =   2     
calbas         = 159     
calbld         =6ec6     
calbsv         =6e92     
call_check      75c8     
callf          =  30     
callstat       =55a8     
calslt         =  1c     
check_ctrl      76be     
check_esc       76ad     
checkbusy       7995     
checkbusy1      7998     
checkbusy2      79ac     
checkbusy3      79ad     
checkcmd        75cb     
checknext       75e0     
chget          =  9f     
chkpicmd        7811     
chkpirdy        7a3d     
chkpirdy0       7a41     
chkpirdynotok   7a4d     
chkpirdyok      7a4e     
choice          756d     
choicestr       7571     
chput          =  a2     
chrgtr         =4666     
chsns          =  9c     
ckcntc         =  bd     
clochn         =6b24     
clprim         =f38c     
clprm1         =f398     
cnsdfg         =f3de     
cnvadr         =5432     
cnvbyt         =521f     
cnvdac         =517a     
control_port   =   6     
control_port2  =   8     
coutnl         =7323     
csng           =46ff     
csrx           =f3dd     
csry           =f3dc     
curlin         =f41c     
d.f34d         =f34d     
d635e           6375     
d6652           6667     
dac            =f7f6     
data_port      =   7     
decadd         =269a     
decdiv         =289f     
decsub         =268c     
defdpb         =755a     
device         =fd99     
disint         =ffcf     
div16           492f     
dos_rsec        749d     
dos_secinfo     74f6     
dos_wsec        74a1     
downloaddata    78e0     
dpbtable        7549     
drives          747d     
drives1         7497     
drives2         7498     
drivesmsg       7477     
dsctmp         =f698     
dskchg          7543     
dskchgdpb       7547     
dskdrv          741a     
dskfmt          75a4     
dskfmtcmd       75a0     
dskio           74a5     
dskio_err       74ef     
dskio_err1      74f1     
dskio_read      74cf     
dskio_sectinfo  74fa     
dskio_sectinfo1 750f     
dskio_sectinfo2 751b     
dskio_write     74a7     
dskio_write1    74c0     
dskiordmsg      7530     
dskstp          75ef     
dspfnk         =  cf     
enaint         =ffd4     
enaslt         =  24     
endofcmds       77ea     
endoftransfer  =  a2     
endtransfer    =  a2     
erafnk         =  cc     
error          =406f     
evadr          =542f     
evbyte         =521c     
evexpr         =4c64     
evfspc         =6a0e     
evlexp         =4c5f     
evword         =4756     
exebas         =409b     
exebld         =6ef4     
execlp         =4601     
exptbl         =fcc1     
extbio         =ffca     
filnam         =f866     
filtab         =f860     
flbmem         =fcae     
fretmp         =67d0     
fretop         =f69b     
getdpb          7548     
getpointers     766f     
getpointers1    7673     
getpointersexit 767b     
getprevchar     75f0     
getslt          5fc8     
getstdoutnull   7668     
getvar         =5ea4     
getwrk          5fd7     
getypr         =5597     
globalretries  =   5     
gtchnp         =6a6d     
h.baku         =fead     
h.binl         =fe76     
h.bins         =fe71     
h.clea         =fed0     
h.copy         =fe08     
h.cvd          =fe49     
h.cvi          =fe3f     
h.cvs          =fe44     
h.dget         =fe80     
h.dskf         =fe12     
h.dski         =fe17     
h.dsko         =fdef     
h.eof          =fea3     
h.errp         =fefd     
h.fiel         =fe2b     
h.file         =fe7b     
h.filo         =fe85     
h.form         =ffac     
h.getp         =fe4e     
h.inds         =fe8a     
h.kill         =fdfe     
h.loc          =fe99     
h.lof          =fe9e     
h.lopd         =fed5     
h.lset         =fe21     
h.mkd$         =fe3a     
h.mki$         =fe30     
h.mks$         =fe35     
h.name         =fdf9     
h.node         =feb7     
h.nofo         =fe58     
h.ntfl         =fe62     
h.nulo         =fe5d     
h.pard         =feb2     
h.phyd         =ffa7     
h.posd         =febc     
h.rset         =fe26     
h.runc         =fecb     
h.stke         =feda     
h.timi         =fd9f     
himem          =fc4a     
hokvld         =fb20     
idbyt0         =  2b     
inienv          749c     
inihrd          741a     
inihrd_pi       7458     
inihrdmsg       7452     
initxt         =  6c     
inlin          =  b1     
inlinbuf       =f55e     
kbuf           =f41f     
keyint         =  38     
kilbuf         = 156     
l625a           626f     
ldirmv         =  59     
ldirvm         =  5c     
ldosr          = 19c     
lincp          =   8     
linlen         =f3b0     
loadbin1        7978     
loadbinblocks   7967     
loadbinend      7989     
loadbinprog     792d     
loadbinretry    796a     
loadclientcmd   760c     
loaderrmsg      764d     
lptout         =  a5     
lptpos         =f415     
m.2f10         =2f10     
m.2f99         =2f99     
m.3042         =3042     
m.30d1         =30d1     
m.325c         =325c     
m.4173         =4173     
m.6e41         =6e41     
maxfil         =f85f     
memsiz         =f672     
mkptrs         =4253     
msxpiload       7626     
msxpiloaderror  7662     
msxpiloading    7751     
msxpistatus     75fe     
msxpiver        75f8     
msxpiversion    76cf     
mtoff           75ef     
mycommand       75ed     
mysize         =   1     
nevbyt         =521b     
nkeynt         =  11     
nlonly         =f87c     
nulbuf         =f862     
oemsta          75c4     
opnchn         =6afa     
outnl          =7328     
phydio         = 144     
pi_waitboot     7462     
pi_waitboot1    7464     
piexchangebyte  7a86     
pioffline       7768     
pionline        777e     
pireadbyte      7a50     
pireadbyte1     7a5e     
piwaitmsg       7796     
piwritebyte     7a70     
print           79af     
print1          79c4     
printalfa       79f1     
printdigit      79ed     
printexit       79cb     
printnline      79cd     
printnum1       79f7     
printnumber     79d8     
printnumeric    79f5     
printpi1        7a09     
printpi2        7a1b     
printpistdout   79fc     
printstatusmsg  7609     
procnm         =fd89     
prompt          626f     
prtflg         =f416     
prvint          603c     
ptoln          =54f7     
ptrfil         =f864     
putchar         7a29     
quitld         =739a     
r0000           6359     
r0001           636a     
r0002           636e     
r0003           637c     
r0100           6392     
r0101           6395     
r0102           63a3     
r0103           63a8     
r0200           63ae     
r0201           63b1     
r0202           63bf     
r0203           63c5     
r0300           63f6     
r0301           63f9     
r0302           6405     
r0303           641b     
r0400           6436     
r0401           6439     
r0402           6444     
ramad0         =f341     
ramad1         =f342     
ramad2         =f343     
ramad3         =f344     
rawflg         =f30d     
rc_crcerror    =  e2     
rc_filenotfound=  e6     
rc_outofsync   =  e5     
rc_success     =  e0     
rdprim         =f380     
rdslt          =   c     
readdatasize    78ca     
readdloop       7902     
readdloop1      7913     
readdloop2      7914     
ready          =  aa     
recvdatablock   7819     
recvdatablock1  7824     
recvdatablock_crcerror 783d     
reset          =  ff     
retrtn         =f38b     
rstclr         =7e14     
runbnf         =fcbe     
savend         =f87d     
savent         =fcbf     
savstk         =f6b1     
scrout         =4aff     
seclen         = 200     
secrecvdata     7873     
secrecvdata0    787a     
secrecvdata1    788c     
secrecvdataend  789c     
secrecvdataerr  7889     
secrecvdataretry 787d     
secsenddata     789e     
secsenddata0    78a6     
secsenddata1    78b8     
secsenddataend  78c8     
secsenddataerr  78b5     
secsenddataretry 78a9     
senddatablock   7843     
senddatablock1  7852     
senddatablock_crcerror 786a     
senddatablock_offsync 786f     
senddatasize    78d7     
sendifcmd       7a2c     
sendnext       =  a1     
sendpicmd       7815     
setint          600b     
skpchk         =6f1d     
skprom         =7d17     
sltatr         =fcc9     
slttbl         =fcc5     
sltwrk         =fd09     
snsmat         = 141     
starttransfer  =  a0     
stktop         =f674     
str_call_cmd    77b7     
strend         =f6c6     
synch           77eb     
t4010           4010     
t4013           4013     
t4016           4016     
t4019           4019     
t401c           401c     
t401f           401f     
t461e           461e     
t5374           5374     
t547d           547d     
t5534           5534     
t5677           5677     
t5696           5696     
t5700           5700     
t570d           570d     
t5807           5807     
t5b0f           5a8a     
t5b1a           5b1a     
t5b27           5b27     
t5b38           5b38     
t5c6c           5c81     
t5c96           5cab     
t5d24           5d39     
t5d2f           5d44     
t5d37           5d4c     
t5e4b           5e60     
t5ed0           5ee5     
t61ad           61c2     
t61bd           61d2     
t61c7           61dc     
t61d2           61e7     
t61e0           61f5     
t6248           625d     
t62e8           62fd     
t62ed           6302     
t632e           6339     
t65b1           65c6     
t69b9           69ce     
t6e68           6e7d     
t6fcc           6fe1     
t71f5           720a     
t72ae           72c3     
t72c2           72d7     
t72f2           7307     
temppt         =f678     
tempst         =f67a     
textterminator =   0     
totext         =  d2     
ttypos         =f661     
txtini         =7d31     
txttab         =f676     
valtyp         =f663     
vartab         =f6c2     
vmove          =2ef3     
vmovfm         =2f08     
wboot          =   0     
wrprim         =f385     
wrslt          =  14     
x003b          =  3b     
x0046          =  46     
x004b          =  4b     
xf1c9          =f1c9     
xf1d9          =f1d9     
xf1e2          =f1e2     
xf1e8          =f1e8     
xf1f4          =f1f4     
xf24f          =f24f     
xf252          =f252     
xf255          =f255     
xf258          =f258     
xf25b          =f25b     
xf25e          =f25e     
xf261          =f261     
xf264          =f264     
xf267          =f267     
xf26a          =f26a     
xf26d          =f26d     
xf270          =f270     
xf273          =f273     
xf276          =f276     
xf279          =f279     
xf27c          =f27c     
xf27f          =f27f     
xf282          =f282     
xf285          =f285     
xf288          =f288     
xf28b          =f28b     
xf28e          =f28e     
xf291          =f291     
xf294          =f294     
xf297          =f297     
xf29a          =f29a     
xf29d          =f29d     
xf2a0          =f2a0     
xf2a3          =f2a3     
xf2a6          =f2a6     
xf2a9          =f2a9     
xf2ac          =f2ac     
xf2af          =f2af     
xf2b2          =f2b2     
xf2b5          =f2b5     
xf327          =f327     
xf32c          =f32c     
xf331          =f331     
xf365          =f365     
xf368          =f368     
xf36b          =f36b     
xf371          =f371     
xf374          =f374     
xf377          =f377     
xf37a          =f37a     
xf37d          =f37d     
xfer           =f36e     
yc000          =c000     
yf1f7          =f1f7     
yf20b          =f20b     
yf22b          =f22b     
yf237          =f237     
yf238          =f238     
yf239          =f239     
yf23a          =f23a     
yf23b          =f23b     
yf23c          =f23c     
yf23d          =f23d     
yf23f          =f23f     
yf241          =f241     
yf242          =f242     
yf243          =f243     
yf245          =f245     
yf246          =f246     
yf247          =f247     
yf248          =f248     
yf249          =f249     
yf24a          =f24a     
yf24c          =f24c     
yf24e          =f24e     
yf2b8          =f2b8     
yf2b9          =f2b9     
yf2c4          =f2c4     
yf2c5          =f2c5     
yf2d0          =f2d0     
yf2dc          =f2dc     
yf2dd          =f2dd     
yf2de          =f2de     
yf2df          =f2df     
yf2e0          =f2e0     
yf2e1          =f2e1     
yf2e2          =f2e2     
yf2e4          =f2e4     
yf2e8          =f2e8     
yf2ea          =f2ea     
yf2ec          =f2ec     
yf2ee          =f2ee     
yf2f0          =f2f0     
yf2f2          =f2f2     
yf2f4          =f2f4     
yf2f8          =f2f8     
yf2fa          =f2fa     
yf2fc          =f2fc     
yf2fe          =f2fe     
yf2ff          =f2ff     
yf300          =f300     
yf302          =f302     
yf306          =f306     
yf307          =f307     
yf309          =f309     
yf30b          =f30b     
yf30c          =f30c     
yf30e          =f30e     
yf30f          =f30f     
yf323          =f323     
yf325          =f325     
yf336          =f336     
yf337          =f337     
yf338          =f338     
yf339          =f339     
yf33b          =f33b     
yf33d          =f33d     
yf33f          =f33f     
yf340          =f340     
yf345          =f345     
yf346          =f346     
yf347          =f347     
yf348          =f348     
yf349          =f349     
yf34b          =f34b     
yf34f          =f34f     
yf351          =f351     
yf353          =f353     
yf355          =f355     
yfb21          =fb21     
yfb29          =fb29     
yffff          =ffff     
